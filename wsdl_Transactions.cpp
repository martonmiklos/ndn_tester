// This file is generated by KDAB's kdwsdl2cpp from Transactions.svc.
// All changes you do to this file will be lost.

#include "wsdl_Transactions.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

NSTransactions::__ReasonCode_ReasonCodeEnum::__ReasonCode_ReasonCodeEnum( const Type &type )
{
    mType = type;
}

void NSTransactions::__ReasonCode_ReasonCodeEnum::setType( Type type )
{
    mType = type;
}

NSTransactions::__ReasonCode_ReasonCodeEnum::Type NSTransactions::__ReasonCode_ReasonCodeEnum::type() const
{
    return mType;
}

NSTransactions::__ReasonCode_ReasonCodeEnum::operator Type() const
{
    return mType;
}

QVariant NSTransactions::__ReasonCode_ReasonCodeEnum::serialize() const
{
    switch ( mType ) {
        case NSTransactions::__ReasonCode_ReasonCodeEnum::Scrapping:
            return QString::fromLatin1("Scrapping");
        case NSTransactions::__ReasonCode_ReasonCodeEnum::Usage:
            return QString::fromLatin1("Usage");
        case NSTransactions::__ReasonCode_ReasonCodeEnum::OtherLoss:
            return QString::fromLatin1("OtherLoss");
        case NSTransactions::__ReasonCode_ReasonCodeEnum::InventoryCorrection:
            return QString::fromLatin1("InventoryCorrection");
        case NSTransactions::__ReasonCode_ReasonCodeEnum::OtherGain:
            return QString::fromLatin1("OtherGain");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSTransactions::__ReasonCode_ReasonCodeEnum::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Scrapping", NSTransactions::__ReasonCode_ReasonCodeEnum::Scrapping },
    { "Usage", NSTransactions::__ReasonCode_ReasonCodeEnum::Usage },
    { "OtherLoss", NSTransactions::__ReasonCode_ReasonCodeEnum::OtherLoss },
    { "InventoryCorrection", NSTransactions::__ReasonCode_ReasonCodeEnum::InventoryCorrection },
    { "OtherGain", NSTransactions::__ReasonCode_ReasonCodeEnum::OtherGain }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__ReasonCode_ReasonCodeEnum'.", qPrintable(str) );
}

NSTransactions::__ReasonCode_ReasonCodeEnum::__ReasonCode_ReasonCodeEnum()
    : mType(Type(0))
{
}

NSTransactions::__ReasonCode_ReasonCodeEnum::~__ReasonCode_ReasonCodeEnum()
{
}


NSTransactions::__MovementType::__MovementType( const Type &type )
{
    mType = type;
}

void NSTransactions::__MovementType::setType( Type type )
{
    mType = type;
}

NSTransactions::__MovementType::Type NSTransactions::__MovementType::type() const
{
    return mType;
}

NSTransactions::__MovementType::operator Type() const
{
    return mType;
}

QVariant NSTransactions::__MovementType::serialize() const
{
    switch ( mType ) {
        case NSTransactions::__MovementType::AB:
            return QString::fromLatin1("AB");
        case NSTransactions::__MovementType::ABS:
            return QString::fromLatin1("ABS");
        case NSTransactions::__MovementType::BET:
            return QString::fromLatin1("BET");
        case NSTransactions::__MovementType::BETS:
            return QString::fromLatin1("BETS");
        case NSTransactions::__MovementType::SVISZ:
            return QString::fromLatin1("SVISZ");
        case NSTransactions::__MovementType::SVISZS:
            return QString::fromLatin1("SVISZS");
        case NSTransactions::__MovementType::KIT:
            return QString::fromLatin1("KIT");
        case NSTransactions::__MovementType::KITS:
            return QString::fromLatin1("KITS");
        case NSTransactions::__MovementType::LELTT:
            return QString::fromLatin1("LELTT");
        case NSTransactions::__MovementType::LELTH:
            return QString::fromLatin1("LELTH");
        case NSTransactions::__MovementType::EGYT:
            return QString::fromLatin1("EGYT");
        case NSTransactions::__MovementType::EGYJ:
            return QString::fromLatin1("EGYJ");
        case NSTransactions::__MovementType::ASZLA:
            return QString::fromLatin1("ASZLA");
        case NSTransactions::__MovementType::ASZLAS:
            return QString::fromLatin1("ASZLAS");
        case NSTransactions::__MovementType::NY:
            return QString::fromLatin1("NY");
        case NSTransactions::__MovementType::NYS:
            return QString::fromLatin1("NYS");
        case NSTransactions::__MovementType::KSZLA:
            return QString::fromLatin1("KSZLA");
        case NSTransactions::__MovementType::KSZLAS:
            return QString::fromLatin1("KSZLAS");
        case NSTransactions::__MovementType::VVISZ:
            return QString::fromLatin1("VVISZ");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSTransactions::__MovementType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AB", NSTransactions::__MovementType::AB },
    { "ABS", NSTransactions::__MovementType::ABS },
    { "BET", NSTransactions::__MovementType::BET },
    { "BETS", NSTransactions::__MovementType::BETS },
    { "SVISZ", NSTransactions::__MovementType::SVISZ },
    { "SVISZS", NSTransactions::__MovementType::SVISZS },
    { "KIT", NSTransactions::__MovementType::KIT },
    { "KITS", NSTransactions::__MovementType::KITS },
    { "LELTT", NSTransactions::__MovementType::LELTT },
    { "LELTH", NSTransactions::__MovementType::LELTH },
    { "EGYT", NSTransactions::__MovementType::EGYT },
    { "EGYJ", NSTransactions::__MovementType::EGYJ },
    { "ASZLA", NSTransactions::__MovementType::ASZLA },
    { "ASZLAS", NSTransactions::__MovementType::ASZLAS },
    { "NY", NSTransactions::__MovementType::NY },
    { "NYS", NSTransactions::__MovementType::NYS },
    { "KSZLA", NSTransactions::__MovementType::KSZLA },
    { "KSZLAS", NSTransactions::__MovementType::KSZLAS },
    { "VVISZ", NSTransactions::__MovementType::VVISZ }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__MovementType'.", qPrintable(str) );
}

NSTransactions::__MovementType::__MovementType()
    : mType(Type(0))
{
}

NSTransactions::__MovementType::~__MovementType()
{
}


NSTransactions::__ExciseCategory::__ExciseCategory( const Type &type )
{
    mType = type;
}

void NSTransactions::__ExciseCategory::setType( Type type )
{
    mType = type;
}

NSTransactions::__ExciseCategory::Type NSTransactions::__ExciseCategory::type() const
{
    return mType;
}

NSTransactions::__ExciseCategory::operator Type() const
{
    return mType;
}

QVariant NSTransactions::__ExciseCategory::serialize() const
{
    switch ( mType ) {
        case NSTransactions::__ExciseCategory::Tobacco:
            return QString::fromLatin1("Tobacco");
        case NSTransactions::__ExciseCategory::Alcohol:
            return QString::fromLatin1("Alcohol");
        case NSTransactions::__ExciseCategory::Other:
            return QString::fromLatin1("Other");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSTransactions::__ExciseCategory::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Tobacco", NSTransactions::__ExciseCategory::Tobacco },
    { "Alcohol", NSTransactions::__ExciseCategory::Alcohol },
    { "Other", NSTransactions::__ExciseCategory::Other }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__ExciseCategory'.", qPrintable(str) );
}

NSTransactions::__ExciseCategory::__ExciseCategory()
    : mType(Type(0))
{
}

NSTransactions::__ExciseCategory::~__ExciseCategory()
{
}


NSTransactions::__VATCode::__VATCode( const Type &type )
{
    mType = type;
}

void NSTransactions::__VATCode::setType( Type type )
{
    mType = type;
}

NSTransactions::__VATCode::Type NSTransactions::__VATCode::type() const
{
    return mType;
}

NSTransactions::__VATCode::operator Type() const
{
    return mType;
}

QVariant NSTransactions::__VATCode::serialize() const
{
    switch ( mType ) {
        case NSTransactions::__VATCode::A:
            return QString::fromLatin1("A");
        case NSTransactions::__VATCode::B:
            return QString::fromLatin1("B");
        case NSTransactions::__VATCode::C:
            return QString::fromLatin1("C");
        case NSTransactions::__VATCode::D:
            return QString::fromLatin1("D");
        case NSTransactions::__VATCode::E:
            return QString::fromLatin1("E");
        case NSTransactions::__VATCode::F:
            return QString::fromLatin1("F");
        case NSTransactions::__VATCode::G:
            return QString::fromLatin1("G");
        case NSTransactions::__VATCode::H:
            return QString::fromLatin1("H");
        case NSTransactions::__VATCode::I:
            return QString::fromLatin1("I");
        case NSTransactions::__VATCode::J:
            return QString::fromLatin1("J");
        case NSTransactions::__VATCode::K:
            return QString::fromLatin1("K");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSTransactions::__VATCode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[11] = {
    { "A", NSTransactions::__VATCode::A },
    { "B", NSTransactions::__VATCode::B },
    { "C", NSTransactions::__VATCode::C },
    { "D", NSTransactions::__VATCode::D },
    { "E", NSTransactions::__VATCode::E },
    { "F", NSTransactions::__VATCode::F },
    { "G", NSTransactions::__VATCode::G },
    { "H", NSTransactions::__VATCode::H },
    { "I", NSTransactions::__VATCode::I },
    { "J", NSTransactions::__VATCode::J },
    { "K", NSTransactions::__VATCode::K }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 11; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__VATCode'.", qPrintable(str) );
}

NSTransactions::__VATCode::__VATCode()
    : mType(Type(0))
{
}

NSTransactions::__VATCode::~__VATCode()
{
}


class NSTransactions::__TransactionCallConfig::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mBatchSize;
    bool mBatchSize_nil;
    int mFrequency;
    bool mFrequency_nil;
    int mOffset;
    bool mOffset_nil;
};

NSTransactions::__TransactionCallConfig::PrivateDPtr::PrivateDPtr()
    : mBatchSize(0), mBatchSize_nil(true), mFrequency(0), mFrequency_nil(true), mOffset(0), mOffset_nil(true)
{
}


void NSTransactions::__TransactionCallConfig::setBatchSize( int batchSize )
{
    d_ptr->mBatchSize_nil = false;
    d_ptr->mBatchSize = batchSize;
}

int NSTransactions::__TransactionCallConfig::batchSize() const
{
    return d_ptr->mBatchSize;
}

void NSTransactions::__TransactionCallConfig::setFrequency( int frequency )
{
    d_ptr->mFrequency_nil = false;
    d_ptr->mFrequency = frequency;
}

int NSTransactions::__TransactionCallConfig::frequency() const
{
    return d_ptr->mFrequency;
}

void NSTransactions::__TransactionCallConfig::setOffset( int offset )
{
    d_ptr->mOffset_nil = false;
    d_ptr->mOffset = offset;
}

int NSTransactions::__TransactionCallConfig::offset() const
{
    return d_ptr->mOffset;
}

KDSoapValue NSTransactions::__TransactionCallConfig::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("TransactionCallConfig"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mBatchSize_nil) {
        KDSoapValue _valueBatchSize(QString::fromLatin1("BatchSize"), QVariant::fromValue(d_ptr->mBatchSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueBatchSize.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBatchSize.setQualified(true);
        if (!_valueBatchSize.isNil())
        args.append(_valueBatchSize);// converter_complextype.cpp:253
    }
    if (!d_ptr->mFrequency_nil) {
        KDSoapValue _valueFrequency(QString::fromLatin1("Frequency"), QVariant::fromValue(d_ptr->mFrequency), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueFrequency.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueFrequency.setQualified(true);
        if (!_valueFrequency.isNil())
        args.append(_valueFrequency);// converter_complextype.cpp:253
    }
    if (!d_ptr->mOffset_nil) {
        KDSoapValue _valueOffset(QString::fromLatin1("Offset"), QVariant::fromValue(d_ptr->mOffset), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueOffset.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueOffset.setQualified(true);
        if (!_valueOffset.isNil())
        args.append(_valueOffset);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__TransactionCallConfig::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BatchSize")) {// converter_complextype.cpp:271
            d_ptr->mBatchSize = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Frequency")) {// converter_complextype.cpp:271
            d_ptr->mFrequency = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Offset")) {// converter_complextype.cpp:271
            d_ptr->mOffset = val.value().value<int>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__TransactionCallConfig::__TransactionCallConfig()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__TransactionCallConfig::~__TransactionCallConfig()
{
}

NSTransactions::__TransactionCallConfig::__TransactionCallConfig( const NSTransactions::__TransactionCallConfig& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__TransactionCallConfig&  NSTransactions::__TransactionCallConfig::operator=( const NSTransactions::__TransactionCallConfig& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__SalesDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mDiscountValue;
    bool mDiscountValue_nil;
    NSTransactions::__ExciseCategory mExciseCategory;
    bool mExciseCategory_nil;
    float mGrossConsumerPrice;
    bool mGrossConsumerPrice_nil;
    float mGrossLineTotal;
    bool mGrossLineTotal_nil;
    float mGrossUnitPrice;
    bool mGrossUnitPrice_nil;
    int mLineNo;
    bool mLineNo_nil;
    QString mLocalProductCode;
    bool mLocalProductCode_nil;
    float mNetListPrice;
    bool mNetListPrice_nil;
    float mNetUnitPrice;
    bool mNetUnitPrice_nil;
    float mPackagingQuantity;
    bool mPackagingQuantity_nil;
    QString mPackagingUnitOfMeasure;
    bool mPackagingUnitOfMeasure_nil;
    QString mProductBarCode;
    bool mProductBarCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mProductName;
    bool mProductName_nil;
    float mProductStockPrice;
    bool mProductStockPrice_nil;
    float mQuantity;
    bool mQuantity_nil;
    QString mUnitOfMeasure;
    bool mUnitOfMeasure_nil;
    NSTransactions::__VATCode mVATCode;
    bool mVATCode_nil;
    float mVATLineTotal;
    bool mVATLineTotal_nil;
    float mVATPercent;
    bool mVATPercent_nil;
};

NSTransactions::__SalesDocumentLine::PrivateDPtr::PrivateDPtr()
    : mDiscountValue(0), mDiscountValue_nil(true), mExciseCategory_nil(true), mGrossConsumerPrice(0), mGrossConsumerPrice_nil(true), mGrossLineTotal(0), mGrossLineTotal_nil(true), mGrossUnitPrice(0), mGrossUnitPrice_nil(true), mLineNo(0), mLineNo_nil(true), mLocalProductCode_nil(true), mNetListPrice(0), mNetListPrice_nil(true), mNetUnitPrice(0), mNetUnitPrice_nil(true), mPackagingQuantity(0), mPackagingQuantity_nil(true), mPackagingUnitOfMeasure_nil(true), mProductBarCode_nil(true), mProductCode_nil(true), mProductGroup(0), mProductGroup_nil(true), mProductName_nil(true), mProductStockPrice(0), mProductStockPrice_nil(true), mQuantity(0), mQuantity_nil(true), mUnitOfMeasure_nil(true), mVATCode_nil(true), mVATLineTotal(0), mVATLineTotal_nil(true), mVATPercent(0), mVATPercent_nil(true)
{
}


void NSTransactions::__SalesDocumentLine::setDiscountValue( float discountValue )
{
    d_ptr->mDiscountValue_nil = false;
    d_ptr->mDiscountValue = discountValue;
}

float NSTransactions::__SalesDocumentLine::discountValue() const
{
    return d_ptr->mDiscountValue;
}

void NSTransactions::__SalesDocumentLine::setExciseCategory( const NSTransactions::__ExciseCategory& exciseCategory )
{
    d_ptr->mExciseCategory_nil = false;
    d_ptr->mExciseCategory = exciseCategory;
}

NSTransactions::__ExciseCategory NSTransactions::__SalesDocumentLine::exciseCategory() const
{
    return d_ptr->mExciseCategory;
}

void NSTransactions::__SalesDocumentLine::setGrossConsumerPrice( float grossConsumerPrice )
{
    d_ptr->mGrossConsumerPrice_nil = false;
    d_ptr->mGrossConsumerPrice = grossConsumerPrice;
}

float NSTransactions::__SalesDocumentLine::grossConsumerPrice() const
{
    return d_ptr->mGrossConsumerPrice;
}

void NSTransactions::__SalesDocumentLine::setGrossLineTotal( float grossLineTotal )
{
    d_ptr->mGrossLineTotal_nil = false;
    d_ptr->mGrossLineTotal = grossLineTotal;
}

float NSTransactions::__SalesDocumentLine::grossLineTotal() const
{
    return d_ptr->mGrossLineTotal;
}

void NSTransactions::__SalesDocumentLine::setGrossUnitPrice( float grossUnitPrice )
{
    d_ptr->mGrossUnitPrice_nil = false;
    d_ptr->mGrossUnitPrice = grossUnitPrice;
}

float NSTransactions::__SalesDocumentLine::grossUnitPrice() const
{
    return d_ptr->mGrossUnitPrice;
}

void NSTransactions::__SalesDocumentLine::setLineNo( int lineNo )
{
    d_ptr->mLineNo_nil = false;
    d_ptr->mLineNo = lineNo;
}

int NSTransactions::__SalesDocumentLine::lineNo() const
{
    return d_ptr->mLineNo;
}

void NSTransactions::__SalesDocumentLine::setLocalProductCode( const QString& localProductCode )
{
    d_ptr->mLocalProductCode_nil = false;
    d_ptr->mLocalProductCode = localProductCode;
}

QString NSTransactions::__SalesDocumentLine::localProductCode() const
{
    return d_ptr->mLocalProductCode;
}

void NSTransactions::__SalesDocumentLine::setNetListPrice( float netListPrice )
{
    d_ptr->mNetListPrice_nil = false;
    d_ptr->mNetListPrice = netListPrice;
}

float NSTransactions::__SalesDocumentLine::netListPrice() const
{
    return d_ptr->mNetListPrice;
}

void NSTransactions::__SalesDocumentLine::setNetUnitPrice( float netUnitPrice )
{
    d_ptr->mNetUnitPrice_nil = false;
    d_ptr->mNetUnitPrice = netUnitPrice;
}

float NSTransactions::__SalesDocumentLine::netUnitPrice() const
{
    return d_ptr->mNetUnitPrice;
}

void NSTransactions::__SalesDocumentLine::setPackagingQuantity( float packagingQuantity )
{
    d_ptr->mPackagingQuantity_nil = false;
    d_ptr->mPackagingQuantity = packagingQuantity;
}

float NSTransactions::__SalesDocumentLine::packagingQuantity() const
{
    return d_ptr->mPackagingQuantity;
}

void NSTransactions::__SalesDocumentLine::setPackagingUnitOfMeasure( const QString& packagingUnitOfMeasure )
{
    d_ptr->mPackagingUnitOfMeasure_nil = false;
    d_ptr->mPackagingUnitOfMeasure = packagingUnitOfMeasure;
}

QString NSTransactions::__SalesDocumentLine::packagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure;
}

void NSTransactions::__SalesDocumentLine::setProductBarCode( const QString& productBarCode )
{
    d_ptr->mProductBarCode_nil = false;
    d_ptr->mProductBarCode = productBarCode;
}

QString NSTransactions::__SalesDocumentLine::productBarCode() const
{
    return d_ptr->mProductBarCode;
}

void NSTransactions::__SalesDocumentLine::setProductCode( const QString& productCode )
{
    d_ptr->mProductCode_nil = false;
    d_ptr->mProductCode = productCode;
}

QString NSTransactions::__SalesDocumentLine::productCode() const
{
    return d_ptr->mProductCode;
}

void NSTransactions::__SalesDocumentLine::setProductGroup( int productGroup )
{
    d_ptr->mProductGroup_nil = false;
    d_ptr->mProductGroup = productGroup;
}

int NSTransactions::__SalesDocumentLine::productGroup() const
{
    return d_ptr->mProductGroup;
}

void NSTransactions::__SalesDocumentLine::setProductName( const QString& productName )
{
    d_ptr->mProductName_nil = false;
    d_ptr->mProductName = productName;
}

QString NSTransactions::__SalesDocumentLine::productName() const
{
    return d_ptr->mProductName;
}

void NSTransactions::__SalesDocumentLine::setProductStockPrice( float productStockPrice )
{
    d_ptr->mProductStockPrice_nil = false;
    d_ptr->mProductStockPrice = productStockPrice;
}

float NSTransactions::__SalesDocumentLine::productStockPrice() const
{
    return d_ptr->mProductStockPrice;
}

void NSTransactions::__SalesDocumentLine::setQuantity( float quantity )
{
    d_ptr->mQuantity_nil = false;
    d_ptr->mQuantity = quantity;
}

float NSTransactions::__SalesDocumentLine::quantity() const
{
    return d_ptr->mQuantity;
}

void NSTransactions::__SalesDocumentLine::setUnitOfMeasure( const QString& unitOfMeasure )
{
    d_ptr->mUnitOfMeasure_nil = false;
    d_ptr->mUnitOfMeasure = unitOfMeasure;
}

QString NSTransactions::__SalesDocumentLine::unitOfMeasure() const
{
    return d_ptr->mUnitOfMeasure;
}

void NSTransactions::__SalesDocumentLine::setVATCode( const NSTransactions::__VATCode& vATCode )
{
    d_ptr->mVATCode_nil = false;
    d_ptr->mVATCode = vATCode;
}

NSTransactions::__VATCode NSTransactions::__SalesDocumentLine::vATCode() const
{
    return d_ptr->mVATCode;
}

void NSTransactions::__SalesDocumentLine::setVATLineTotal( float vATLineTotal )
{
    d_ptr->mVATLineTotal_nil = false;
    d_ptr->mVATLineTotal = vATLineTotal;
}

float NSTransactions::__SalesDocumentLine::vATLineTotal() const
{
    return d_ptr->mVATLineTotal;
}

void NSTransactions::__SalesDocumentLine::setVATPercent( float vATPercent )
{
    d_ptr->mVATPercent_nil = false;
    d_ptr->mVATPercent = vATPercent;
}

float NSTransactions::__SalesDocumentLine::vATPercent() const
{
    return d_ptr->mVATPercent;
}

KDSoapValue NSTransactions::__SalesDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("SalesDocumentLine"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mDiscountValue_nil) {
        KDSoapValue _valueDiscountValue(QString::fromLatin1("DiscountValue"), QVariant::fromValue(d_ptr->mDiscountValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueDiscountValue.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDiscountValue.setQualified(true);
        _valueDiscountValue.setNillable(true);
        if (!_valueDiscountValue.isNil())
        args.append(_valueDiscountValue);// converter_complextype.cpp:253
    }
    if (!d_ptr->mExciseCategory_nil) {
        KDSoapValue _valueExciseCategory(QString::fromLatin1("ExciseCategory"), d_ptr->mExciseCategory.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));// converter_complextype.cpp:241
        _valueExciseCategory.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueExciseCategory.setQualified(true);
        _valueExciseCategory.setNillable(true);
        if (!_valueExciseCategory.isNil())
        args.append(_valueExciseCategory);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGrossConsumerPrice_nil) {
        KDSoapValue _valueGrossConsumerPrice(QString::fromLatin1("GrossConsumerPrice"), QVariant::fromValue(d_ptr->mGrossConsumerPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGrossConsumerPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossConsumerPrice.setQualified(true);
        _valueGrossConsumerPrice.setNillable(true);
        if (!_valueGrossConsumerPrice.isNil())
        args.append(_valueGrossConsumerPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGrossLineTotal_nil) {
        KDSoapValue _valueGrossLineTotal(QString::fromLatin1("GrossLineTotal"), QVariant::fromValue(d_ptr->mGrossLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGrossLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossLineTotal.setQualified(true);
        _valueGrossLineTotal.setNillable(true);
        if (!_valueGrossLineTotal.isNil())
        args.append(_valueGrossLineTotal);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGrossUnitPrice_nil) {
        KDSoapValue _valueGrossUnitPrice(QString::fromLatin1("GrossUnitPrice"), QVariant::fromValue(d_ptr->mGrossUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGrossUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossUnitPrice.setQualified(true);
        _valueGrossUnitPrice.setNillable(true);
        if (!_valueGrossUnitPrice.isNil())
        args.append(_valueGrossUnitPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        _valueLineNo.setNillable(true);
        if (!_valueLineNo.isNil())
        args.append(_valueLineNo);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalProductCode_nil) {
        KDSoapValue _valueLocalProductCode(QString::fromLatin1("LocalProductCode"), QVariant::fromValue(d_ptr->mLocalProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalProductCode.setQualified(true);
        _valueLocalProductCode.setNillable(true);
        if (!_valueLocalProductCode.isNil())
        args.append(_valueLocalProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mNetListPrice_nil) {
        KDSoapValue _valueNetListPrice(QString::fromLatin1("NetListPrice"), QVariant::fromValue(d_ptr->mNetListPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueNetListPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetListPrice.setQualified(true);
        _valueNetListPrice.setNillable(true);
        if (!_valueNetListPrice.isNil())
        args.append(_valueNetListPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mNetUnitPrice_nil) {
        KDSoapValue _valueNetUnitPrice(QString::fromLatin1("NetUnitPrice"), QVariant::fromValue(d_ptr->mNetUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueNetUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetUnitPrice.setQualified(true);
        _valueNetUnitPrice.setNillable(true);
        if (!_valueNetUnitPrice.isNil())
        args.append(_valueNetUnitPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingQuantity_nil) {
        KDSoapValue _valuePackagingQuantity(QString::fromLatin1("PackagingQuantity"), QVariant::fromValue(d_ptr->mPackagingQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valuePackagingQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingQuantity.setQualified(true);
        _valuePackagingQuantity.setNillable(true);
        if (!_valuePackagingQuantity.isNil())
        args.append(_valuePackagingQuantity);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingUnitOfMeasure_nil) {
        KDSoapValue _valuePackagingUnitOfMeasure(QString::fromLatin1("PackagingUnitOfMeasure"), QVariant::fromValue(d_ptr->mPackagingUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valuePackagingUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitOfMeasure.setQualified(true);
        _valuePackagingUnitOfMeasure.setNillable(true);
        if (!_valuePackagingUnitOfMeasure.isNil())
        args.append(_valuePackagingUnitOfMeasure);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductBarCode_nil) {
        KDSoapValue _valueProductBarCode(QString::fromLatin1("ProductBarCode"), QVariant::fromValue(d_ptr->mProductBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductBarCode.setQualified(true);
        _valueProductBarCode.setNillable(true);
        if (!_valueProductBarCode.isNil())
        args.append(_valueProductBarCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        if (!_valueProductCode.isNil())
        args.append(_valueProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        if (!_valueProductGroup.isNil())
        args.append(_valueProductGroup);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductName_nil) {
        KDSoapValue _valueProductName(QString::fromLatin1("ProductName"), QVariant::fromValue(d_ptr->mProductName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductName.setQualified(true);
        _valueProductName.setNillable(true);
        if (!_valueProductName.isNil())
        args.append(_valueProductName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductStockPrice_nil) {
        KDSoapValue _valueProductStockPrice(QString::fromLatin1("ProductStockPrice"), QVariant::fromValue(d_ptr->mProductStockPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueProductStockPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductStockPrice.setQualified(true);
        _valueProductStockPrice.setNillable(true);
        if (!_valueProductStockPrice.isNil())
        args.append(_valueProductStockPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mQuantity_nil) {
        KDSoapValue _valueQuantity(QString::fromLatin1("Quantity"), QVariant::fromValue(d_ptr->mQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueQuantity.setQualified(true);
        _valueQuantity.setNillable(true);
        if (!_valueQuantity.isNil())
        args.append(_valueQuantity);// converter_complextype.cpp:253
    }
    if (!d_ptr->mUnitOfMeasure_nil) {
        KDSoapValue _valueUnitOfMeasure(QString::fromLatin1("UnitOfMeasure"), QVariant::fromValue(d_ptr->mUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueUnitOfMeasure.setQualified(true);
        _valueUnitOfMeasure.setNillable(true);
        if (!_valueUnitOfMeasure.isNil())
        args.append(_valueUnitOfMeasure);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATCode_nil) {
        KDSoapValue _valueVATCode(QString::fromLatin1("VATCode"), d_ptr->mVATCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));// converter_complextype.cpp:241
        _valueVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATCode.setQualified(true);
        _valueVATCode.setNillable(true);
        if (!_valueVATCode.isNil())
        args.append(_valueVATCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATLineTotal_nil) {
        KDSoapValue _valueVATLineTotal(QString::fromLatin1("VATLineTotal"), QVariant::fromValue(d_ptr->mVATLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueVATLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATLineTotal.setQualified(true);
        _valueVATLineTotal.setNillable(true);
        if (!_valueVATLineTotal.isNil())
        args.append(_valueVATLineTotal);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATPercent_nil) {
        KDSoapValue _valueVATPercent(QString::fromLatin1("VATPercent"), QVariant::fromValue(d_ptr->mVATPercent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueVATPercent.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATPercent.setQualified(true);
        _valueVATPercent.setNillable(true);
        if (!_valueVATPercent.isNil())
        args.append(_valueVATPercent);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__SalesDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DiscountValue")) {// converter_complextype.cpp:271
            d_ptr->mDiscountValue = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ExciseCategory")) {// converter_complextype.cpp:271
            d_ptr->mExciseCategory.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("GrossConsumerPrice")) {// converter_complextype.cpp:271
            d_ptr->mGrossConsumerPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("GrossLineTotal")) {// converter_complextype.cpp:271
            d_ptr->mGrossLineTotal = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("GrossUnitPrice")) {// converter_complextype.cpp:271
            d_ptr->mGrossUnitPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LineNo")) {// converter_complextype.cpp:271
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LocalProductCode")) {// converter_complextype.cpp:271
            d_ptr->mLocalProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("NetListPrice")) {// converter_complextype.cpp:271
            d_ptr->mNetListPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("NetUnitPrice")) {// converter_complextype.cpp:271
            d_ptr->mNetUnitPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingQuantity")) {// converter_complextype.cpp:271
            d_ptr->mPackagingQuantity = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingUnitOfMeasure")) {// converter_complextype.cpp:271
            d_ptr->mPackagingUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductBarCode")) {// converter_complextype.cpp:271
            d_ptr->mProductBarCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductCode")) {// converter_complextype.cpp:271
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:271
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductName")) {// converter_complextype.cpp:271
            d_ptr->mProductName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductStockPrice")) {// converter_complextype.cpp:271
            d_ptr->mProductStockPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Quantity")) {// converter_complextype.cpp:271
            d_ptr->mQuantity = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("UnitOfMeasure")) {// converter_complextype.cpp:271
            d_ptr->mUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATCode")) {// converter_complextype.cpp:271
            d_ptr->mVATCode.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("VATLineTotal")) {// converter_complextype.cpp:271
            d_ptr->mVATLineTotal = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATPercent")) {// converter_complextype.cpp:271
            d_ptr->mVATPercent = val.value().value<float>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__SalesDocumentLine::__SalesDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__SalesDocumentLine::~__SalesDocumentLine()
{
}

NSTransactions::__SalesDocumentLine::__SalesDocumentLine( const NSTransactions::__SalesDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__SalesDocumentLine&  NSTransactions::__SalesDocumentLine::operator=( const NSTransactions::__SalesDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__StockDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mDiscountValue;
    bool mDiscountValue_nil;
    NSTransactions::__ExciseCategory mExciseCategory;
    bool mExciseCategory_nil;
    float mGrossConsumerPrice;
    bool mGrossConsumerPrice_nil;
    float mGrossLineTotal;
    bool mGrossLineTotal_nil;
    float mGrossUnitPrice;
    bool mGrossUnitPrice_nil;
    int mLineNo;
    bool mLineNo_nil;
    QString mLocalProductCode;
    bool mLocalProductCode_nil;
    float mNetListPrice;
    bool mNetListPrice_nil;
    float mNetUnitPrice;
    bool mNetUnitPrice_nil;
    float mPackagingQuantity;
    bool mPackagingQuantity_nil;
    QString mPackagingUnitOfMeasure;
    bool mPackagingUnitOfMeasure_nil;
    QString mProductBarCode;
    bool mProductBarCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mProductName;
    bool mProductName_nil;
    float mProductStockPrice;
    bool mProductStockPrice_nil;
    float mQuantity;
    bool mQuantity_nil;
    QString mUnitOfMeasure;
    bool mUnitOfMeasure_nil;
    NSTransactions::__VATCode mVATCode;
    bool mVATCode_nil;
    float mVATLineTotal;
    bool mVATLineTotal_nil;
    float mVATPercent;
    bool mVATPercent_nil;
};

NSTransactions::__StockDocumentLine::PrivateDPtr::PrivateDPtr()
    : mDiscountValue(0), mDiscountValue_nil(true), mExciseCategory_nil(true), mGrossConsumerPrice(0), mGrossConsumerPrice_nil(true), mGrossLineTotal(0), mGrossLineTotal_nil(true), mGrossUnitPrice(0), mGrossUnitPrice_nil(true), mLineNo(0), mLineNo_nil(true), mLocalProductCode_nil(true), mNetListPrice(0), mNetListPrice_nil(true), mNetUnitPrice(0), mNetUnitPrice_nil(true), mPackagingQuantity(0), mPackagingQuantity_nil(true), mPackagingUnitOfMeasure_nil(true), mProductBarCode_nil(true), mProductCode_nil(true), mProductGroup(0), mProductGroup_nil(true), mProductName_nil(true), mProductStockPrice(0), mProductStockPrice_nil(true), mQuantity(0), mQuantity_nil(true), mUnitOfMeasure_nil(true), mVATCode_nil(true), mVATLineTotal(0), mVATLineTotal_nil(true), mVATPercent(0), mVATPercent_nil(true)
{
}


void NSTransactions::__StockDocumentLine::setDiscountValue( float discountValue )
{
    d_ptr->mDiscountValue_nil = false;
    d_ptr->mDiscountValue = discountValue;
}

float NSTransactions::__StockDocumentLine::discountValue() const
{
    return d_ptr->mDiscountValue;
}

void NSTransactions::__StockDocumentLine::setExciseCategory( const NSTransactions::__ExciseCategory& exciseCategory )
{
    d_ptr->mExciseCategory_nil = false;
    d_ptr->mExciseCategory = exciseCategory;
}

NSTransactions::__ExciseCategory NSTransactions::__StockDocumentLine::exciseCategory() const
{
    return d_ptr->mExciseCategory;
}

void NSTransactions::__StockDocumentLine::setGrossConsumerPrice( float grossConsumerPrice )
{
    d_ptr->mGrossConsumerPrice_nil = false;
    d_ptr->mGrossConsumerPrice = grossConsumerPrice;
}

float NSTransactions::__StockDocumentLine::grossConsumerPrice() const
{
    return d_ptr->mGrossConsumerPrice;
}

void NSTransactions::__StockDocumentLine::setGrossLineTotal( float grossLineTotal )
{
    d_ptr->mGrossLineTotal_nil = false;
    d_ptr->mGrossLineTotal = grossLineTotal;
}

float NSTransactions::__StockDocumentLine::grossLineTotal() const
{
    return d_ptr->mGrossLineTotal;
}

void NSTransactions::__StockDocumentLine::setGrossUnitPrice( float grossUnitPrice )
{
    d_ptr->mGrossUnitPrice_nil = false;
    d_ptr->mGrossUnitPrice = grossUnitPrice;
}

float NSTransactions::__StockDocumentLine::grossUnitPrice() const
{
    return d_ptr->mGrossUnitPrice;
}

void NSTransactions::__StockDocumentLine::setLineNo( int lineNo )
{
    d_ptr->mLineNo_nil = false;
    d_ptr->mLineNo = lineNo;
}

int NSTransactions::__StockDocumentLine::lineNo() const
{
    return d_ptr->mLineNo;
}

void NSTransactions::__StockDocumentLine::setLocalProductCode( const QString& localProductCode )
{
    d_ptr->mLocalProductCode_nil = false;
    d_ptr->mLocalProductCode = localProductCode;
}

QString NSTransactions::__StockDocumentLine::localProductCode() const
{
    return d_ptr->mLocalProductCode;
}

void NSTransactions::__StockDocumentLine::setNetListPrice( float netListPrice )
{
    d_ptr->mNetListPrice_nil = false;
    d_ptr->mNetListPrice = netListPrice;
}

float NSTransactions::__StockDocumentLine::netListPrice() const
{
    return d_ptr->mNetListPrice;
}

void NSTransactions::__StockDocumentLine::setNetUnitPrice( float netUnitPrice )
{
    d_ptr->mNetUnitPrice_nil = false;
    d_ptr->mNetUnitPrice = netUnitPrice;
}

float NSTransactions::__StockDocumentLine::netUnitPrice() const
{
    return d_ptr->mNetUnitPrice;
}

void NSTransactions::__StockDocumentLine::setPackagingQuantity( float packagingQuantity )
{
    d_ptr->mPackagingQuantity_nil = false;
    d_ptr->mPackagingQuantity = packagingQuantity;
}

float NSTransactions::__StockDocumentLine::packagingQuantity() const
{
    return d_ptr->mPackagingQuantity;
}

void NSTransactions::__StockDocumentLine::setPackagingUnitOfMeasure( const QString& packagingUnitOfMeasure )
{
    d_ptr->mPackagingUnitOfMeasure_nil = false;
    d_ptr->mPackagingUnitOfMeasure = packagingUnitOfMeasure;
}

QString NSTransactions::__StockDocumentLine::packagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure;
}

void NSTransactions::__StockDocumentLine::setProductBarCode( const QString& productBarCode )
{
    d_ptr->mProductBarCode_nil = false;
    d_ptr->mProductBarCode = productBarCode;
}

QString NSTransactions::__StockDocumentLine::productBarCode() const
{
    return d_ptr->mProductBarCode;
}

void NSTransactions::__StockDocumentLine::setProductCode( const QString& productCode )
{
    d_ptr->mProductCode_nil = false;
    d_ptr->mProductCode = productCode;
}

QString NSTransactions::__StockDocumentLine::productCode() const
{
    return d_ptr->mProductCode;
}

void NSTransactions::__StockDocumentLine::setProductGroup( int productGroup )
{
    d_ptr->mProductGroup_nil = false;
    d_ptr->mProductGroup = productGroup;
}

int NSTransactions::__StockDocumentLine::productGroup() const
{
    return d_ptr->mProductGroup;
}

void NSTransactions::__StockDocumentLine::setProductName( const QString& productName )
{
    d_ptr->mProductName_nil = false;
    d_ptr->mProductName = productName;
}

QString NSTransactions::__StockDocumentLine::productName() const
{
    return d_ptr->mProductName;
}

void NSTransactions::__StockDocumentLine::setProductStockPrice( float productStockPrice )
{
    d_ptr->mProductStockPrice_nil = false;
    d_ptr->mProductStockPrice = productStockPrice;
}

float NSTransactions::__StockDocumentLine::productStockPrice() const
{
    return d_ptr->mProductStockPrice;
}

void NSTransactions::__StockDocumentLine::setQuantity( float quantity )
{
    d_ptr->mQuantity_nil = false;
    d_ptr->mQuantity = quantity;
}

float NSTransactions::__StockDocumentLine::quantity() const
{
    return d_ptr->mQuantity;
}

void NSTransactions::__StockDocumentLine::setUnitOfMeasure( const QString& unitOfMeasure )
{
    d_ptr->mUnitOfMeasure_nil = false;
    d_ptr->mUnitOfMeasure = unitOfMeasure;
}

QString NSTransactions::__StockDocumentLine::unitOfMeasure() const
{
    return d_ptr->mUnitOfMeasure;
}

void NSTransactions::__StockDocumentLine::setVATCode( const NSTransactions::__VATCode& vATCode )
{
    d_ptr->mVATCode_nil = false;
    d_ptr->mVATCode = vATCode;
}

NSTransactions::__VATCode NSTransactions::__StockDocumentLine::vATCode() const
{
    return d_ptr->mVATCode;
}

void NSTransactions::__StockDocumentLine::setVATLineTotal( float vATLineTotal )
{
    d_ptr->mVATLineTotal_nil = false;
    d_ptr->mVATLineTotal = vATLineTotal;
}

float NSTransactions::__StockDocumentLine::vATLineTotal() const
{
    return d_ptr->mVATLineTotal;
}

void NSTransactions::__StockDocumentLine::setVATPercent( float vATPercent )
{
    d_ptr->mVATPercent_nil = false;
    d_ptr->mVATPercent = vATPercent;
}

float NSTransactions::__StockDocumentLine::vATPercent() const
{
    return d_ptr->mVATPercent;
}

KDSoapValue NSTransactions::__StockDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("StockDocumentLine"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mDiscountValue_nil) {
        KDSoapValue _valueDiscountValue(QString::fromLatin1("DiscountValue"), QVariant::fromValue(d_ptr->mDiscountValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueDiscountValue.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDiscountValue.setQualified(true);
        _valueDiscountValue.setNillable(true);
        if (!_valueDiscountValue.isNil())
        args.append(_valueDiscountValue);// converter_complextype.cpp:253
    }
    if (!d_ptr->mExciseCategory_nil) {
        KDSoapValue _valueExciseCategory(QString::fromLatin1("ExciseCategory"), d_ptr->mExciseCategory.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));// converter_complextype.cpp:241
        _valueExciseCategory.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueExciseCategory.setQualified(true);
        _valueExciseCategory.setNillable(true);
        if (!_valueExciseCategory.isNil())
        args.append(_valueExciseCategory);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGrossConsumerPrice_nil) {
        KDSoapValue _valueGrossConsumerPrice(QString::fromLatin1("GrossConsumerPrice"), QVariant::fromValue(d_ptr->mGrossConsumerPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGrossConsumerPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossConsumerPrice.setQualified(true);
        _valueGrossConsumerPrice.setNillable(true);
        if (!_valueGrossConsumerPrice.isNil())
        args.append(_valueGrossConsumerPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGrossLineTotal_nil) {
        KDSoapValue _valueGrossLineTotal(QString::fromLatin1("GrossLineTotal"), QVariant::fromValue(d_ptr->mGrossLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGrossLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossLineTotal.setQualified(true);
        _valueGrossLineTotal.setNillable(true);
        if (!_valueGrossLineTotal.isNil())
        args.append(_valueGrossLineTotal);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGrossUnitPrice_nil) {
        KDSoapValue _valueGrossUnitPrice(QString::fromLatin1("GrossUnitPrice"), QVariant::fromValue(d_ptr->mGrossUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGrossUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossUnitPrice.setQualified(true);
        _valueGrossUnitPrice.setNillable(true);
        if (!_valueGrossUnitPrice.isNil())
        args.append(_valueGrossUnitPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        _valueLineNo.setNillable(true);
        if (!_valueLineNo.isNil())
        args.append(_valueLineNo);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalProductCode_nil) {
        KDSoapValue _valueLocalProductCode(QString::fromLatin1("LocalProductCode"), QVariant::fromValue(d_ptr->mLocalProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalProductCode.setQualified(true);
        _valueLocalProductCode.setNillable(true);
        if (!_valueLocalProductCode.isNil())
        args.append(_valueLocalProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mNetListPrice_nil) {
        KDSoapValue _valueNetListPrice(QString::fromLatin1("NetListPrice"), QVariant::fromValue(d_ptr->mNetListPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueNetListPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetListPrice.setQualified(true);
        _valueNetListPrice.setNillable(true);
        if (!_valueNetListPrice.isNil())
        args.append(_valueNetListPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mNetUnitPrice_nil) {
        KDSoapValue _valueNetUnitPrice(QString::fromLatin1("NetUnitPrice"), QVariant::fromValue(d_ptr->mNetUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueNetUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetUnitPrice.setQualified(true);
        _valueNetUnitPrice.setNillable(true);
        if (!_valueNetUnitPrice.isNil())
        args.append(_valueNetUnitPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingQuantity_nil) {
        KDSoapValue _valuePackagingQuantity(QString::fromLatin1("PackagingQuantity"), QVariant::fromValue(d_ptr->mPackagingQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valuePackagingQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingQuantity.setQualified(true);
        _valuePackagingQuantity.setNillable(true);
        if (!_valuePackagingQuantity.isNil())
        args.append(_valuePackagingQuantity);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingUnitOfMeasure_nil) {
        KDSoapValue _valuePackagingUnitOfMeasure(QString::fromLatin1("PackagingUnitOfMeasure"), QVariant::fromValue(d_ptr->mPackagingUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valuePackagingUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitOfMeasure.setQualified(true);
        _valuePackagingUnitOfMeasure.setNillable(true);
        if (!_valuePackagingUnitOfMeasure.isNil())
        args.append(_valuePackagingUnitOfMeasure);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductBarCode_nil) {
        KDSoapValue _valueProductBarCode(QString::fromLatin1("ProductBarCode"), QVariant::fromValue(d_ptr->mProductBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductBarCode.setQualified(true);
        _valueProductBarCode.setNillable(true);
        if (!_valueProductBarCode.isNil())
        args.append(_valueProductBarCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        if (!_valueProductCode.isNil())
        args.append(_valueProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        if (!_valueProductGroup.isNil())
        args.append(_valueProductGroup);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductName_nil) {
        KDSoapValue _valueProductName(QString::fromLatin1("ProductName"), QVariant::fromValue(d_ptr->mProductName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductName.setQualified(true);
        _valueProductName.setNillable(true);
        if (!_valueProductName.isNil())
        args.append(_valueProductName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductStockPrice_nil) {
        KDSoapValue _valueProductStockPrice(QString::fromLatin1("ProductStockPrice"), QVariant::fromValue(d_ptr->mProductStockPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueProductStockPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductStockPrice.setQualified(true);
        _valueProductStockPrice.setNillable(true);
        if (!_valueProductStockPrice.isNil())
        args.append(_valueProductStockPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mQuantity_nil) {
        KDSoapValue _valueQuantity(QString::fromLatin1("Quantity"), QVariant::fromValue(d_ptr->mQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueQuantity.setQualified(true);
        _valueQuantity.setNillable(true);
        if (!_valueQuantity.isNil())
        args.append(_valueQuantity);// converter_complextype.cpp:253
    }
    if (!d_ptr->mUnitOfMeasure_nil) {
        KDSoapValue _valueUnitOfMeasure(QString::fromLatin1("UnitOfMeasure"), QVariant::fromValue(d_ptr->mUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueUnitOfMeasure.setQualified(true);
        _valueUnitOfMeasure.setNillable(true);
        if (!_valueUnitOfMeasure.isNil())
        args.append(_valueUnitOfMeasure);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATCode_nil) {
        KDSoapValue _valueVATCode(QString::fromLatin1("VATCode"), d_ptr->mVATCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));// converter_complextype.cpp:241
        _valueVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATCode.setQualified(true);
        _valueVATCode.setNillable(true);
        if (!_valueVATCode.isNil())
        args.append(_valueVATCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATLineTotal_nil) {
        KDSoapValue _valueVATLineTotal(QString::fromLatin1("VATLineTotal"), QVariant::fromValue(d_ptr->mVATLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueVATLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATLineTotal.setQualified(true);
        _valueVATLineTotal.setNillable(true);
        if (!_valueVATLineTotal.isNil())
        args.append(_valueVATLineTotal);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATPercent_nil) {
        KDSoapValue _valueVATPercent(QString::fromLatin1("VATPercent"), QVariant::fromValue(d_ptr->mVATPercent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueVATPercent.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATPercent.setQualified(true);
        _valueVATPercent.setNillable(true);
        if (!_valueVATPercent.isNil())
        args.append(_valueVATPercent);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__StockDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DiscountValue")) {// converter_complextype.cpp:271
            d_ptr->mDiscountValue = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ExciseCategory")) {// converter_complextype.cpp:271
            d_ptr->mExciseCategory.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("GrossConsumerPrice")) {// converter_complextype.cpp:271
            d_ptr->mGrossConsumerPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("GrossLineTotal")) {// converter_complextype.cpp:271
            d_ptr->mGrossLineTotal = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("GrossUnitPrice")) {// converter_complextype.cpp:271
            d_ptr->mGrossUnitPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LineNo")) {// converter_complextype.cpp:271
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LocalProductCode")) {// converter_complextype.cpp:271
            d_ptr->mLocalProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("NetListPrice")) {// converter_complextype.cpp:271
            d_ptr->mNetListPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("NetUnitPrice")) {// converter_complextype.cpp:271
            d_ptr->mNetUnitPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingQuantity")) {// converter_complextype.cpp:271
            d_ptr->mPackagingQuantity = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingUnitOfMeasure")) {// converter_complextype.cpp:271
            d_ptr->mPackagingUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductBarCode")) {// converter_complextype.cpp:271
            d_ptr->mProductBarCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductCode")) {// converter_complextype.cpp:271
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:271
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductName")) {// converter_complextype.cpp:271
            d_ptr->mProductName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductStockPrice")) {// converter_complextype.cpp:271
            d_ptr->mProductStockPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Quantity")) {// converter_complextype.cpp:271
            d_ptr->mQuantity = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("UnitOfMeasure")) {// converter_complextype.cpp:271
            d_ptr->mUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATCode")) {// converter_complextype.cpp:271
            d_ptr->mVATCode.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("VATLineTotal")) {// converter_complextype.cpp:271
            d_ptr->mVATLineTotal = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATPercent")) {// converter_complextype.cpp:271
            d_ptr->mVATPercent = val.value().value<float>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__StockDocumentLine::__StockDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__StockDocumentLine::~__StockDocumentLine()
{
}

NSTransactions::__StockDocumentLine::__StockDocumentLine( const NSTransactions::__StockDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__StockDocumentLine&  NSTransactions::__StockDocumentLine::operator=( const NSTransactions::__StockDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__Partner::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCity;
    bool mCity_nil;
    QString mLocalPartnerCode;
    bool mLocalPartnerCode_nil;
    QString mName;
    bool mName_nil;
    QString mPostCode;
    bool mPostCode_nil;
    QString mStreet;
    bool mStreet_nil;
};

NSTransactions::__Partner::PrivateDPtr::PrivateDPtr()
    : mCity_nil(true), mLocalPartnerCode_nil(true), mName_nil(true), mPostCode_nil(true), mStreet_nil(true)
{
}


void NSTransactions::__Partner::setCity( const QString& city )
{
    d_ptr->mCity_nil = false;
    d_ptr->mCity = city;
}

QString NSTransactions::__Partner::city() const
{
    return d_ptr->mCity;
}

void NSTransactions::__Partner::setLocalPartnerCode( const QString& localPartnerCode )
{
    d_ptr->mLocalPartnerCode_nil = false;
    d_ptr->mLocalPartnerCode = localPartnerCode;
}

QString NSTransactions::__Partner::localPartnerCode() const
{
    return d_ptr->mLocalPartnerCode;
}

void NSTransactions::__Partner::setName( const QString& name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = name;
}

QString NSTransactions::__Partner::name() const
{
    return d_ptr->mName;
}

void NSTransactions::__Partner::setPostCode( const QString& postCode )
{
    d_ptr->mPostCode_nil = false;
    d_ptr->mPostCode = postCode;
}

QString NSTransactions::__Partner::postCode() const
{
    return d_ptr->mPostCode;
}

void NSTransactions::__Partner::setStreet( const QString& street )
{
    d_ptr->mStreet_nil = false;
    d_ptr->mStreet = street;
}

QString NSTransactions::__Partner::street() const
{
    return d_ptr->mStreet;
}

KDSoapValue NSTransactions::__Partner::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Partner"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCity_nil) {
        KDSoapValue _valueCity(QString::fromLatin1("City"), QVariant::fromValue(d_ptr->mCity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCity.setQualified(true);
        _valueCity.setNillable(true);
        if (!_valueCity.isNil())
        args.append(_valueCity);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalPartnerCode_nil) {
        KDSoapValue _valueLocalPartnerCode(QString::fromLatin1("LocalPartnerCode"), QVariant::fromValue(d_ptr->mLocalPartnerCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalPartnerCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalPartnerCode.setQualified(true);
        _valueLocalPartnerCode.setNillable(true);
        if (!_valueLocalPartnerCode.isNil())
        args.append(_valueLocalPartnerCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPostCode_nil) {
        KDSoapValue _valuePostCode(QString::fromLatin1("PostCode"), QVariant::fromValue(d_ptr->mPostCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valuePostCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePostCode.setQualified(true);
        _valuePostCode.setNillable(true);
        if (!_valuePostCode.isNil())
        args.append(_valuePostCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mStreet_nil) {
        KDSoapValue _valueStreet(QString::fromLatin1("Street"), QVariant::fromValue(d_ptr->mStreet), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueStreet.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStreet.setQualified(true);
        _valueStreet.setNillable(true);
        if (!_valueStreet.isNil())
        args.append(_valueStreet);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__Partner::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("City")) {// converter_complextype.cpp:271
            d_ptr->mCity = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LocalPartnerCode")) {// converter_complextype.cpp:271
            d_ptr->mLocalPartnerCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Name")) {// converter_complextype.cpp:271
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PostCode")) {// converter_complextype.cpp:271
            d_ptr->mPostCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Street")) {// converter_complextype.cpp:271
            d_ptr->mStreet = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__Partner::__Partner()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__Partner::~__Partner()
{
}

NSTransactions::__Partner::__Partner( const NSTransactions::__Partner& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__Partner&  NSTransactions::__Partner::operator=( const NSTransactions::__Partner& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfResponseCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__ResponseCode> mResponseCode;
    bool mResponseCode_nil;
};

NSTransactions::__ArrayOfResponseCode::PrivateDPtr::PrivateDPtr()
    : mResponseCode_nil(true)
{
}


void NSTransactions::__ArrayOfResponseCode::setResponseCode( const QList<NSTransactions::__ResponseCode>& responseCode )
{
    d_ptr->mResponseCode_nil = false;
    d_ptr->mResponseCode = responseCode;
}

QList<NSTransactions::__ResponseCode> NSTransactions::__ArrayOfResponseCode::responseCode() const
{
    return d_ptr->mResponseCode;
}

KDSoapValue NSTransactions::__ArrayOfResponseCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfResponseCode"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mResponseCode.count(); ++i) {
        KDSoapValue _valueResponseCode(d_ptr->mResponseCode.at(i).serialize(QString::fromLatin1("ResponseCode")));// converter_complextype.cpp:233
        _valueResponseCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueResponseCode.setQualified(true);
        _valueResponseCode.setNillable(true);
        args.append(_valueResponseCode);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfResponseCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ResponseCode")) {// converter_complextype.cpp:271
            NSTransactions::__ResponseCode mResponseCodeTemp;
            mResponseCodeTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mResponseCode.append(mResponseCodeTemp);
        }
    }
}

NSTransactions::__ArrayOfResponseCode::__ArrayOfResponseCode()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfResponseCode::~__ArrayOfResponseCode()
{
}

NSTransactions::__ArrayOfResponseCode::__ArrayOfResponseCode( const NSTransactions::__ArrayOfResponseCode& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfResponseCode&  NSTransactions::__ArrayOfResponseCode::operator=( const NSTransactions::__ArrayOfResponseCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::TNS__CreateSalesTransactionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::__TransactionResponse mCreateSalesTransactionResult;
    bool mCreateSalesTransactionResult_nil;
};

NSTransactions::TNS__CreateSalesTransactionResponse::PrivateDPtr::PrivateDPtr()
    : mCreateSalesTransactionResult_nil(true)
{
}


void NSTransactions::TNS__CreateSalesTransactionResponse::setCreateSalesTransactionResult( const NSTransactions::__TransactionResponse& createSalesTransactionResult )
{
    d_ptr->mCreateSalesTransactionResult_nil = false;
    d_ptr->mCreateSalesTransactionResult = createSalesTransactionResult;
}

NSTransactions::__TransactionResponse NSTransactions::TNS__CreateSalesTransactionResponse::createSalesTransactionResult() const
{
    return d_ptr->mCreateSalesTransactionResult;
}

KDSoapValue NSTransactions::TNS__CreateSalesTransactionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateSalesTransactionResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCreateSalesTransactionResult_nil) {
        KDSoapValue _valueCreateSalesTransactionResult(d_ptr->mCreateSalesTransactionResult.serialize(QString::fromLatin1("CreateSalesTransactionResult")));// converter_complextype.cpp:233
        _valueCreateSalesTransactionResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreateSalesTransactionResult.setQualified(true);
        _valueCreateSalesTransactionResult.setNillable(true);
        if (!_valueCreateSalesTransactionResult.isNil())
        args.append(_valueCreateSalesTransactionResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::TNS__CreateSalesTransactionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CreateSalesTransactionResult")) {// converter_complextype.cpp:271
            d_ptr->mCreateSalesTransactionResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::TNS__CreateSalesTransactionResponse::TNS__CreateSalesTransactionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::TNS__CreateSalesTransactionResponse::~TNS__CreateSalesTransactionResponse()
{
}

NSTransactions::TNS__CreateSalesTransactionResponse::TNS__CreateSalesTransactionResponse( const NSTransactions::TNS__CreateSalesTransactionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::TNS__CreateSalesTransactionResponse&  NSTransactions::TNS__CreateSalesTransactionResponse::operator=( const NSTransactions::TNS__CreateSalesTransactionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ResponseCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCode;
    bool mCode_nil;
    QString mKey;
    bool mKey_nil;
    QString mLocalId;
    bool mLocalId_nil;
    QString mMessage;
    bool mMessage_nil;
};

NSTransactions::__ResponseCode::PrivateDPtr::PrivateDPtr()
    : mCode_nil(true), mKey_nil(true), mLocalId_nil(true), mMessage_nil(true)
{
}


void NSTransactions::__ResponseCode::setCode( const QString& code )
{
    d_ptr->mCode_nil = false;
    d_ptr->mCode = code;
}

QString NSTransactions::__ResponseCode::code() const
{
    return d_ptr->mCode;
}

void NSTransactions::__ResponseCode::setKey( const QString& key )
{
    d_ptr->mKey_nil = false;
    d_ptr->mKey = key;
}

QString NSTransactions::__ResponseCode::key() const
{
    return d_ptr->mKey;
}

void NSTransactions::__ResponseCode::setLocalId( const QString& localId )
{
    d_ptr->mLocalId_nil = false;
    d_ptr->mLocalId = localId;
}

QString NSTransactions::__ResponseCode::localId() const
{
    return d_ptr->mLocalId;
}

void NSTransactions::__ResponseCode::setMessage( const QString& message )
{
    d_ptr->mMessage_nil = false;
    d_ptr->mMessage = message;
}

QString NSTransactions::__ResponseCode::message() const
{
    return d_ptr->mMessage;
}

KDSoapValue NSTransactions::__ResponseCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ResponseCode"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        _valueCode.setNillable(true);
        if (!_valueCode.isNil())
        args.append(_valueCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mKey_nil) {
        KDSoapValue _valueKey(QString::fromLatin1("Key"), QVariant::fromValue(d_ptr->mKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueKey.setQualified(true);
        _valueKey.setNillable(true);
        if (!_valueKey.isNil())
        args.append(_valueKey);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalId_nil) {
        KDSoapValue _valueLocalId(QString::fromLatin1("LocalId"), QVariant::fromValue(d_ptr->mLocalId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalId.setQualified(true);
        _valueLocalId.setNillable(true);
        if (!_valueLocalId.isNil())
        args.append(_valueLocalId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mMessage_nil) {
        KDSoapValue _valueMessage(QString::fromLatin1("Message"), QVariant::fromValue(d_ptr->mMessage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMessage.setQualified(true);
        _valueMessage.setNillable(true);
        if (!_valueMessage.isNil())
        args.append(_valueMessage);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ResponseCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Code")) {// converter_complextype.cpp:271
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Key")) {// converter_complextype.cpp:271
            d_ptr->mKey = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LocalId")) {// converter_complextype.cpp:271
            d_ptr->mLocalId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Message")) {// converter_complextype.cpp:271
            d_ptr->mMessage = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__ResponseCode::__ResponseCode()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ResponseCode::~__ResponseCode()
{
}

NSTransactions::__ResponseCode::__ResponseCode( const NSTransactions::__ResponseCode& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ResponseCode&  NSTransactions::__ResponseCode::operator=( const NSTransactions::__ResponseCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__StockDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mComment;
    bool mComment_nil;
    KDDateTime mCreatedAt;
    KDDateTime mDocumentDate;
    float mGross;
    KDDateTime mIssuedOnDate;
    NSTransactions::__ArrayOfStockDocumentLine mLines;
    bool mLines_nil;
    QString mLocalDocumentId;
    NSTransactions::__MovementType mMovementType;
    NSTransactions::__Partner mPartner;
    bool mPartner_nil;
    QString mReason;
    bool mReason_nil;
    NSTransactions::__ReasonCode_ReasonCodeEnum mReasonCode;
    bool mReasonCode_nil;
    QString mReference;
    bool mReference_nil;
    QString mShopId;
    QString mStornoReference;
    bool mStornoReference_nil;
    float mVAT;
    NSTransactions::__ArrayOfDocumentVatBreakDown mVATBreakDown;
    bool mVATBreakDown_nil;
};

NSTransactions::__StockDocument::PrivateDPtr::PrivateDPtr()
    : mComment_nil(true), mGross(0), mLines_nil(true), mPartner_nil(true), mReason_nil(true), mReasonCode_nil(true), mReference_nil(true), mStornoReference_nil(true), mVAT(0), mVATBreakDown_nil(true)
{
}


void NSTransactions::__StockDocument::setComment( const QString& comment )
{
    d_ptr->mComment_nil = false;
    d_ptr->mComment = comment;
}

QString NSTransactions::__StockDocument::comment() const
{
    return d_ptr->mComment;
}

void NSTransactions::__StockDocument::setCreatedAt( const KDDateTime& createdAt )
{
    d_ptr->mCreatedAt = createdAt;
}

KDDateTime NSTransactions::__StockDocument::createdAt() const
{
    return d_ptr->mCreatedAt;
}

void NSTransactions::__StockDocument::setDocumentDate( const KDDateTime& documentDate )
{
    d_ptr->mDocumentDate = documentDate;
}

KDDateTime NSTransactions::__StockDocument::documentDate() const
{
    return d_ptr->mDocumentDate;
}

void NSTransactions::__StockDocument::setGross( float gross )
{
    d_ptr->mGross = gross;
}

float NSTransactions::__StockDocument::gross() const
{
    return d_ptr->mGross;
}

void NSTransactions::__StockDocument::setIssuedOnDate( const KDDateTime& issuedOnDate )
{
    d_ptr->mIssuedOnDate = issuedOnDate;
}

KDDateTime NSTransactions::__StockDocument::issuedOnDate() const
{
    return d_ptr->mIssuedOnDate;
}

void NSTransactions::__StockDocument::setLines( const NSTransactions::__ArrayOfStockDocumentLine& lines )
{
    d_ptr->mLines_nil = false;
    d_ptr->mLines = lines;
}

NSTransactions::__ArrayOfStockDocumentLine NSTransactions::__StockDocument::lines() const
{
    return d_ptr->mLines;
}

void NSTransactions::__StockDocument::setLocalDocumentId( const QString& localDocumentId )
{
    d_ptr->mLocalDocumentId = localDocumentId;
}

QString NSTransactions::__StockDocument::localDocumentId() const
{
    return d_ptr->mLocalDocumentId;
}

void NSTransactions::__StockDocument::setMovementType( const NSTransactions::__MovementType& movementType )
{
    d_ptr->mMovementType = movementType;
}

NSTransactions::__MovementType NSTransactions::__StockDocument::movementType() const
{
    return d_ptr->mMovementType;
}

void NSTransactions::__StockDocument::setPartner( const NSTransactions::__Partner& partner )
{
    d_ptr->mPartner_nil = false;
    d_ptr->mPartner = partner;
}

NSTransactions::__Partner NSTransactions::__StockDocument::partner() const
{
    return d_ptr->mPartner;
}

void NSTransactions::__StockDocument::setReason( const QString& reason )
{
    d_ptr->mReason_nil = false;
    d_ptr->mReason = reason;
}

QString NSTransactions::__StockDocument::reason() const
{
    return d_ptr->mReason;
}

void NSTransactions::__StockDocument::setReasonCode( const NSTransactions::__ReasonCode_ReasonCodeEnum& reasonCode )
{
    d_ptr->mReasonCode_nil = false;
    d_ptr->mReasonCode = reasonCode;
}

NSTransactions::__ReasonCode_ReasonCodeEnum NSTransactions::__StockDocument::reasonCode() const
{
    return d_ptr->mReasonCode;
}

void NSTransactions::__StockDocument::setReference( const QString& reference )
{
    d_ptr->mReference_nil = false;
    d_ptr->mReference = reference;
}

QString NSTransactions::__StockDocument::reference() const
{
    return d_ptr->mReference;
}

void NSTransactions::__StockDocument::setShopId( const QString& shopId )
{
    d_ptr->mShopId = shopId;
}

QString NSTransactions::__StockDocument::shopId() const
{
    return d_ptr->mShopId;
}

void NSTransactions::__StockDocument::setStornoReference( const QString& stornoReference )
{
    d_ptr->mStornoReference_nil = false;
    d_ptr->mStornoReference = stornoReference;
}

QString NSTransactions::__StockDocument::stornoReference() const
{
    return d_ptr->mStornoReference;
}

void NSTransactions::__StockDocument::setVAT( float vAT )
{
    d_ptr->mVAT = vAT;
}

float NSTransactions::__StockDocument::vAT() const
{
    return d_ptr->mVAT;
}

void NSTransactions::__StockDocument::setVATBreakDown( const NSTransactions::__ArrayOfDocumentVatBreakDown& vATBreakDown )
{
    d_ptr->mVATBreakDown_nil = false;
    d_ptr->mVATBreakDown = vATBreakDown;
}

NSTransactions::__ArrayOfDocumentVatBreakDown NSTransactions::__StockDocument::vATBreakDown() const
{
    return d_ptr->mVATBreakDown;
}

KDSoapValue NSTransactions::__StockDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("StockDocument"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mComment_nil) {
        KDSoapValue _valueComment(QString::fromLatin1("Comment"), QVariant::fromValue(d_ptr->mComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueComment.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueComment.setQualified(true);
        _valueComment.setNillable(true);
        if (!_valueComment.isNil())
        args.append(_valueComment);// converter_complextype.cpp:253
    }
    KDSoapValue _valueCreatedAt(QString::fromLatin1("CreatedAt"), d_ptr->mCreatedAt.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
    _valueCreatedAt.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueCreatedAt.setQualified(true);
    _valueCreatedAt.setNillable(true);
    args.append(_valueCreatedAt);// converter_complextype.cpp:253
    KDSoapValue _valueDocumentDate(QString::fromLatin1("DocumentDate"), d_ptr->mDocumentDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
    _valueDocumentDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueDocumentDate.setQualified(true);
    _valueDocumentDate.setNillable(true);
    args.append(_valueDocumentDate);// converter_complextype.cpp:253
    KDSoapValue _valueGross(QString::fromLatin1("Gross"), QVariant::fromValue(d_ptr->mGross), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
    _valueGross.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueGross.setQualified(true);
    _valueGross.setNillable(true);
    args.append(_valueGross);// converter_complextype.cpp:253
    KDSoapValue _valueIssuedOnDate(QString::fromLatin1("IssuedOnDate"), d_ptr->mIssuedOnDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
    _valueIssuedOnDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueIssuedOnDate.setQualified(true);
    _valueIssuedOnDate.setNillable(true);
    args.append(_valueIssuedOnDate);// converter_complextype.cpp:253
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(d_ptr->mLines.serialize(QString::fromLatin1("Lines")));// converter_complextype.cpp:233
        _valueLines.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLines.setQualified(true);
        _valueLines.setNillable(true);
        if (!_valueLines.isNil())
        args.append(_valueLines);// converter_complextype.cpp:253
    }
    KDSoapValue _valueLocalDocumentId(QString::fromLatin1("LocalDocumentId"), QVariant::fromValue(d_ptr->mLocalDocumentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
    _valueLocalDocumentId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueLocalDocumentId.setQualified(true);
    _valueLocalDocumentId.setNillable(true);
    args.append(_valueLocalDocumentId);// converter_complextype.cpp:253
    KDSoapValue _valueMovementType(QString::fromLatin1("MovementType"), d_ptr->mMovementType.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));// converter_complextype.cpp:241
    _valueMovementType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueMovementType.setQualified(true);
    _valueMovementType.setNillable(true);
    args.append(_valueMovementType);// converter_complextype.cpp:253
    if (!d_ptr->mPartner_nil) {
        KDSoapValue _valuePartner(d_ptr->mPartner.serialize(QString::fromLatin1("Partner")));// converter_complextype.cpp:233
        _valuePartner.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePartner.setQualified(true);
        _valuePartner.setNillable(true);
        if (!_valuePartner.isNil())
        args.append(_valuePartner);// converter_complextype.cpp:253
    }
    if (!d_ptr->mReason_nil) {
        KDSoapValue _valueReason(QString::fromLatin1("Reason"), QVariant::fromValue(d_ptr->mReason), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueReason.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReason.setQualified(true);
        _valueReason.setNillable(true);
        if (!_valueReason.isNil())
        args.append(_valueReason);// converter_complextype.cpp:253
    }
    if (!d_ptr->mReasonCode_nil) {
        KDSoapValue _valueReasonCode(QString::fromLatin1("ReasonCode"), d_ptr->mReasonCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));// converter_complextype.cpp:241
        _valueReasonCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReasonCode.setQualified(true);
        _valueReasonCode.setNillable(true);
        if (!_valueReasonCode.isNil())
        args.append(_valueReasonCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mReference_nil) {
        KDSoapValue _valueReference(QString::fromLatin1("Reference"), QVariant::fromValue(d_ptr->mReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReference.setQualified(true);
        _valueReference.setNillable(true);
        if (!_valueReference.isNil())
        args.append(_valueReference);// converter_complextype.cpp:253
    }
    KDSoapValue _valueShopId(QString::fromLatin1("ShopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
    _valueShopId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueShopId.setQualified(true);
    _valueShopId.setNillable(true);
    args.append(_valueShopId);// converter_complextype.cpp:253
    if (!d_ptr->mStornoReference_nil) {
        KDSoapValue _valueStornoReference(QString::fromLatin1("StornoReference"), QVariant::fromValue(d_ptr->mStornoReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueStornoReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStornoReference.setQualified(true);
        _valueStornoReference.setNillable(true);
        if (!_valueStornoReference.isNil())
        args.append(_valueStornoReference);// converter_complextype.cpp:253
    }
    KDSoapValue _valueVAT(QString::fromLatin1("VAT"), QVariant::fromValue(d_ptr->mVAT), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
    _valueVAT.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueVAT.setQualified(true);
    _valueVAT.setNillable(true);
    args.append(_valueVAT);// converter_complextype.cpp:253
    if (!d_ptr->mVATBreakDown_nil) {
        KDSoapValue _valueVATBreakDown(d_ptr->mVATBreakDown.serialize(QString::fromLatin1("VATBreakDown")));// converter_complextype.cpp:233
        _valueVATBreakDown.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATBreakDown.setQualified(true);
        _valueVATBreakDown.setNillable(true);
        if (!_valueVATBreakDown.isNil())
        args.append(_valueVATBreakDown);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__StockDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Comment")) {// converter_complextype.cpp:271
            d_ptr->mComment = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("CreatedAt")) {// converter_complextype.cpp:271
            d_ptr->mCreatedAt = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("DocumentDate")) {// converter_complextype.cpp:271
            d_ptr->mDocumentDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Gross")) {// converter_complextype.cpp:271
            d_ptr->mGross = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("IssuedOnDate")) {// converter_complextype.cpp:271
            d_ptr->mIssuedOnDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Lines")) {// converter_complextype.cpp:271
            d_ptr->mLines.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("LocalDocumentId")) {// converter_complextype.cpp:271
            d_ptr->mLocalDocumentId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("MovementType")) {// converter_complextype.cpp:271
            d_ptr->mMovementType.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("Partner")) {// converter_complextype.cpp:271
            d_ptr->mPartner.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("Reason")) {// converter_complextype.cpp:271
            d_ptr->mReason = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ReasonCode")) {// converter_complextype.cpp:271
            d_ptr->mReasonCode.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("Reference")) {// converter_complextype.cpp:271
            d_ptr->mReference = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ShopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("StornoReference")) {// converter_complextype.cpp:271
            d_ptr->mStornoReference = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VAT")) {// converter_complextype.cpp:271
            d_ptr->mVAT = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATBreakDown")) {// converter_complextype.cpp:271
            d_ptr->mVATBreakDown.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::__StockDocument::__StockDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__StockDocument::~__StockDocument()
{
}

NSTransactions::__StockDocument::__StockDocument( const NSTransactions::__StockDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__StockDocument&  NSTransactions::__StockDocument::operator=( const NSTransactions::__StockDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfStockDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__StockDocument> mStockDocument;
    bool mStockDocument_nil;
};

NSTransactions::__ArrayOfStockDocument::PrivateDPtr::PrivateDPtr()
    : mStockDocument_nil(true)
{
}


void NSTransactions::__ArrayOfStockDocument::setStockDocument( const QList<NSTransactions::__StockDocument>& stockDocument )
{
    d_ptr->mStockDocument_nil = false;
    d_ptr->mStockDocument = stockDocument;
}

QList<NSTransactions::__StockDocument> NSTransactions::__ArrayOfStockDocument::stockDocument() const
{
    return d_ptr->mStockDocument;
}

KDSoapValue NSTransactions::__ArrayOfStockDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfStockDocument"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mStockDocument.count(); ++i) {
        KDSoapValue _valueStockDocument(d_ptr->mStockDocument.at(i).serialize(QString::fromLatin1("StockDocument")));// converter_complextype.cpp:233
        _valueStockDocument.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStockDocument.setQualified(true);
        _valueStockDocument.setNillable(true);
        args.append(_valueStockDocument);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfStockDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StockDocument")) {// converter_complextype.cpp:271
            NSTransactions::__StockDocument mStockDocumentTemp;
            mStockDocumentTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mStockDocument.append(mStockDocumentTemp);
        }
    }
}

NSTransactions::__ArrayOfStockDocument::__ArrayOfStockDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfStockDocument::~__ArrayOfStockDocument()
{
}

NSTransactions::__ArrayOfStockDocument::__ArrayOfStockDocument( const NSTransactions::__ArrayOfStockDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfStockDocument&  NSTransactions::__ArrayOfStockDocument::operator=( const NSTransactions::__ArrayOfStockDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfSalesDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__SalesDocument> mSalesDocument;
    bool mSalesDocument_nil;
};

NSTransactions::__ArrayOfSalesDocument::PrivateDPtr::PrivateDPtr()
    : mSalesDocument_nil(true)
{
}


void NSTransactions::__ArrayOfSalesDocument::setSalesDocument( const QList<NSTransactions::__SalesDocument>& salesDocument )
{
    d_ptr->mSalesDocument_nil = false;
    d_ptr->mSalesDocument = salesDocument;
}

QList<NSTransactions::__SalesDocument> NSTransactions::__ArrayOfSalesDocument::salesDocument() const
{
    return d_ptr->mSalesDocument;
}

KDSoapValue NSTransactions::__ArrayOfSalesDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfSalesDocument"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mSalesDocument.count(); ++i) {
        KDSoapValue _valueSalesDocument(d_ptr->mSalesDocument.at(i).serialize(QString::fromLatin1("SalesDocument")));// converter_complextype.cpp:233
        _valueSalesDocument.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueSalesDocument.setQualified(true);
        _valueSalesDocument.setNillable(true);
        args.append(_valueSalesDocument);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfSalesDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SalesDocument")) {// converter_complextype.cpp:271
            NSTransactions::__SalesDocument mSalesDocumentTemp;
            mSalesDocumentTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mSalesDocument.append(mSalesDocumentTemp);
        }
    }
}

NSTransactions::__ArrayOfSalesDocument::__ArrayOfSalesDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfSalesDocument::~__ArrayOfSalesDocument()
{
}

NSTransactions::__ArrayOfSalesDocument::__ArrayOfSalesDocument( const NSTransactions::__ArrayOfSalesDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfSalesDocument&  NSTransactions::__ArrayOfSalesDocument::operator=( const NSTransactions::__ArrayOfSalesDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::TNS__CreateSalesTransaction::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    NSTransactions::__ArrayOfSalesDocument mDocuments;
    bool mDocuments_nil;
};

NSTransactions::TNS__CreateSalesTransaction::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mDocuments_nil(true)
{
}


void NSTransactions::TNS__CreateSalesTransaction::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSTransactions::TNS__CreateSalesTransaction::shopId() const
{
    return d_ptr->mShopId;
}

void NSTransactions::TNS__CreateSalesTransaction::setDocuments( const NSTransactions::__ArrayOfSalesDocument& documents )
{
    d_ptr->mDocuments_nil = false;
    d_ptr->mDocuments = documents;
}

NSTransactions::__ArrayOfSalesDocument NSTransactions::TNS__CreateSalesTransaction::documents() const
{
    return d_ptr->mDocuments;
}

KDSoapValue NSTransactions::TNS__CreateSalesTransaction::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateSalesTransaction"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mDocuments_nil) {
        KDSoapValue _valueDocuments(d_ptr->mDocuments.serialize(QString::fromLatin1("documents")));// converter_complextype.cpp:233
        _valueDocuments.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueDocuments.setQualified(true);
        _valueDocuments.setNillable(true);
        if (!_valueDocuments.isNil())
        args.append(_valueDocuments);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::TNS__CreateSalesTransaction::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("documents")) {// converter_complextype.cpp:271
            d_ptr->mDocuments.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::TNS__CreateSalesTransaction::TNS__CreateSalesTransaction()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::TNS__CreateSalesTransaction::~TNS__CreateSalesTransaction()
{
}

NSTransactions::TNS__CreateSalesTransaction::TNS__CreateSalesTransaction( const NSTransactions::TNS__CreateSalesTransaction& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::TNS__CreateSalesTransaction&  NSTransactions::TNS__CreateSalesTransaction::operator=( const NSTransactions::TNS__CreateSalesTransaction& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::TNS__CreateOpeningStock::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    NSTransactions::__OpeningStock mDocument;
    bool mDocument_nil;
};

NSTransactions::TNS__CreateOpeningStock::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mDocument_nil(true)
{
}


void NSTransactions::TNS__CreateOpeningStock::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSTransactions::TNS__CreateOpeningStock::shopId() const
{
    return d_ptr->mShopId;
}

void NSTransactions::TNS__CreateOpeningStock::setDocument( const NSTransactions::__OpeningStock& document )
{
    d_ptr->mDocument_nil = false;
    d_ptr->mDocument = document;
}

NSTransactions::__OpeningStock NSTransactions::TNS__CreateOpeningStock::document() const
{
    return d_ptr->mDocument;
}

KDSoapValue NSTransactions::TNS__CreateOpeningStock::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateOpeningStock"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mDocument_nil) {
        KDSoapValue _valueDocument(d_ptr->mDocument.serialize(QString::fromLatin1("document")));// converter_complextype.cpp:233
        _valueDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueDocument.setQualified(true);
        _valueDocument.setNillable(true);
        if (!_valueDocument.isNil())
        args.append(_valueDocument);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::TNS__CreateOpeningStock::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("document")) {// converter_complextype.cpp:271
            d_ptr->mDocument.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::TNS__CreateOpeningStock::TNS__CreateOpeningStock()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::TNS__CreateOpeningStock::~TNS__CreateOpeningStock()
{
}

NSTransactions::TNS__CreateOpeningStock::TNS__CreateOpeningStock( const NSTransactions::TNS__CreateOpeningStock& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::TNS__CreateOpeningStock&  NSTransactions::TNS__CreateOpeningStock::operator=( const NSTransactions::TNS__CreateOpeningStock& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__OpeningStockLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mLineNo;
    bool mLineNo_nil;
    QString mLocalProductCode;
    bool mLocalProductCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mProductName;
    bool mProductName_nil;
    float mQuantity;
    bool mQuantity_nil;
};

NSTransactions::__OpeningStockLine::PrivateDPtr::PrivateDPtr()
    : mLineNo(0), mLineNo_nil(true), mLocalProductCode_nil(true), mProductCode_nil(true), mProductGroup(0), mProductGroup_nil(true), mProductName_nil(true), mQuantity(0), mQuantity_nil(true)
{
}


void NSTransactions::__OpeningStockLine::setLineNo( int lineNo )
{
    d_ptr->mLineNo_nil = false;
    d_ptr->mLineNo = lineNo;
}

int NSTransactions::__OpeningStockLine::lineNo() const
{
    return d_ptr->mLineNo;
}

void NSTransactions::__OpeningStockLine::setLocalProductCode( const QString& localProductCode )
{
    d_ptr->mLocalProductCode_nil = false;
    d_ptr->mLocalProductCode = localProductCode;
}

QString NSTransactions::__OpeningStockLine::localProductCode() const
{
    return d_ptr->mLocalProductCode;
}

void NSTransactions::__OpeningStockLine::setProductCode( const QString& productCode )
{
    d_ptr->mProductCode_nil = false;
    d_ptr->mProductCode = productCode;
}

QString NSTransactions::__OpeningStockLine::productCode() const
{
    return d_ptr->mProductCode;
}

void NSTransactions::__OpeningStockLine::setProductGroup( int productGroup )
{
    d_ptr->mProductGroup_nil = false;
    d_ptr->mProductGroup = productGroup;
}

int NSTransactions::__OpeningStockLine::productGroup() const
{
    return d_ptr->mProductGroup;
}

void NSTransactions::__OpeningStockLine::setProductName( const QString& productName )
{
    d_ptr->mProductName_nil = false;
    d_ptr->mProductName = productName;
}

QString NSTransactions::__OpeningStockLine::productName() const
{
    return d_ptr->mProductName;
}

void NSTransactions::__OpeningStockLine::setQuantity( float quantity )
{
    d_ptr->mQuantity_nil = false;
    d_ptr->mQuantity = quantity;
}

float NSTransactions::__OpeningStockLine::quantity() const
{
    return d_ptr->mQuantity;
}

KDSoapValue NSTransactions::__OpeningStockLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("OpeningStockLine"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        _valueLineNo.setNillable(true);
        if (!_valueLineNo.isNil())
        args.append(_valueLineNo);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalProductCode_nil) {
        KDSoapValue _valueLocalProductCode(QString::fromLatin1("LocalProductCode"), QVariant::fromValue(d_ptr->mLocalProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalProductCode.setQualified(true);
        _valueLocalProductCode.setNillable(true);
        if (!_valueLocalProductCode.isNil())
        args.append(_valueLocalProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        if (!_valueProductCode.isNil())
        args.append(_valueProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        if (!_valueProductGroup.isNil())
        args.append(_valueProductGroup);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductName_nil) {
        KDSoapValue _valueProductName(QString::fromLatin1("ProductName"), QVariant::fromValue(d_ptr->mProductName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductName.setQualified(true);
        _valueProductName.setNillable(true);
        if (!_valueProductName.isNil())
        args.append(_valueProductName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mQuantity_nil) {
        KDSoapValue _valueQuantity(QString::fromLatin1("Quantity"), QVariant::fromValue(d_ptr->mQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueQuantity.setQualified(true);
        _valueQuantity.setNillable(true);
        if (!_valueQuantity.isNil())
        args.append(_valueQuantity);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__OpeningStockLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("LineNo")) {// converter_complextype.cpp:271
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LocalProductCode")) {// converter_complextype.cpp:271
            d_ptr->mLocalProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductCode")) {// converter_complextype.cpp:271
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:271
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductName")) {// converter_complextype.cpp:271
            d_ptr->mProductName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Quantity")) {// converter_complextype.cpp:271
            d_ptr->mQuantity = val.value().value<float>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__OpeningStockLine::__OpeningStockLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__OpeningStockLine::~__OpeningStockLine()
{
}

NSTransactions::__OpeningStockLine::__OpeningStockLine( const NSTransactions::__OpeningStockLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__OpeningStockLine&  NSTransactions::__OpeningStockLine::operator=( const NSTransactions::__OpeningStockLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::TNS__CreateStockTransactionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::__TransactionResponse mCreateStockTransactionResult;
    bool mCreateStockTransactionResult_nil;
};

NSTransactions::TNS__CreateStockTransactionResponse::PrivateDPtr::PrivateDPtr()
    : mCreateStockTransactionResult_nil(true)
{
}


void NSTransactions::TNS__CreateStockTransactionResponse::setCreateStockTransactionResult( const NSTransactions::__TransactionResponse& createStockTransactionResult )
{
    d_ptr->mCreateStockTransactionResult_nil = false;
    d_ptr->mCreateStockTransactionResult = createStockTransactionResult;
}

NSTransactions::__TransactionResponse NSTransactions::TNS__CreateStockTransactionResponse::createStockTransactionResult() const
{
    return d_ptr->mCreateStockTransactionResult;
}

KDSoapValue NSTransactions::TNS__CreateStockTransactionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateStockTransactionResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCreateStockTransactionResult_nil) {
        KDSoapValue _valueCreateStockTransactionResult(d_ptr->mCreateStockTransactionResult.serialize(QString::fromLatin1("CreateStockTransactionResult")));// converter_complextype.cpp:233
        _valueCreateStockTransactionResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreateStockTransactionResult.setQualified(true);
        _valueCreateStockTransactionResult.setNillable(true);
        if (!_valueCreateStockTransactionResult.isNil())
        args.append(_valueCreateStockTransactionResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::TNS__CreateStockTransactionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CreateStockTransactionResult")) {// converter_complextype.cpp:271
            d_ptr->mCreateStockTransactionResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::TNS__CreateStockTransactionResponse::TNS__CreateStockTransactionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::TNS__CreateStockTransactionResponse::~TNS__CreateStockTransactionResponse()
{
}

NSTransactions::TNS__CreateStockTransactionResponse::TNS__CreateStockTransactionResponse( const NSTransactions::TNS__CreateStockTransactionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::TNS__CreateStockTransactionResponse&  NSTransactions::TNS__CreateStockTransactionResponse::operator=( const NSTransactions::TNS__CreateStockTransactionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__DocumentVatBreakDown::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mNetAmount;
    bool mNetAmount_nil;
    float mVATAmount;
    bool mVATAmount_nil;
    NSTransactions::__VATCode mVATCode;
    bool mVATCode_nil;
};

NSTransactions::__DocumentVatBreakDown::PrivateDPtr::PrivateDPtr()
    : mNetAmount(0), mNetAmount_nil(true), mVATAmount(0), mVATAmount_nil(true), mVATCode_nil(true)
{
}


void NSTransactions::__DocumentVatBreakDown::setNetAmount( float netAmount )
{
    d_ptr->mNetAmount_nil = false;
    d_ptr->mNetAmount = netAmount;
}

float NSTransactions::__DocumentVatBreakDown::netAmount() const
{
    return d_ptr->mNetAmount;
}

void NSTransactions::__DocumentVatBreakDown::setVATAmount( float vATAmount )
{
    d_ptr->mVATAmount_nil = false;
    d_ptr->mVATAmount = vATAmount;
}

float NSTransactions::__DocumentVatBreakDown::vATAmount() const
{
    return d_ptr->mVATAmount;
}

void NSTransactions::__DocumentVatBreakDown::setVATCode( const NSTransactions::__VATCode& vATCode )
{
    d_ptr->mVATCode_nil = false;
    d_ptr->mVATCode = vATCode;
}

NSTransactions::__VATCode NSTransactions::__DocumentVatBreakDown::vATCode() const
{
    return d_ptr->mVATCode;
}

KDSoapValue NSTransactions::__DocumentVatBreakDown::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("DocumentVatBreakDown"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mNetAmount_nil) {
        KDSoapValue _valueNetAmount(QString::fromLatin1("NetAmount"), QVariant::fromValue(d_ptr->mNetAmount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueNetAmount.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetAmount.setQualified(true);
        _valueNetAmount.setNillable(true);
        if (!_valueNetAmount.isNil())
        args.append(_valueNetAmount);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATAmount_nil) {
        KDSoapValue _valueVATAmount(QString::fromLatin1("VATAmount"), QVariant::fromValue(d_ptr->mVATAmount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueVATAmount.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATAmount.setQualified(true);
        _valueVATAmount.setNillable(true);
        if (!_valueVATAmount.isNil())
        args.append(_valueVATAmount);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATCode_nil) {
        KDSoapValue _valueVATCode(QString::fromLatin1("VATCode"), d_ptr->mVATCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));// converter_complextype.cpp:241
        _valueVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATCode.setQualified(true);
        _valueVATCode.setNillable(true);
        if (!_valueVATCode.isNil())
        args.append(_valueVATCode);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__DocumentVatBreakDown::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("NetAmount")) {// converter_complextype.cpp:271
            d_ptr->mNetAmount = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATAmount")) {// converter_complextype.cpp:271
            d_ptr->mVATAmount = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATCode")) {// converter_complextype.cpp:271
            d_ptr->mVATCode.deserialize(val.value());// converter_complextype.cpp:288
        }
    }
}

NSTransactions::__DocumentVatBreakDown::__DocumentVatBreakDown()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__DocumentVatBreakDown::~__DocumentVatBreakDown()
{
}

NSTransactions::__DocumentVatBreakDown::__DocumentVatBreakDown( const NSTransactions::__DocumentVatBreakDown& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__DocumentVatBreakDown&  NSTransactions::__DocumentVatBreakDown::operator=( const NSTransactions::__DocumentVatBreakDown& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfDocumentVatBreakDown::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__DocumentVatBreakDown> mDocumentVatBreakDown;
    bool mDocumentVatBreakDown_nil;
};

NSTransactions::__ArrayOfDocumentVatBreakDown::PrivateDPtr::PrivateDPtr()
    : mDocumentVatBreakDown_nil(true)
{
}


void NSTransactions::__ArrayOfDocumentVatBreakDown::setDocumentVatBreakDown( const QList<NSTransactions::__DocumentVatBreakDown>& documentVatBreakDown )
{
    d_ptr->mDocumentVatBreakDown_nil = false;
    d_ptr->mDocumentVatBreakDown = documentVatBreakDown;
}

QList<NSTransactions::__DocumentVatBreakDown> NSTransactions::__ArrayOfDocumentVatBreakDown::documentVatBreakDown() const
{
    return d_ptr->mDocumentVatBreakDown;
}

KDSoapValue NSTransactions::__ArrayOfDocumentVatBreakDown::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfDocumentVatBreakDown"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mDocumentVatBreakDown.count(); ++i) {
        KDSoapValue _valueDocumentVatBreakDown(d_ptr->mDocumentVatBreakDown.at(i).serialize(QString::fromLatin1("DocumentVatBreakDown")));// converter_complextype.cpp:233
        _valueDocumentVatBreakDown.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDocumentVatBreakDown.setQualified(true);
        _valueDocumentVatBreakDown.setNillable(true);
        args.append(_valueDocumentVatBreakDown);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfDocumentVatBreakDown::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("DocumentVatBreakDown")) {// converter_complextype.cpp:271
            NSTransactions::__DocumentVatBreakDown mDocumentVatBreakDownTemp;
            mDocumentVatBreakDownTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mDocumentVatBreakDown.append(mDocumentVatBreakDownTemp);
        }
    }
}

NSTransactions::__ArrayOfDocumentVatBreakDown::__ArrayOfDocumentVatBreakDown()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfDocumentVatBreakDown::~__ArrayOfDocumentVatBreakDown()
{
}

NSTransactions::__ArrayOfDocumentVatBreakDown::__ArrayOfDocumentVatBreakDown( const NSTransactions::__ArrayOfDocumentVatBreakDown& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfDocumentVatBreakDown&  NSTransactions::__ArrayOfDocumentVatBreakDown::operator=( const NSTransactions::__ArrayOfDocumentVatBreakDown& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__TransactionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::__TransactionCallConfig mCurrentConfig;
    bool mCurrentConfig_nil;
    NSTransactions::__ArrayOfResponseCode mResponseCodes;
    bool mResponseCodes_nil;
};

NSTransactions::__TransactionResponse::PrivateDPtr::PrivateDPtr()
    : mCurrentConfig_nil(true), mResponseCodes_nil(true)
{
}


void NSTransactions::__TransactionResponse::setCurrentConfig( const NSTransactions::__TransactionCallConfig& currentConfig )
{
    d_ptr->mCurrentConfig_nil = false;
    d_ptr->mCurrentConfig = currentConfig;
}

NSTransactions::__TransactionCallConfig NSTransactions::__TransactionResponse::currentConfig() const
{
    return d_ptr->mCurrentConfig;
}

void NSTransactions::__TransactionResponse::setResponseCodes( const NSTransactions::__ArrayOfResponseCode& responseCodes )
{
    d_ptr->mResponseCodes_nil = false;
    d_ptr->mResponseCodes = responseCodes;
}

NSTransactions::__ArrayOfResponseCode NSTransactions::__TransactionResponse::responseCodes() const
{
    return d_ptr->mResponseCodes;
}

KDSoapValue NSTransactions::__TransactionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("TransactionResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCurrentConfig_nil) {
        KDSoapValue _valueCurrentConfig(d_ptr->mCurrentConfig.serialize(QString::fromLatin1("CurrentConfig")));// converter_complextype.cpp:233
        _valueCurrentConfig.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCurrentConfig.setQualified(true);
        _valueCurrentConfig.setNillable(true);
        if (!_valueCurrentConfig.isNil())
        args.append(_valueCurrentConfig);// converter_complextype.cpp:253
    }
    if (!d_ptr->mResponseCodes_nil) {
        KDSoapValue _valueResponseCodes(d_ptr->mResponseCodes.serialize(QString::fromLatin1("ResponseCodes")));// converter_complextype.cpp:233
        _valueResponseCodes.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueResponseCodes.setQualified(true);
        _valueResponseCodes.setNillable(true);
        if (!_valueResponseCodes.isNil())
        args.append(_valueResponseCodes);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__TransactionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CurrentConfig")) {// converter_complextype.cpp:271
            d_ptr->mCurrentConfig.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("ResponseCodes")) {// converter_complextype.cpp:271
            d_ptr->mResponseCodes.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::__TransactionResponse::__TransactionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__TransactionResponse::~__TransactionResponse()
{
}

NSTransactions::__TransactionResponse::__TransactionResponse( const NSTransactions::__TransactionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__TransactionResponse&  NSTransactions::__TransactionResponse::operator=( const NSTransactions::__TransactionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfOpeningStockLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__OpeningStockLine> mOpeningStockLine;
    bool mOpeningStockLine_nil;
};

NSTransactions::__ArrayOfOpeningStockLine::PrivateDPtr::PrivateDPtr()
    : mOpeningStockLine_nil(true)
{
}


void NSTransactions::__ArrayOfOpeningStockLine::setOpeningStockLine( const QList<NSTransactions::__OpeningStockLine>& openingStockLine )
{
    d_ptr->mOpeningStockLine_nil = false;
    d_ptr->mOpeningStockLine = openingStockLine;
}

QList<NSTransactions::__OpeningStockLine> NSTransactions::__ArrayOfOpeningStockLine::openingStockLine() const
{
    return d_ptr->mOpeningStockLine;
}

KDSoapValue NSTransactions::__ArrayOfOpeningStockLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfOpeningStockLine"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mOpeningStockLine.count(); ++i) {
        KDSoapValue _valueOpeningStockLine(d_ptr->mOpeningStockLine.at(i).serialize(QString::fromLatin1("OpeningStockLine")));// converter_complextype.cpp:233
        _valueOpeningStockLine.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueOpeningStockLine.setQualified(true);
        _valueOpeningStockLine.setNillable(true);
        args.append(_valueOpeningStockLine);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfOpeningStockLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("OpeningStockLine")) {// converter_complextype.cpp:271
            NSTransactions::__OpeningStockLine mOpeningStockLineTemp;
            mOpeningStockLineTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mOpeningStockLine.append(mOpeningStockLineTemp);
        }
    }
}

NSTransactions::__ArrayOfOpeningStockLine::__ArrayOfOpeningStockLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfOpeningStockLine::~__ArrayOfOpeningStockLine()
{
}

NSTransactions::__ArrayOfOpeningStockLine::__ArrayOfOpeningStockLine( const NSTransactions::__ArrayOfOpeningStockLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfOpeningStockLine&  NSTransactions::__ArrayOfOpeningStockLine::operator=( const NSTransactions::__ArrayOfOpeningStockLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__SalesDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCashRegId;
    bool mCashRegId_nil;
    QString mComment;
    bool mComment_nil;
    KDDateTime mCreatedAt;
    bool mCreatedAt_nil;
    KDDateTime mDocumentDate;
    bool mDocumentDate_nil;
    KDDateTime mDueDate;
    bool mDueDate_nil;
    float mGross;
    bool mGross_nil;
    KDDateTime mIssuedOnDate;
    bool mIssuedOnDate_nil;
    NSTransactions::__ArrayOfSalesDocumentLine mLines;
    bool mLines_nil;
    QString mLocalDocumentId;
    bool mLocalDocumentId_nil;
    NSTransactions::__MovementType mMovementType;
    bool mMovementType_nil;
    NSTransactions::__Partner mPartner;
    bool mPartner_nil;
    QString mReference;
    bool mReference_nil;
    QString mShopId;
    bool mShopId_nil;
    QString mStornoReference;
    bool mStornoReference_nil;
    float mVAT;
    bool mVAT_nil;
    NSTransactions::__ArrayOfDocumentVatBreakDown mVATBreakDown;
    bool mVATBreakDown_nil;
};

NSTransactions::__SalesDocument::PrivateDPtr::PrivateDPtr()
    : mCashRegId_nil(true), mComment_nil(true), mCreatedAt_nil(true), mDocumentDate_nil(true), mDueDate_nil(true), mGross(0), mGross_nil(true), mIssuedOnDate_nil(true), mLines_nil(true), mLocalDocumentId_nil(true), mMovementType_nil(true), mPartner_nil(true), mReference_nil(true), mShopId_nil(true), mStornoReference_nil(true), mVAT(0), mVAT_nil(true), mVATBreakDown_nil(true)
{
}


void NSTransactions::__SalesDocument::setCashRegId( const QString& cashRegId )
{
    d_ptr->mCashRegId_nil = false;
    d_ptr->mCashRegId = cashRegId;
}

QString NSTransactions::__SalesDocument::cashRegId() const
{
    return d_ptr->mCashRegId;
}

void NSTransactions::__SalesDocument::setComment( const QString& comment )
{
    d_ptr->mComment_nil = false;
    d_ptr->mComment = comment;
}

QString NSTransactions::__SalesDocument::comment() const
{
    return d_ptr->mComment;
}

void NSTransactions::__SalesDocument::setCreatedAt( const KDDateTime& createdAt )
{
    d_ptr->mCreatedAt_nil = false;
    d_ptr->mCreatedAt = createdAt;
}

KDDateTime NSTransactions::__SalesDocument::createdAt() const
{
    return d_ptr->mCreatedAt;
}

void NSTransactions::__SalesDocument::setDocumentDate( const KDDateTime& documentDate )
{
    d_ptr->mDocumentDate_nil = false;
    d_ptr->mDocumentDate = documentDate;
}

KDDateTime NSTransactions::__SalesDocument::documentDate() const
{
    return d_ptr->mDocumentDate;
}

void NSTransactions::__SalesDocument::setDueDate( const KDDateTime& dueDate )
{
    d_ptr->mDueDate_nil = false;
    d_ptr->mDueDate = dueDate;
}

KDDateTime NSTransactions::__SalesDocument::dueDate() const
{
    return d_ptr->mDueDate;
}

void NSTransactions::__SalesDocument::setGross( float gross )
{
    d_ptr->mGross_nil = false;
    d_ptr->mGross = gross;
}

float NSTransactions::__SalesDocument::gross() const
{
    return d_ptr->mGross;
}

void NSTransactions::__SalesDocument::setIssuedOnDate( const KDDateTime& issuedOnDate )
{
    d_ptr->mIssuedOnDate_nil = false;
    d_ptr->mIssuedOnDate = issuedOnDate;
}

KDDateTime NSTransactions::__SalesDocument::issuedOnDate() const
{
    return d_ptr->mIssuedOnDate;
}

void NSTransactions::__SalesDocument::setLines( const NSTransactions::__ArrayOfSalesDocumentLine& lines )
{
    d_ptr->mLines_nil = false;
    d_ptr->mLines = lines;
}

NSTransactions::__ArrayOfSalesDocumentLine NSTransactions::__SalesDocument::lines() const
{
    return d_ptr->mLines;
}

void NSTransactions::__SalesDocument::setLocalDocumentId( const QString& localDocumentId )
{
    d_ptr->mLocalDocumentId_nil = false;
    d_ptr->mLocalDocumentId = localDocumentId;
}

QString NSTransactions::__SalesDocument::localDocumentId() const
{
    return d_ptr->mLocalDocumentId;
}

void NSTransactions::__SalesDocument::setMovementType( const NSTransactions::__MovementType& movementType )
{
    d_ptr->mMovementType_nil = false;
    d_ptr->mMovementType = movementType;
}

NSTransactions::__MovementType NSTransactions::__SalesDocument::movementType() const
{
    return d_ptr->mMovementType;
}

void NSTransactions::__SalesDocument::setPartner( const NSTransactions::__Partner& partner )
{
    d_ptr->mPartner_nil = false;
    d_ptr->mPartner = partner;
}

NSTransactions::__Partner NSTransactions::__SalesDocument::partner() const
{
    return d_ptr->mPartner;
}

void NSTransactions::__SalesDocument::setReference( const QString& reference )
{
    d_ptr->mReference_nil = false;
    d_ptr->mReference = reference;
}

QString NSTransactions::__SalesDocument::reference() const
{
    return d_ptr->mReference;
}

void NSTransactions::__SalesDocument::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSTransactions::__SalesDocument::shopId() const
{
    return d_ptr->mShopId;
}

void NSTransactions::__SalesDocument::setStornoReference( const QString& stornoReference )
{
    d_ptr->mStornoReference_nil = false;
    d_ptr->mStornoReference = stornoReference;
}

QString NSTransactions::__SalesDocument::stornoReference() const
{
    return d_ptr->mStornoReference;
}

void NSTransactions::__SalesDocument::setVAT( float vAT )
{
    d_ptr->mVAT_nil = false;
    d_ptr->mVAT = vAT;
}

float NSTransactions::__SalesDocument::vAT() const
{
    return d_ptr->mVAT;
}

void NSTransactions::__SalesDocument::setVATBreakDown( const NSTransactions::__ArrayOfDocumentVatBreakDown& vATBreakDown )
{
    d_ptr->mVATBreakDown_nil = false;
    d_ptr->mVATBreakDown = vATBreakDown;
}

NSTransactions::__ArrayOfDocumentVatBreakDown NSTransactions::__SalesDocument::vATBreakDown() const
{
    return d_ptr->mVATBreakDown;
}

KDSoapValue NSTransactions::__SalesDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("SalesDocument"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCashRegId_nil) {
        KDSoapValue _valueCashRegId(QString::fromLatin1("CashRegId"), QVariant::fromValue(d_ptr->mCashRegId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCashRegId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCashRegId.setQualified(true);
        _valueCashRegId.setNillable(true);
        if (!_valueCashRegId.isNil())
        args.append(_valueCashRegId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mComment_nil) {
        KDSoapValue _valueComment(QString::fromLatin1("Comment"), QVariant::fromValue(d_ptr->mComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueComment.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueComment.setQualified(true);
        _valueComment.setNillable(true);
        if (!_valueComment.isNil())
        args.append(_valueComment);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCreatedAt_nil) {
        KDSoapValue _valueCreatedAt(QString::fromLatin1("CreatedAt"), d_ptr->mCreatedAt.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueCreatedAt.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCreatedAt.setQualified(true);
        _valueCreatedAt.setNillable(true);
        if (!_valueCreatedAt.isNil())
        args.append(_valueCreatedAt);// converter_complextype.cpp:253
    }
    if (!d_ptr->mDocumentDate_nil) {
        KDSoapValue _valueDocumentDate(QString::fromLatin1("DocumentDate"), d_ptr->mDocumentDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueDocumentDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDocumentDate.setQualified(true);
        _valueDocumentDate.setNillable(true);
        if (!_valueDocumentDate.isNil())
        args.append(_valueDocumentDate);// converter_complextype.cpp:253
    }
    if (!d_ptr->mDueDate_nil) {
        KDSoapValue _valueDueDate(QString::fromLatin1("DueDate"), d_ptr->mDueDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueDueDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDueDate.setQualified(true);
        _valueDueDate.setNillable(true);
        if (!_valueDueDate.isNil())
        args.append(_valueDueDate);// converter_complextype.cpp:253
    }
    if (!d_ptr->mGross_nil) {
        KDSoapValue _valueGross(QString::fromLatin1("Gross"), QVariant::fromValue(d_ptr->mGross), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueGross.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGross.setQualified(true);
        _valueGross.setNillable(true);
        if (!_valueGross.isNil())
        args.append(_valueGross);// converter_complextype.cpp:253
    }
    if (!d_ptr->mIssuedOnDate_nil) {
        KDSoapValue _valueIssuedOnDate(QString::fromLatin1("IssuedOnDate"), d_ptr->mIssuedOnDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueIssuedOnDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueIssuedOnDate.setQualified(true);
        _valueIssuedOnDate.setNillable(true);
        if (!_valueIssuedOnDate.isNil())
        args.append(_valueIssuedOnDate);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(d_ptr->mLines.serialize(QString::fromLatin1("Lines")));// converter_complextype.cpp:233
        _valueLines.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLines.setQualified(true);
        _valueLines.setNillable(true);
        if (!_valueLines.isNil())
        args.append(_valueLines);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalDocumentId_nil) {
        KDSoapValue _valueLocalDocumentId(QString::fromLatin1("LocalDocumentId"), QVariant::fromValue(d_ptr->mLocalDocumentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalDocumentId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalDocumentId.setQualified(true);
        _valueLocalDocumentId.setNillable(true);
        if (!_valueLocalDocumentId.isNil())
        args.append(_valueLocalDocumentId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mMovementType_nil) {
        KDSoapValue _valueMovementType(QString::fromLatin1("MovementType"), d_ptr->mMovementType.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));// converter_complextype.cpp:241
        _valueMovementType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMovementType.setQualified(true);
        _valueMovementType.setNillable(true);
        if (!_valueMovementType.isNil())
        args.append(_valueMovementType);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPartner_nil) {
        KDSoapValue _valuePartner(d_ptr->mPartner.serialize(QString::fromLatin1("Partner")));// converter_complextype.cpp:233
        _valuePartner.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePartner.setQualified(true);
        _valuePartner.setNillable(true);
        if (!_valuePartner.isNil())
        args.append(_valuePartner);// converter_complextype.cpp:253
    }
    if (!d_ptr->mReference_nil) {
        KDSoapValue _valueReference(QString::fromLatin1("Reference"), QVariant::fromValue(d_ptr->mReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReference.setQualified(true);
        _valueReference.setNillable(true);
        if (!_valueReference.isNil())
        args.append(_valueReference);// converter_complextype.cpp:253
    }
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("ShopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mStornoReference_nil) {
        KDSoapValue _valueStornoReference(QString::fromLatin1("StornoReference"), QVariant::fromValue(d_ptr->mStornoReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueStornoReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStornoReference.setQualified(true);
        _valueStornoReference.setNillable(true);
        if (!_valueStornoReference.isNil())
        args.append(_valueStornoReference);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVAT_nil) {
        KDSoapValue _valueVAT(QString::fromLatin1("VAT"), QVariant::fromValue(d_ptr->mVAT), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueVAT.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVAT.setQualified(true);
        _valueVAT.setNillable(true);
        if (!_valueVAT.isNil())
        args.append(_valueVAT);// converter_complextype.cpp:253
    }
    if (!d_ptr->mVATBreakDown_nil) {
        KDSoapValue _valueVATBreakDown(d_ptr->mVATBreakDown.serialize(QString::fromLatin1("VATBreakDown")));// converter_complextype.cpp:233
        _valueVATBreakDown.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATBreakDown.setQualified(true);
        _valueVATBreakDown.setNillable(true);
        if (!_valueVATBreakDown.isNil())
        args.append(_valueVATBreakDown);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__SalesDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CashRegId")) {// converter_complextype.cpp:271
            d_ptr->mCashRegId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Comment")) {// converter_complextype.cpp:271
            d_ptr->mComment = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("CreatedAt")) {// converter_complextype.cpp:271
            d_ptr->mCreatedAt = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("DocumentDate")) {// converter_complextype.cpp:271
            d_ptr->mDocumentDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("DueDate")) {// converter_complextype.cpp:271
            d_ptr->mDueDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Gross")) {// converter_complextype.cpp:271
            d_ptr->mGross = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("IssuedOnDate")) {// converter_complextype.cpp:271
            d_ptr->mIssuedOnDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Lines")) {// converter_complextype.cpp:271
            d_ptr->mLines.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("LocalDocumentId")) {// converter_complextype.cpp:271
            d_ptr->mLocalDocumentId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("MovementType")) {// converter_complextype.cpp:271
            d_ptr->mMovementType.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("Partner")) {// converter_complextype.cpp:271
            d_ptr->mPartner.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("Reference")) {// converter_complextype.cpp:271
            d_ptr->mReference = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ShopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("StornoReference")) {// converter_complextype.cpp:271
            d_ptr->mStornoReference = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VAT")) {// converter_complextype.cpp:271
            d_ptr->mVAT = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("VATBreakDown")) {// converter_complextype.cpp:271
            d_ptr->mVATBreakDown.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::__SalesDocument::__SalesDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__SalesDocument::~__SalesDocument()
{
}

NSTransactions::__SalesDocument::__SalesDocument( const NSTransactions::__SalesDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__SalesDocument&  NSTransactions::__SalesDocument::operator=( const NSTransactions::__SalesDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::TNS__CreateOpeningStockResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::__TransactionResponse mCreateOpeningStockResult;
    bool mCreateOpeningStockResult_nil;
};

NSTransactions::TNS__CreateOpeningStockResponse::PrivateDPtr::PrivateDPtr()
    : mCreateOpeningStockResult_nil(true)
{
}


void NSTransactions::TNS__CreateOpeningStockResponse::setCreateOpeningStockResult( const NSTransactions::__TransactionResponse& createOpeningStockResult )
{
    d_ptr->mCreateOpeningStockResult_nil = false;
    d_ptr->mCreateOpeningStockResult = createOpeningStockResult;
}

NSTransactions::__TransactionResponse NSTransactions::TNS__CreateOpeningStockResponse::createOpeningStockResult() const
{
    return d_ptr->mCreateOpeningStockResult;
}

KDSoapValue NSTransactions::TNS__CreateOpeningStockResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateOpeningStockResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCreateOpeningStockResult_nil) {
        KDSoapValue _valueCreateOpeningStockResult(d_ptr->mCreateOpeningStockResult.serialize(QString::fromLatin1("CreateOpeningStockResult")));// converter_complextype.cpp:233
        _valueCreateOpeningStockResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreateOpeningStockResult.setQualified(true);
        _valueCreateOpeningStockResult.setNillable(true);
        if (!_valueCreateOpeningStockResult.isNil())
        args.append(_valueCreateOpeningStockResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::TNS__CreateOpeningStockResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CreateOpeningStockResult")) {// converter_complextype.cpp:271
            d_ptr->mCreateOpeningStockResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::TNS__CreateOpeningStockResponse::TNS__CreateOpeningStockResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::TNS__CreateOpeningStockResponse::~TNS__CreateOpeningStockResponse()
{
}

NSTransactions::TNS__CreateOpeningStockResponse::TNS__CreateOpeningStockResponse( const NSTransactions::TNS__CreateOpeningStockResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::TNS__CreateOpeningStockResponse&  NSTransactions::TNS__CreateOpeningStockResponse::operator=( const NSTransactions::TNS__CreateOpeningStockResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfStockDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__StockDocumentLine> mStockDocumentLine;
    bool mStockDocumentLine_nil;
};

NSTransactions::__ArrayOfStockDocumentLine::PrivateDPtr::PrivateDPtr()
    : mStockDocumentLine_nil(true)
{
}


void NSTransactions::__ArrayOfStockDocumentLine::setStockDocumentLine( const QList<NSTransactions::__StockDocumentLine>& stockDocumentLine )
{
    d_ptr->mStockDocumentLine_nil = false;
    d_ptr->mStockDocumentLine = stockDocumentLine;
}

QList<NSTransactions::__StockDocumentLine> NSTransactions::__ArrayOfStockDocumentLine::stockDocumentLine() const
{
    return d_ptr->mStockDocumentLine;
}

KDSoapValue NSTransactions::__ArrayOfStockDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfStockDocumentLine"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mStockDocumentLine.count(); ++i) {
        KDSoapValue _valueStockDocumentLine(d_ptr->mStockDocumentLine.at(i).serialize(QString::fromLatin1("StockDocumentLine")));// converter_complextype.cpp:233
        _valueStockDocumentLine.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStockDocumentLine.setQualified(true);
        _valueStockDocumentLine.setNillable(true);
        args.append(_valueStockDocumentLine);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfStockDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("StockDocumentLine")) {// converter_complextype.cpp:271
            NSTransactions::__StockDocumentLine mStockDocumentLineTemp;
            mStockDocumentLineTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mStockDocumentLine.append(mStockDocumentLineTemp);
        }
    }
}

NSTransactions::__ArrayOfStockDocumentLine::__ArrayOfStockDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfStockDocumentLine::~__ArrayOfStockDocumentLine()
{
}

NSTransactions::__ArrayOfStockDocumentLine::__ArrayOfStockDocumentLine( const NSTransactions::__ArrayOfStockDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfStockDocumentLine&  NSTransactions::__ArrayOfStockDocumentLine::operator=( const NSTransactions::__ArrayOfStockDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__ArrayOfSalesDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSTransactions::__SalesDocumentLine> mSalesDocumentLine;
    bool mSalesDocumentLine_nil;
};

NSTransactions::__ArrayOfSalesDocumentLine::PrivateDPtr::PrivateDPtr()
    : mSalesDocumentLine_nil(true)
{
}


void NSTransactions::__ArrayOfSalesDocumentLine::setSalesDocumentLine( const QList<NSTransactions::__SalesDocumentLine>& salesDocumentLine )
{
    d_ptr->mSalesDocumentLine_nil = false;
    d_ptr->mSalesDocumentLine = salesDocumentLine;
}

QList<NSTransactions::__SalesDocumentLine> NSTransactions::__ArrayOfSalesDocumentLine::salesDocumentLine() const
{
    return d_ptr->mSalesDocumentLine;
}

KDSoapValue NSTransactions::__ArrayOfSalesDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfSalesDocumentLine"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mSalesDocumentLine.count(); ++i) {
        KDSoapValue _valueSalesDocumentLine(d_ptr->mSalesDocumentLine.at(i).serialize(QString::fromLatin1("SalesDocumentLine")));// converter_complextype.cpp:233
        _valueSalesDocumentLine.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueSalesDocumentLine.setQualified(true);
        _valueSalesDocumentLine.setNillable(true);
        args.append(_valueSalesDocumentLine);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__ArrayOfSalesDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("SalesDocumentLine")) {// converter_complextype.cpp:271
            NSTransactions::__SalesDocumentLine mSalesDocumentLineTemp;
            mSalesDocumentLineTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mSalesDocumentLine.append(mSalesDocumentLineTemp);
        }
    }
}

NSTransactions::__ArrayOfSalesDocumentLine::__ArrayOfSalesDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__ArrayOfSalesDocumentLine::~__ArrayOfSalesDocumentLine()
{
}

NSTransactions::__ArrayOfSalesDocumentLine::__ArrayOfSalesDocumentLine( const NSTransactions::__ArrayOfSalesDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__ArrayOfSalesDocumentLine&  NSTransactions::__ArrayOfSalesDocumentLine::operator=( const NSTransactions::__ArrayOfSalesDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::TNS__CreateStockTransaction::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    NSTransactions::__ArrayOfStockDocument mDocuments;
    bool mDocuments_nil;
};

NSTransactions::TNS__CreateStockTransaction::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mDocuments_nil(true)
{
}


void NSTransactions::TNS__CreateStockTransaction::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSTransactions::TNS__CreateStockTransaction::shopId() const
{
    return d_ptr->mShopId;
}

void NSTransactions::TNS__CreateStockTransaction::setDocuments( const NSTransactions::__ArrayOfStockDocument& documents )
{
    d_ptr->mDocuments_nil = false;
    d_ptr->mDocuments = documents;
}

NSTransactions::__ArrayOfStockDocument NSTransactions::TNS__CreateStockTransaction::documents() const
{
    return d_ptr->mDocuments;
}

KDSoapValue NSTransactions::TNS__CreateStockTransaction::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateStockTransaction"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mDocuments_nil) {
        KDSoapValue _valueDocuments(d_ptr->mDocuments.serialize(QString::fromLatin1("documents")));// converter_complextype.cpp:233
        _valueDocuments.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueDocuments.setQualified(true);
        _valueDocuments.setNillable(true);
        if (!_valueDocuments.isNil())
        args.append(_valueDocuments);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::TNS__CreateStockTransaction::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("documents")) {// converter_complextype.cpp:271
            d_ptr->mDocuments.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSTransactions::TNS__CreateStockTransaction::TNS__CreateStockTransaction()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::TNS__CreateStockTransaction::~TNS__CreateStockTransaction()
{
}

NSTransactions::TNS__CreateStockTransaction::TNS__CreateStockTransaction( const NSTransactions::TNS__CreateStockTransaction& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::TNS__CreateStockTransaction&  NSTransactions::TNS__CreateStockTransaction::operator=( const NSTransactions::TNS__CreateStockTransaction& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::__OpeningStock::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mCreatedAt;
    bool mCreatedAt_nil;
    NSTransactions::__ArrayOfOpeningStockLine mLines;
    bool mLines_nil;
    QString mShopId;
    bool mShopId_nil;
};

NSTransactions::__OpeningStock::PrivateDPtr::PrivateDPtr()
    : mCreatedAt_nil(true), mLines_nil(true), mShopId_nil(true)
{
}


void NSTransactions::__OpeningStock::setCreatedAt( const KDDateTime& createdAt )
{
    d_ptr->mCreatedAt_nil = false;
    d_ptr->mCreatedAt = createdAt;
}

KDDateTime NSTransactions::__OpeningStock::createdAt() const
{
    return d_ptr->mCreatedAt;
}

void NSTransactions::__OpeningStock::setLines( const NSTransactions::__ArrayOfOpeningStockLine& lines )
{
    d_ptr->mLines_nil = false;
    d_ptr->mLines = lines;
}

NSTransactions::__ArrayOfOpeningStockLine NSTransactions::__OpeningStock::lines() const
{
    return d_ptr->mLines;
}

void NSTransactions::__OpeningStock::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSTransactions::__OpeningStock::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSTransactions::__OpeningStock::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("OpeningStock"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCreatedAt_nil) {
        KDSoapValue _valueCreatedAt(QString::fromLatin1("CreatedAt"), d_ptr->mCreatedAt.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueCreatedAt.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCreatedAt.setQualified(true);
        _valueCreatedAt.setNillable(true);
        if (!_valueCreatedAt.isNil())
        args.append(_valueCreatedAt);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(d_ptr->mLines.serialize(QString::fromLatin1("Lines")));// converter_complextype.cpp:233
        _valueLines.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLines.setQualified(true);
        _valueLines.setNillable(true);
        if (!_valueLines.isNil())
        args.append(_valueLines);// converter_complextype.cpp:253
    }
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("ShopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSTransactions::__OpeningStock::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("CreatedAt")) {// converter_complextype.cpp:271
            d_ptr->mCreatedAt = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Lines")) {// converter_complextype.cpp:271
            d_ptr->mLines.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("ShopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSTransactions::__OpeningStock::__OpeningStock()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::__OpeningStock::~__OpeningStock()
{
}

NSTransactions::__OpeningStock::__OpeningStock( const NSTransactions::__OpeningStock& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::__OpeningStock&  NSTransactions::__OpeningStock::operator=( const NSTransactions::__OpeningStock& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSTransactions::CreateSalesTransactionJob::CreateSalesTransactionJob( NSTransactions::Transactions* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSTransactions::CreateSalesTransactionJob::setParameters( const NSTransactions::TNS__CreateSalesTransaction& arg0 )
{
    mParameters = arg0;
}

NSTransactions::TNS__CreateSalesTransaction NSTransactions::CreateSalesTransactionJob::parameters() const
{
    return mParameters;
}

void NSTransactions::CreateSalesTransactionJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateSalesTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateSalesTransaction(mParameters.serialize(QString::fromLatin1("CreateSalesTransaction")));// converter_complextype.cpp:233
    _valueCreateSalesTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateSalesTransaction.setQualified(true);
    message = _valueCreateSalesTransaction;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateSalesTransaction"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSTransactions::TNS__CreateSalesTransactionResponse NSTransactions::CreateSalesTransactionJob::resultParameters() const
{
    return mResultParameters;
}

void NSTransactions::CreateSalesTransactionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSTransactions::CreateStockTransactionJob::CreateStockTransactionJob( NSTransactions::Transactions* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSTransactions::CreateStockTransactionJob::setParameters( const NSTransactions::TNS__CreateStockTransaction& arg0 )
{
    mParameters = arg0;
}

NSTransactions::TNS__CreateStockTransaction NSTransactions::CreateStockTransactionJob::parameters() const
{
    return mParameters;
}

void NSTransactions::CreateStockTransactionJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateStockTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStockTransaction(mParameters.serialize(QString::fromLatin1("CreateStockTransaction")));// converter_complextype.cpp:233
    _valueCreateStockTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateStockTransaction.setQualified(true);
    message = _valueCreateStockTransaction;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateStockTransaction"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSTransactions::TNS__CreateStockTransactionResponse NSTransactions::CreateStockTransactionJob::resultParameters() const
{
    return mResultParameters;
}

void NSTransactions::CreateStockTransactionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSTransactions::CreateOpeningStockJob::CreateOpeningStockJob( NSTransactions::Transactions* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSTransactions::CreateOpeningStockJob::setParameters( const NSTransactions::TNS__CreateOpeningStock& arg0 )
{
    mParameters = arg0;
}

NSTransactions::TNS__CreateOpeningStock NSTransactions::CreateOpeningStockJob::parameters() const
{
    return mParameters;
}

void NSTransactions::CreateOpeningStockJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateOpeningStock(mParameters.serialize(QString::fromLatin1("CreateOpeningStock")));// converter_complextype.cpp:233
    _valueCreateOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateOpeningStock.setQualified(true);
    message = _valueCreateOpeningStock;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateOpeningStock"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSTransactions::TNS__CreateOpeningStockResponse NSTransactions::CreateOpeningStockJob::resultParameters() const
{
    return mResultParameters;
}

void NSTransactions::CreateOpeningStockJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


class NSTransactions::Transactions::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

NSTransactions::Transactions::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


NSTransactions::Transactions::Transactions( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

NSTransactions::Transactions::~Transactions()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void NSTransactions::Transactions::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void NSTransactions::Transactions::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void NSTransactions::Transactions::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString NSTransactions::Transactions::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *NSTransactions::Transactions::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://adatkuldes-teszt.nemzetidohany.gov.hu:8444/nd/Transactions.svc");
        const QString messageNamespace = QString::fromLatin1("http://localhost/nd/communication/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *NSTransactions::Transactions::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const Transactions*>( this )->clientInterface() );
}

NSTransactions::TNS__CreateSalesTransactionResponse NSTransactions::Transactions::createSalesTransaction( const NSTransactions::TNS__CreateSalesTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateSalesTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateSalesTransaction(parameters.serialize(QString::fromLatin1("CreateSalesTransaction")));// converter_complextype.cpp:233
    _valueCreateSalesTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateSalesTransaction.setQualified(true);
    message = _valueCreateSalesTransaction;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateSalesTransaction"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSTransactions::TNS__CreateSalesTransactionResponse();
    NSTransactions::TNS__CreateSalesTransactionResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSTransactions::Transactions::asyncCreateSalesTransaction( const NSTransactions::TNS__CreateSalesTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateSalesTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateSalesTransaction(parameters.serialize(QString::fromLatin1("CreateSalesTransaction")));// converter_complextype.cpp:233
    _valueCreateSalesTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateSalesTransaction.setQualified(true);
    message = _valueCreateSalesTransaction;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateSalesTransaction"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateSalesTransactionFinished(KDSoapPendingCallWatcher*)));
}

void NSTransactions::Transactions::_kd_slotCreateSalesTransactionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createSalesTransactionError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createSalesTransaction"), reply);
    } else {
        NSTransactions::TNS__CreateSalesTransactionResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT createSalesTransactionDone( ret );
    }
    watcher->deleteLater();
}

NSTransactions::TNS__CreateStockTransactionResponse NSTransactions::Transactions::createStockTransaction( const NSTransactions::TNS__CreateStockTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateStockTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStockTransaction(parameters.serialize(QString::fromLatin1("CreateStockTransaction")));// converter_complextype.cpp:233
    _valueCreateStockTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateStockTransaction.setQualified(true);
    message = _valueCreateStockTransaction;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateStockTransaction"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSTransactions::TNS__CreateStockTransactionResponse();
    NSTransactions::TNS__CreateStockTransactionResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSTransactions::Transactions::asyncCreateStockTransaction( const NSTransactions::TNS__CreateStockTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateStockTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStockTransaction(parameters.serialize(QString::fromLatin1("CreateStockTransaction")));// converter_complextype.cpp:233
    _valueCreateStockTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateStockTransaction.setQualified(true);
    message = _valueCreateStockTransaction;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateStockTransaction"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateStockTransactionFinished(KDSoapPendingCallWatcher*)));
}

void NSTransactions::Transactions::_kd_slotCreateStockTransactionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createStockTransactionError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createStockTransaction"), reply);
    } else {
        NSTransactions::TNS__CreateStockTransactionResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT createStockTransactionDone( ret );
    }
    watcher->deleteLater();
}

NSTransactions::TNS__CreateOpeningStockResponse NSTransactions::Transactions::createOpeningStock( const NSTransactions::TNS__CreateOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateOpeningStock(parameters.serialize(QString::fromLatin1("CreateOpeningStock")));// converter_complextype.cpp:233
    _valueCreateOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateOpeningStock.setQualified(true);
    message = _valueCreateOpeningStock;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateOpeningStock"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSTransactions::TNS__CreateOpeningStockResponse();
    NSTransactions::TNS__CreateOpeningStockResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSTransactions::Transactions::asyncCreateOpeningStock( const NSTransactions::TNS__CreateOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateOpeningStock(parameters.serialize(QString::fromLatin1("CreateOpeningStock")));// converter_complextype.cpp:233
    _valueCreateOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateOpeningStock.setQualified(true);
    message = _valueCreateOpeningStock;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateOpeningStock"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateOpeningStockFinished(KDSoapPendingCallWatcher*)));
}

void NSTransactions::Transactions::_kd_slotCreateOpeningStockFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createOpeningStockError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("createOpeningStock"), reply);
    } else {
        NSTransactions::TNS__CreateOpeningStockResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT createOpeningStockDone( ret );
    }
    watcher->deleteLater();
}


