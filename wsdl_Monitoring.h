// This file is generated by KDAB's kdwsdl2cpp from Monitoring.svc.
// All changes you do to this file will be lost.
#ifndef WSDL_MONITORING_H
#define WSDL_MONITORING_H

#include <QtCore/QString>
#include <KDSoapClient/KDDateTime.h>
#include <QtCore/QSharedData>
#include <QtCore/QList>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
namespace NSMonitoring {
    class Monitoring;
    class __ArrayOfColumn;
    class __ArrayOfRecord;
    class __ArrayOfTableContent;
    class __Column;
    class __Entity;
    class __MovementType;
    class __Record;
    class __TableContent;
}


namespace NSMonitoring {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __MovementType you can also
        pass the enum directly. Example:
        someMethod(__MovementType::AB).
     */
    class __MovementType
    {
    public:
        enum Type { AB, ABS, BET, BETS, SVISZ, SVISZS, KIT, KITS, LELTT, LELTH, EGYT, EGYJ, ASZLA, ASZLAS, NY, NYS, KSZLA, KSZLAS, VVISZ };

    public:
        __MovementType( const Type &type );
        void setType( Type type );
        NSMonitoring::__MovementType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __MovementType();
        ~__MovementType();

    private:
        Type mType;
};
} // namespace end

namespace NSMonitoring {
    class TNS__GetOpeningStock
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setCreationDate( const KDDateTime& creationDate );
        KDDateTime creationDate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetOpeningStock();
        ~TNS__GetOpeningStock();

    public:
        TNS__GetOpeningStock( const TNS__GetOpeningStock& );
        TNS__GetOpeningStock &operator=( const TNS__GetOpeningStock& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class __ArrayOfRecord
    {
    public:
        void setRecord( const QList<NSMonitoring::__Record>& record );
        QList<NSMonitoring::__Record> record() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfRecord();
        ~__ArrayOfRecord();

    public:
        __ArrayOfRecord( const __ArrayOfRecord& );
        __ArrayOfRecord &operator=( const __ArrayOfRecord& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class __ArrayOfColumn
    {
    public:
        void setColumn( const QList<NSMonitoring::__Column>& column );
        QList<NSMonitoring::__Column> column() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfColumn();
        ~__ArrayOfColumn();

    public:
        __ArrayOfColumn( const __ArrayOfColumn& );
        __ArrayOfColumn &operator=( const __ArrayOfColumn& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class __Column
    {
    public:
        void setName( const QString& name );
        QString name() const;
        void setTypeName( const QString& typeName );
        QString typeName() const;
        void setValue( const KDSoapValue& value );
        KDSoapValue value() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __Column();
        ~__Column();

    public:
        __Column( const __Column& );
        __Column &operator=( const __Column& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class TNS__GetOpeningStockResponse
    {
    public:
        void setGetOpeningStockResult( const NSMonitoring::__Entity& getOpeningStockResult );
        NSMonitoring::__Entity getOpeningStockResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetOpeningStockResponse();
        ~TNS__GetOpeningStockResponse();

    public:
        TNS__GetOpeningStockResponse( const TNS__GetOpeningStockResponse& );
        TNS__GetOpeningStockResponse &operator=( const TNS__GetOpeningStockResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class TNS__Wait
    {
    public:
        void setSec( int sec );
        int sec() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__Wait();
        ~TNS__Wait();

    public:
        TNS__Wait( const TNS__Wait& );
        TNS__Wait &operator=( const TNS__Wait& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class TNS__GetDocument
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setLocalDocumentId( const QString& localDocumentId );
        QString localDocumentId() const;
        void setMovementType( const NSMonitoring::__MovementType& movementType );
        NSMonitoring::__MovementType movementType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetDocument();
        ~TNS__GetDocument();

    public:
        TNS__GetDocument( const TNS__GetDocument& );
        TNS__GetDocument &operator=( const TNS__GetDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class TNS__GetDocumentResponse
    {
    public:
        void setGetDocumentResult( const NSMonitoring::__Entity& getDocumentResult );
        NSMonitoring::__Entity getDocumentResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetDocumentResponse();
        ~TNS__GetDocumentResponse();

    public:
        TNS__GetDocumentResponse( const TNS__GetDocumentResponse& );
        TNS__GetDocumentResponse &operator=( const TNS__GetDocumentResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class __Record
    {
    public:
        void setColumns( const NSMonitoring::__ArrayOfColumn& columns );
        NSMonitoring::__ArrayOfColumn columns() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __Record();
        ~__Record();

    public:
        __Record( const __Record& );
        __Record &operator=( const __Record& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class __Entity
    {
    public:
        void setTables( const NSMonitoring::__ArrayOfTableContent& tables );
        NSMonitoring::__ArrayOfTableContent tables() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __Entity();
        ~__Entity();

    public:
        __Entity( const __Entity& );
        __Entity &operator=( const __Entity& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class TNS__WaitResponse
    {
    public:
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__WaitResponse();
        ~TNS__WaitResponse();

};
} // namespace end

namespace NSMonitoring {
    class __TableContent
    {
    public:
        void setRecords( const NSMonitoring::__ArrayOfRecord& records );
        NSMonitoring::__ArrayOfRecord records() const;
        void setTableName( const QString& tableName );
        QString tableName() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __TableContent();
        ~__TableContent();

    public:
        __TableContent( const __TableContent& );
        __TableContent &operator=( const __TableContent& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class __ArrayOfTableContent
    {
    public:
        void setTableContent( const QList<NSMonitoring::__TableContent>& tableContent );
        QList<NSMonitoring::__TableContent> tableContent() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfTableContent();
        ~__ArrayOfTableContent();

    public:
        __ArrayOfTableContent( const __ArrayOfTableContent& );
        __ArrayOfTableContent &operator=( const __ArrayOfTableContent& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMonitoring {
    class GetDocumentJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetDocumentJob( NSMonitoring::Monitoring* service, QObject* parent = 0 );
        void setParameters( const NSMonitoring::TNS__GetDocument& arg0 );
        NSMonitoring::TNS__GetDocument parameters() const;
        NSMonitoring::TNS__GetDocumentResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMonitoring::Monitoring *mService;
        NSMonitoring::TNS__GetDocument mParameters;
        NSMonitoring::TNS__GetDocumentResponse mResultParameters;
};
} // namespace end

namespace NSMonitoring {
    class GetOpeningStockJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetOpeningStockJob( NSMonitoring::Monitoring* service, QObject* parent = 0 );
        void setParameters( const NSMonitoring::TNS__GetOpeningStock& arg0 );
        NSMonitoring::TNS__GetOpeningStock parameters() const;
        NSMonitoring::TNS__GetOpeningStockResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMonitoring::Monitoring *mService;
        NSMonitoring::TNS__GetOpeningStock mParameters;
        NSMonitoring::TNS__GetOpeningStockResponse mResultParameters;
};
} // namespace end

namespace NSMonitoring {
    class WaitJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        WaitJob( NSMonitoring::Monitoring* service, QObject* parent = 0 );
        void setParameters( const NSMonitoring::TNS__Wait& arg0 );
        NSMonitoring::TNS__Wait parameters() const;
        NSMonitoring::TNS__WaitResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMonitoring::Monitoring *mService;
        NSMonitoring::TNS__Wait mParameters;
        NSMonitoring::TNS__WaitResponse mResultParameters;
};
} // namespace end

namespace NSMonitoring {
    class Monitoring : public QObject
    {
        Q_OBJECT

    public:
        Monitoring( QObject* parent = 0 );
        ~Monitoring();
        /**
            Asks Qt to ignore ssl errors in https requests. Use this for
            testing only!
         */
        void ignoreSslErrors();
        /**
            Overwrite the end point defined in the .wsdl file, with another
            http/https URL.
         */
        void setEndPoint( const QString& endPoint );
        /**
            Overwrite the soap version defined in the .wsdl file, with another
            version.
            version can be KDSoapClientInterface::SOAP1_1 or
            KDSoapClientInterface::SOAP1_2
         */
        void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
        /**
            Return the error from the last blocking call.
            Empty if no error.
         */
        QString lastError() const;
        /**
            Returns the underlying KDSoapClientInterface instance, which allows
            to access setCookieJar, lastResponseHeaders, etc.
         */
        const KDSoapClientInterface *clientInterface() const;
        KDSoapClientInterface *clientInterface();
        /**
            Blocking call to GetDocument.
            Not recommended in a GUI thread.
         */
        NSMonitoring::TNS__GetDocumentResponse getDocument( const NSMonitoring::TNS__GetDocument& parameters );
        /**
            Asynchronous call to GetDocument.
            Remember to connect to getDocumentDone and getDocumentError.
         */
        void asyncGetDocument( const NSMonitoring::TNS__GetDocument& parameters );
        /**
            Blocking call to GetOpeningStock.
            Not recommended in a GUI thread.
         */
        NSMonitoring::TNS__GetOpeningStockResponse getOpeningStock( const NSMonitoring::TNS__GetOpeningStock& parameters );
        /**
            Asynchronous call to GetOpeningStock.
            Remember to connect to getOpeningStockDone and
            getOpeningStockError.
         */
        void asyncGetOpeningStock( const NSMonitoring::TNS__GetOpeningStock& parameters );
        /**
            Blocking call to Wait.
            Not recommended in a GUI thread.
         */
        NSMonitoring::TNS__WaitResponse wait( const NSMonitoring::TNS__Wait& parameters );
        /**
            Asynchronous call to Wait.
            Remember to connect to waitDone and waitError.
         */
        void asyncWait( const NSMonitoring::TNS__Wait& parameters );

    Q_SIGNALS:
        /**
            This signal is emitted whenever a SOAP call failed, for a central
            processing of all SOAP errors.
            method is the name of the method (or operation) that returned the
            fault, for instance "addContact".
         */
        void soapError( const QString& method, const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getDocument()
            succeeded.
         */
        void getDocumentDone( const NSMonitoring::TNS__GetDocumentResponse& parameters );
        /**
            This signal is emitted whenever the call to getDocument() failed.
         */
        void getDocumentError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getOpeningStock()
            succeeded.
         */
        void getOpeningStockDone( const NSMonitoring::TNS__GetOpeningStockResponse& parameters );
        /**
            This signal is emitted whenever the call to getOpeningStock()
            failed.
         */
        void getOpeningStockError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to wait() succeeded.
         */
        void waitDone( const NSMonitoring::TNS__WaitResponse& parameters );
        /**
            This signal is emitted whenever the call to wait() failed.
         */
        void waitError( const KDSoapMessage& fault );

    private Q_SLOTS:
        void _kd_slotGetDocumentFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetOpeningStockFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotWaitFinished( KDSoapPendingCallWatcher* watcher );

    private:
        class PrivateDPtr;
        PrivateDPtr *d_ptr;
};
} // namespace end

#endif
