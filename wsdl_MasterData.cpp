// This file is generated by KDAB's kdwsdl2cpp from MasterData.svc.
// All changes you do to this file will be lost.

#include "wsdl_MasterData.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

NSMasterData::__VATCode::__VATCode( const Type &type )
{
    mType = type;
}

void NSMasterData::__VATCode::setType( Type type )
{
    mType = type;
}

NSMasterData::__VATCode::Type NSMasterData::__VATCode::type() const
{
    return mType;
}

NSMasterData::__VATCode::operator Type() const
{
    return mType;
}

QVariant NSMasterData::__VATCode::serialize() const
{
    switch ( mType ) {
        case NSMasterData::__VATCode::A:
            return QString::fromLatin1("A");
        case NSMasterData::__VATCode::B:
            return QString::fromLatin1("B");
        case NSMasterData::__VATCode::C:
            return QString::fromLatin1("C");
        case NSMasterData::__VATCode::D:
            return QString::fromLatin1("D");
        case NSMasterData::__VATCode::E:
            return QString::fromLatin1("E");
        case NSMasterData::__VATCode::F:
            return QString::fromLatin1("F");
        case NSMasterData::__VATCode::G:
            return QString::fromLatin1("G");
        case NSMasterData::__VATCode::H:
            return QString::fromLatin1("H");
        case NSMasterData::__VATCode::I:
            return QString::fromLatin1("I");
        case NSMasterData::__VATCode::J:
            return QString::fromLatin1("J");
        case NSMasterData::__VATCode::K:
            return QString::fromLatin1("K");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSMasterData::__VATCode::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[11] = {
    { "A", NSMasterData::__VATCode::A },
    { "B", NSMasterData::__VATCode::B },
    { "C", NSMasterData::__VATCode::C },
    { "D", NSMasterData::__VATCode::D },
    { "E", NSMasterData::__VATCode::E },
    { "F", NSMasterData::__VATCode::F },
    { "G", NSMasterData::__VATCode::G },
    { "H", NSMasterData::__VATCode::H },
    { "I", NSMasterData::__VATCode::I },
    { "J", NSMasterData::__VATCode::J },
    { "K", NSMasterData::__VATCode::K }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 11; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__VATCode'.", qPrintable(str) );
}

NSMasterData::__VATCode::__VATCode()
    : mType(Type(0))
{
}

NSMasterData::__VATCode::~__VATCode()
{
}


NSMasterData::__ExciseCategory::__ExciseCategory( const Type &type )
{
    mType = type;
}

void NSMasterData::__ExciseCategory::setType( Type type )
{
    mType = type;
}

NSMasterData::__ExciseCategory::Type NSMasterData::__ExciseCategory::type() const
{
    return mType;
}

NSMasterData::__ExciseCategory::operator Type() const
{
    return mType;
}

QVariant NSMasterData::__ExciseCategory::serialize() const
{
    switch ( mType ) {
        case NSMasterData::__ExciseCategory::Tobacco:
            return QString::fromLatin1("Tobacco");
        case NSMasterData::__ExciseCategory::Alcohol:
            return QString::fromLatin1("Alcohol");
        case NSMasterData::__ExciseCategory::Other:
            return QString::fromLatin1("Other");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSMasterData::__ExciseCategory::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Tobacco", NSMasterData::__ExciseCategory::Tobacco },
    { "Alcohol", NSMasterData::__ExciseCategory::Alcohol },
    { "Other", NSMasterData::__ExciseCategory::Other }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__ExciseCategory'.", qPrintable(str) );
}

NSMasterData::__ExciseCategory::__ExciseCategory()
    : mType(Type(0))
{
}

NSMasterData::__ExciseCategory::~__ExciseCategory()
{
}


NSMasterData::__ReasonCode_ReasonCodeEnum::__ReasonCode_ReasonCodeEnum( const Type &type )
{
    mType = type;
}

void NSMasterData::__ReasonCode_ReasonCodeEnum::setType( Type type )
{
    mType = type;
}

NSMasterData::__ReasonCode_ReasonCodeEnum::Type NSMasterData::__ReasonCode_ReasonCodeEnum::type() const
{
    return mType;
}

NSMasterData::__ReasonCode_ReasonCodeEnum::operator Type() const
{
    return mType;
}

QVariant NSMasterData::__ReasonCode_ReasonCodeEnum::serialize() const
{
    switch ( mType ) {
        case NSMasterData::__ReasonCode_ReasonCodeEnum::Scrapping:
            return QString::fromLatin1("Scrapping");
        case NSMasterData::__ReasonCode_ReasonCodeEnum::Usage:
            return QString::fromLatin1("Usage");
        case NSMasterData::__ReasonCode_ReasonCodeEnum::OtherLoss:
            return QString::fromLatin1("OtherLoss");
        case NSMasterData::__ReasonCode_ReasonCodeEnum::InventoryCorrection:
            return QString::fromLatin1("InventoryCorrection");
        case NSMasterData::__ReasonCode_ReasonCodeEnum::OtherGain:
            return QString::fromLatin1("OtherGain");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSMasterData::__ReasonCode_ReasonCodeEnum::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Scrapping", NSMasterData::__ReasonCode_ReasonCodeEnum::Scrapping },
    { "Usage", NSMasterData::__ReasonCode_ReasonCodeEnum::Usage },
    { "OtherLoss", NSMasterData::__ReasonCode_ReasonCodeEnum::OtherLoss },
    { "InventoryCorrection", NSMasterData::__ReasonCode_ReasonCodeEnum::InventoryCorrection },
    { "OtherGain", NSMasterData::__ReasonCode_ReasonCodeEnum::OtherGain }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__ReasonCode_ReasonCodeEnum'.", qPrintable(str) );
}

NSMasterData::__ReasonCode_ReasonCodeEnum::__ReasonCode_ReasonCodeEnum()
    : mType(Type(0))
{
}

NSMasterData::__ReasonCode_ReasonCodeEnum::~__ReasonCode_ReasonCodeEnum()
{
}


NSMasterData::__MovementType::__MovementType( const Type &type )
{
    mType = type;
}

void NSMasterData::__MovementType::setType( Type type )
{
    mType = type;
}

NSMasterData::__MovementType::Type NSMasterData::__MovementType::type() const
{
    return mType;
}

NSMasterData::__MovementType::operator Type() const
{
    return mType;
}

QVariant NSMasterData::__MovementType::serialize() const
{
    switch ( mType ) {
        case NSMasterData::__MovementType::AB:
            return QString::fromLatin1("AB");
        case NSMasterData::__MovementType::ABS:
            return QString::fromLatin1("ABS");
        case NSMasterData::__MovementType::BET:
            return QString::fromLatin1("BET");
        case NSMasterData::__MovementType::BETS:
            return QString::fromLatin1("BETS");
        case NSMasterData::__MovementType::SVISZ:
            return QString::fromLatin1("SVISZ");
        case NSMasterData::__MovementType::SVISZS:
            return QString::fromLatin1("SVISZS");
        case NSMasterData::__MovementType::KIT:
            return QString::fromLatin1("KIT");
        case NSMasterData::__MovementType::KITS:
            return QString::fromLatin1("KITS");
        case NSMasterData::__MovementType::LELTT:
            return QString::fromLatin1("LELTT");
        case NSMasterData::__MovementType::LELTH:
            return QString::fromLatin1("LELTH");
        case NSMasterData::__MovementType::EGYT:
            return QString::fromLatin1("EGYT");
        case NSMasterData::__MovementType::EGYJ:
            return QString::fromLatin1("EGYJ");
        case NSMasterData::__MovementType::ASZLA:
            return QString::fromLatin1("ASZLA");
        case NSMasterData::__MovementType::ASZLAS:
            return QString::fromLatin1("ASZLAS");
        case NSMasterData::__MovementType::NY:
            return QString::fromLatin1("NY");
        case NSMasterData::__MovementType::NYS:
            return QString::fromLatin1("NYS");
        case NSMasterData::__MovementType::KSZLA:
            return QString::fromLatin1("KSZLA");
        case NSMasterData::__MovementType::KSZLAS:
            return QString::fromLatin1("KSZLAS");
        case NSMasterData::__MovementType::VVISZ:
            return QString::fromLatin1("VVISZ");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSMasterData::__MovementType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AB", NSMasterData::__MovementType::AB },
    { "ABS", NSMasterData::__MovementType::ABS },
    { "BET", NSMasterData::__MovementType::BET },
    { "BETS", NSMasterData::__MovementType::BETS },
    { "SVISZ", NSMasterData::__MovementType::SVISZ },
    { "SVISZS", NSMasterData::__MovementType::SVISZS },
    { "KIT", NSMasterData::__MovementType::KIT },
    { "KITS", NSMasterData::__MovementType::KITS },
    { "LELTT", NSMasterData::__MovementType::LELTT },
    { "LELTH", NSMasterData::__MovementType::LELTH },
    { "EGYT", NSMasterData::__MovementType::EGYT },
    { "EGYJ", NSMasterData::__MovementType::EGYJ },
    { "ASZLA", NSMasterData::__MovementType::ASZLA },
    { "ASZLAS", NSMasterData::__MovementType::ASZLAS },
    { "NY", NSMasterData::__MovementType::NY },
    { "NYS", NSMasterData::__MovementType::NYS },
    { "KSZLA", NSMasterData::__MovementType::KSZLA },
    { "KSZLAS", NSMasterData::__MovementType::KSZLAS },
    { "VVISZ", NSMasterData::__MovementType::VVISZ }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__MovementType'.", qPrintable(str) );
}

NSMasterData::__MovementType::__MovementType()
    : mType(Type(0))
{
}

NSMasterData::__MovementType::~__MovementType()
{
}


NSMasterData::__VATType::__VATType( const Type &type )
{
    mType = type;
}

void NSMasterData::__VATType::setType( Type type )
{
    mType = type;
}

NSMasterData::__VATType::Type NSMasterData::__VATType::type() const
{
    return mType;
}

NSMasterData::__VATType::operator Type() const
{
    return mType;
}

QVariant NSMasterData::__VATType::serialize() const
{
    switch ( mType ) {
        case NSMasterData::__VATType::SALES:
            return QString::fromLatin1("SALES");
        case NSMasterData::__VATType::PURCHASE:
            return QString::fromLatin1("PURCHASE");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSMasterData::__VATType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "SALES", NSMasterData::__VATType::SALES },
    { "PURCHASE", NSMasterData::__VATType::PURCHASE }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__VATType'.", qPrintable(str) );
}

NSMasterData::__VATType::__VATType()
    : mType(Type(0))
{
}

NSMasterData::__VATType::~__VATType()
{
}


class NSMasterData::TNS__GetProductGroupsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfProductGroup mGetProductGroupsResult;
    bool mGetProductGroupsResult_nil;
};

NSMasterData::TNS__GetProductGroupsResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductGroupsResult_nil(true)
{
}


void NSMasterData::TNS__GetProductGroupsResponse::setGetProductGroupsResult( const NSMasterData::__ArrayOfProductGroup& getProductGroupsResult )
{
    d_ptr->mGetProductGroupsResult_nil = false;
    d_ptr->mGetProductGroupsResult = getProductGroupsResult;
}

NSMasterData::__ArrayOfProductGroup NSMasterData::TNS__GetProductGroupsResponse::getProductGroupsResult() const
{
    return d_ptr->mGetProductGroupsResult;
}

KDSoapValue NSMasterData::TNS__GetProductGroupsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductGroupsResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetProductGroupsResult_nil) {
        KDSoapValue _valueGetProductGroupsResult(d_ptr->mGetProductGroupsResult.serialize(QString::fromLatin1("GetProductGroupsResult")));// converter_complextype.cpp:233
        _valueGetProductGroupsResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductGroupsResult.setQualified(true);
        _valueGetProductGroupsResult.setNillable(true);
        if (!_valueGetProductGroupsResult.isNil())
        args.append(_valueGetProductGroupsResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductGroupsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetProductGroupsResult")) {// converter_complextype.cpp:271
            d_ptr->mGetProductGroupsResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetProductGroupsResponse::TNS__GetProductGroupsResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductGroupsResponse::~TNS__GetProductGroupsResponse()
{
}

NSMasterData::TNS__GetProductGroupsResponse::TNS__GetProductGroupsResponse( const NSMasterData::TNS__GetProductGroupsResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductGroupsResponse&  NSMasterData::TNS__GetProductGroupsResponse::operator=( const NSMasterData::TNS__GetProductGroupsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ProductGroup::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mCode;
    bool mCode_nil;
    bool mIsFixedPrice;
    bool mIsFixedPrice_nil;
    QString mName;
    bool mName_nil;
};

NSMasterData::__ProductGroup::PrivateDPtr::PrivateDPtr()
    : mCode(0), mCode_nil(true), mIsFixedPrice(false), mIsFixedPrice_nil(true), mName_nil(true)
{
}


void NSMasterData::__ProductGroup::setCode( int code )
{
    d_ptr->mCode_nil = false;
    d_ptr->mCode = code;
}

int NSMasterData::__ProductGroup::code() const
{
    return d_ptr->mCode;
}

void NSMasterData::__ProductGroup::setIsFixedPrice( bool isFixedPrice )
{
    d_ptr->mIsFixedPrice_nil = false;
    d_ptr->mIsFixedPrice = isFixedPrice;
}

bool NSMasterData::__ProductGroup::isFixedPrice() const
{
    return d_ptr->mIsFixedPrice;
}

void NSMasterData::__ProductGroup::setName( const QString& name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = name;
}

QString NSMasterData::__ProductGroup::name() const
{
    return d_ptr->mName;
}

KDSoapValue NSMasterData::__ProductGroup::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ProductGroup"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        if (!_valueCode.isNil())
        args.append(_valueCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mIsFixedPrice_nil) {
        KDSoapValue _valueIsFixedPrice(QString::fromLatin1("IsFixedPrice"), QVariant::fromValue(d_ptr->mIsFixedPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// converter_complextype.cpp:239
        _valueIsFixedPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueIsFixedPrice.setQualified(true);
        if (!_valueIsFixedPrice.isNil())
        args.append(_valueIsFixedPrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ProductGroup::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Code")) {// converter_complextype.cpp:271
            d_ptr->mCode = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("IsFixedPrice")) {// converter_complextype.cpp:271
            d_ptr->mIsFixedPrice = val.value().value<bool>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Name")) {// converter_complextype.cpp:271
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::__ProductGroup::__ProductGroup()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ProductGroup::~__ProductGroup()
{
}

NSMasterData::__ProductGroup::__ProductGroup( const NSMasterData::__ProductGroup& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ProductGroup&  NSMasterData::__ProductGroup::operator=( const NSMasterData::__ProductGroup& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductPricesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfProductPrice mGetProductPricesResult;
    bool mGetProductPricesResult_nil;
};

NSMasterData::TNS__GetProductPricesResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductPricesResult_nil(true)
{
}


void NSMasterData::TNS__GetProductPricesResponse::setGetProductPricesResult( const NSMasterData::__ArrayOfProductPrice& getProductPricesResult )
{
    d_ptr->mGetProductPricesResult_nil = false;
    d_ptr->mGetProductPricesResult = getProductPricesResult;
}

NSMasterData::__ArrayOfProductPrice NSMasterData::TNS__GetProductPricesResponse::getProductPricesResult() const
{
    return d_ptr->mGetProductPricesResult;
}

KDSoapValue NSMasterData::TNS__GetProductPricesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPricesResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetProductPricesResult_nil) {
        KDSoapValue _valueGetProductPricesResult(d_ptr->mGetProductPricesResult.serialize(QString::fromLatin1("GetProductPricesResult")));// converter_complextype.cpp:233
        _valueGetProductPricesResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductPricesResult.setQualified(true);
        _valueGetProductPricesResult.setNillable(true);
        if (!_valueGetProductPricesResult.isNil())
        args.append(_valueGetProductPricesResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductPricesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetProductPricesResult")) {// converter_complextype.cpp:271
            d_ptr->mGetProductPricesResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetProductPricesResponse::TNS__GetProductPricesResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductPricesResponse::~TNS__GetProductPricesResponse()
{
}

NSMasterData::TNS__GetProductPricesResponse::TNS__GetProductPricesResponse( const NSMasterData::TNS__GetProductPricesResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductPricesResponse&  NSMasterData::TNS__GetProductPricesResponse::operator=( const NSMasterData::TNS__GetProductPricesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductPricesOf::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    QString mProductCode;
    bool mProductCode_nil;
};

NSMasterData::TNS__GetProductPricesOf::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mProductCode_nil(true)
{
}


void NSMasterData::TNS__GetProductPricesOf::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetProductPricesOf::shopId() const
{
    return d_ptr->mShopId;
}

void NSMasterData::TNS__GetProductPricesOf::setProductCode( const QString& productCode )
{
    d_ptr->mProductCode_nil = false;
    d_ptr->mProductCode = productCode;
}

QString NSMasterData::TNS__GetProductPricesOf::productCode() const
{
    return d_ptr->mProductCode;
}

KDSoapValue NSMasterData::TNS__GetProductPricesOf::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPricesOf"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode(QString::fromLatin1("productCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        if (!_valueProductCode.isNil())
        args.append(_valueProductCode);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductPricesOf::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("productCode")) {// converter_complextype.cpp:271
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetProductPricesOf::TNS__GetProductPricesOf()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductPricesOf::~TNS__GetProductPricesOf()
{
}

NSMasterData::TNS__GetProductPricesOf::TNS__GetProductPricesOf( const NSMasterData::TNS__GetProductPricesOf& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductPricesOf&  NSMasterData::TNS__GetProductPricesOf::operator=( const NSMasterData::TNS__GetProductPricesOf& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__Product::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mBaseBarCode;
    bool mBaseBarCode_nil;
    QString mBaseUnitOfMeasure;
    bool mBaseUnitOfMeasure_nil;
    NSMasterData::__VATCode mCashRegisterVATCode;
    bool mCashRegisterVATCode_nil;
    QString mCode;
    bool mCode_nil;
    QString mCustCommCode;
    bool mCustCommCode_nil;
    NSMasterData::__ExciseCategory mExciseCategory;
    bool mExciseCategory_nil;
    KDDateTime mLastModifiedOn;
    bool mLastModifiedOn_nil;
    int mManufacturerCode;
    bool mManufacturerCode_nil;
    QString mName;
    bool mName_nil;
    float mPackagingQuantity;
    bool mPackagingQuantity_nil;
    QString mPackagingUnitOfMeasure;
    bool mPackagingUnitOfMeasure_nil;
    NSMasterData::__ArrayOfProductPackagingUnit mPackagingUnits;
    bool mPackagingUnits_nil;
    NSMasterData::__ArrayOfProductPrice mPrices;
    bool mPrices_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mShortName;
    bool mShortName_nil;
    KDDateTime mValidTo;
    bool mValidTo_nil;
};

NSMasterData::__Product::PrivateDPtr::PrivateDPtr()
    : mBaseBarCode_nil(true), mBaseUnitOfMeasure_nil(true), mCashRegisterVATCode_nil(true), mCode_nil(true), mCustCommCode_nil(true), mExciseCategory_nil(true), mLastModifiedOn_nil(true), mManufacturerCode(0), mManufacturerCode_nil(true), mName_nil(true), mPackagingQuantity(0), mPackagingQuantity_nil(true), mPackagingUnitOfMeasure_nil(true), mPackagingUnits_nil(true), mPrices_nil(true), mProductGroup(0), mProductGroup_nil(true), mShortName_nil(true), mValidTo_nil(true)
{
}


void NSMasterData::__Product::setBaseBarCode( const QString& baseBarCode )
{
    d_ptr->mBaseBarCode_nil = false;
    d_ptr->mBaseBarCode = baseBarCode;
}

QString NSMasterData::__Product::baseBarCode() const
{
    return d_ptr->mBaseBarCode;
}

void NSMasterData::__Product::setBaseUnitOfMeasure( const QString& baseUnitOfMeasure )
{
    d_ptr->mBaseUnitOfMeasure_nil = false;
    d_ptr->mBaseUnitOfMeasure = baseUnitOfMeasure;
}

QString NSMasterData::__Product::baseUnitOfMeasure() const
{
    return d_ptr->mBaseUnitOfMeasure;
}

void NSMasterData::__Product::setCashRegisterVATCode( const NSMasterData::__VATCode& cashRegisterVATCode )
{
    d_ptr->mCashRegisterVATCode_nil = false;
    d_ptr->mCashRegisterVATCode = cashRegisterVATCode;
}

NSMasterData::__VATCode NSMasterData::__Product::cashRegisterVATCode() const
{
    return d_ptr->mCashRegisterVATCode;
}

void NSMasterData::__Product::setCode( const QString& code )
{
    d_ptr->mCode_nil = false;
    d_ptr->mCode = code;
}

QString NSMasterData::__Product::code() const
{
    return d_ptr->mCode;
}

void NSMasterData::__Product::setCustCommCode( const QString& custCommCode )
{
    d_ptr->mCustCommCode_nil = false;
    d_ptr->mCustCommCode = custCommCode;
}

QString NSMasterData::__Product::custCommCode() const
{
    return d_ptr->mCustCommCode;
}

void NSMasterData::__Product::setExciseCategory( const NSMasterData::__ExciseCategory& exciseCategory )
{
    d_ptr->mExciseCategory_nil = false;
    d_ptr->mExciseCategory = exciseCategory;
}

NSMasterData::__ExciseCategory NSMasterData::__Product::exciseCategory() const
{
    return d_ptr->mExciseCategory;
}

void NSMasterData::__Product::setLastModifiedOn( const KDDateTime& lastModifiedOn )
{
    d_ptr->mLastModifiedOn_nil = false;
    d_ptr->mLastModifiedOn = lastModifiedOn;
}

KDDateTime NSMasterData::__Product::lastModifiedOn() const
{
    return d_ptr->mLastModifiedOn;
}

void NSMasterData::__Product::setManufacturerCode( int manufacturerCode )
{
    d_ptr->mManufacturerCode_nil = false;
    d_ptr->mManufacturerCode = manufacturerCode;
}

int NSMasterData::__Product::manufacturerCode() const
{
    return d_ptr->mManufacturerCode;
}

void NSMasterData::__Product::setName( const QString& name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = name;
}

QString NSMasterData::__Product::name() const
{
    return d_ptr->mName;
}

void NSMasterData::__Product::setPackagingQuantity( float packagingQuantity )
{
    d_ptr->mPackagingQuantity_nil = false;
    d_ptr->mPackagingQuantity = packagingQuantity;
}

float NSMasterData::__Product::packagingQuantity() const
{
    return d_ptr->mPackagingQuantity;
}

void NSMasterData::__Product::setPackagingUnitOfMeasure( const QString& packagingUnitOfMeasure )
{
    d_ptr->mPackagingUnitOfMeasure_nil = false;
    d_ptr->mPackagingUnitOfMeasure = packagingUnitOfMeasure;
}

QString NSMasterData::__Product::packagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure;
}

void NSMasterData::__Product::setPackagingUnits( const NSMasterData::__ArrayOfProductPackagingUnit& packagingUnits )
{
    d_ptr->mPackagingUnits_nil = false;
    d_ptr->mPackagingUnits = packagingUnits;
}

NSMasterData::__ArrayOfProductPackagingUnit NSMasterData::__Product::packagingUnits() const
{
    return d_ptr->mPackagingUnits;
}

void NSMasterData::__Product::setPrices( const NSMasterData::__ArrayOfProductPrice& prices )
{
    d_ptr->mPrices_nil = false;
    d_ptr->mPrices = prices;
}

NSMasterData::__ArrayOfProductPrice NSMasterData::__Product::prices() const
{
    return d_ptr->mPrices;
}

void NSMasterData::__Product::setProductGroup( int productGroup )
{
    d_ptr->mProductGroup_nil = false;
    d_ptr->mProductGroup = productGroup;
}

int NSMasterData::__Product::productGroup() const
{
    return d_ptr->mProductGroup;
}

void NSMasterData::__Product::setShortName( const QString& shortName )
{
    d_ptr->mShortName_nil = false;
    d_ptr->mShortName = shortName;
}

QString NSMasterData::__Product::shortName() const
{
    return d_ptr->mShortName;
}

void NSMasterData::__Product::setValidTo( const KDDateTime& validTo )
{
    d_ptr->mValidTo_nil = false;
    d_ptr->mValidTo = validTo;
}

KDDateTime NSMasterData::__Product::validTo() const
{
    return d_ptr->mValidTo;
}

KDSoapValue NSMasterData::__Product::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Product"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mBaseBarCode_nil) {
        KDSoapValue _valueBaseBarCode(QString::fromLatin1("BaseBarCode"), QVariant::fromValue(d_ptr->mBaseBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueBaseBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBaseBarCode.setQualified(true);
        _valueBaseBarCode.setNillable(true);
        if (!_valueBaseBarCode.isNil())
        args.append(_valueBaseBarCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mBaseUnitOfMeasure_nil) {
        KDSoapValue _valueBaseUnitOfMeasure(QString::fromLatin1("BaseUnitOfMeasure"), QVariant::fromValue(d_ptr->mBaseUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueBaseUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBaseUnitOfMeasure.setQualified(true);
        _valueBaseUnitOfMeasure.setNillable(true);
        if (!_valueBaseUnitOfMeasure.isNil())
        args.append(_valueBaseUnitOfMeasure);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCashRegisterVATCode_nil) {
        KDSoapValue _valueCashRegisterVATCode(QString::fromLatin1("CashRegisterVATCode"), d_ptr->mCashRegisterVATCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));// converter_complextype.cpp:241
        _valueCashRegisterVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCashRegisterVATCode.setQualified(true);
        if (!_valueCashRegisterVATCode.isNil())
        args.append(_valueCashRegisterVATCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        _valueCode.setNillable(true);
        if (!_valueCode.isNil())
        args.append(_valueCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCustCommCode_nil) {
        KDSoapValue _valueCustCommCode(QString::fromLatin1("CustCommCode"), QVariant::fromValue(d_ptr->mCustCommCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCustCommCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCustCommCode.setQualified(true);
        _valueCustCommCode.setNillable(true);
        if (!_valueCustCommCode.isNil())
        args.append(_valueCustCommCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mExciseCategory_nil) {
        KDSoapValue _valueExciseCategory(QString::fromLatin1("ExciseCategory"), d_ptr->mExciseCategory.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));// converter_complextype.cpp:241
        _valueExciseCategory.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueExciseCategory.setQualified(true);
        _valueExciseCategory.setNillable(true);
        if (!_valueExciseCategory.isNil())
        args.append(_valueExciseCategory);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLastModifiedOn_nil) {
        KDSoapValue _valueLastModifiedOn(QString::fromLatin1("LastModifiedOn"), d_ptr->mLastModifiedOn.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueLastModifiedOn.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLastModifiedOn.setQualified(true);
        _valueLastModifiedOn.setNillable(true);
        if (!_valueLastModifiedOn.isNil())
        args.append(_valueLastModifiedOn);// converter_complextype.cpp:253
    }
    if (!d_ptr->mManufacturerCode_nil) {
        KDSoapValue _valueManufacturerCode(QString::fromLatin1("ManufacturerCode"), QVariant::fromValue(d_ptr->mManufacturerCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueManufacturerCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueManufacturerCode.setQualified(true);
        if (!_valueManufacturerCode.isNil())
        args.append(_valueManufacturerCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingQuantity_nil) {
        KDSoapValue _valuePackagingQuantity(QString::fromLatin1("PackagingQuantity"), QVariant::fromValue(d_ptr->mPackagingQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valuePackagingQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingQuantity.setQualified(true);
        _valuePackagingQuantity.setNillable(true);
        if (!_valuePackagingQuantity.isNil())
        args.append(_valuePackagingQuantity);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingUnitOfMeasure_nil) {
        KDSoapValue _valuePackagingUnitOfMeasure(QString::fromLatin1("PackagingUnitOfMeasure"), QVariant::fromValue(d_ptr->mPackagingUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valuePackagingUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitOfMeasure.setQualified(true);
        _valuePackagingUnitOfMeasure.setNillable(true);
        if (!_valuePackagingUnitOfMeasure.isNil())
        args.append(_valuePackagingUnitOfMeasure);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingUnits_nil) {
        KDSoapValue _valuePackagingUnits(d_ptr->mPackagingUnits.serialize(QString::fromLatin1("PackagingUnits")));// converter_complextype.cpp:233
        _valuePackagingUnits.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnits.setQualified(true);
        _valuePackagingUnits.setNillable(true);
        if (!_valuePackagingUnits.isNil())
        args.append(_valuePackagingUnits);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPrices_nil) {
        KDSoapValue _valuePrices(d_ptr->mPrices.serialize(QString::fromLatin1("Prices")));// converter_complextype.cpp:233
        _valuePrices.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePrices.setQualified(true);
        _valuePrices.setNillable(true);
        if (!_valuePrices.isNil())
        args.append(_valuePrices);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        if (!_valueProductGroup.isNil())
        args.append(_valueProductGroup);// converter_complextype.cpp:253
    }
    if (!d_ptr->mShortName_nil) {
        KDSoapValue _valueShortName(QString::fromLatin1("ShortName"), QVariant::fromValue(d_ptr->mShortName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShortName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueShortName.setQualified(true);
        _valueShortName.setNillable(true);
        if (!_valueShortName.isNil())
        args.append(_valueShortName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mValidTo_nil) {
        KDSoapValue _valueValidTo(QString::fromLatin1("ValidTo"), d_ptr->mValidTo.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueValidTo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidTo.setQualified(true);
        _valueValidTo.setNillable(true);
        if (!_valueValidTo.isNil())
        args.append(_valueValidTo);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__Product::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BaseBarCode")) {// converter_complextype.cpp:271
            d_ptr->mBaseBarCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("BaseUnitOfMeasure")) {// converter_complextype.cpp:271
            d_ptr->mBaseUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("CashRegisterVATCode")) {// converter_complextype.cpp:271
            d_ptr->mCashRegisterVATCode.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("Code")) {// converter_complextype.cpp:271
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("CustCommCode")) {// converter_complextype.cpp:271
            d_ptr->mCustCommCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ExciseCategory")) {// converter_complextype.cpp:271
            d_ptr->mExciseCategory.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("LastModifiedOn")) {// converter_complextype.cpp:271
            d_ptr->mLastModifiedOn = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ManufacturerCode")) {// converter_complextype.cpp:271
            d_ptr->mManufacturerCode = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Name")) {// converter_complextype.cpp:271
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingQuantity")) {// converter_complextype.cpp:271
            d_ptr->mPackagingQuantity = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingUnitOfMeasure")) {// converter_complextype.cpp:271
            d_ptr->mPackagingUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingUnits")) {// converter_complextype.cpp:271
            d_ptr->mPackagingUnits.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("Prices")) {// converter_complextype.cpp:271
            d_ptr->mPrices.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:271
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ShortName")) {// converter_complextype.cpp:271
            d_ptr->mShortName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ValidTo")) {// converter_complextype.cpp:271
            d_ptr->mValidTo = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
    }
}

NSMasterData::__Product::__Product()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__Product::~__Product()
{
}

NSMasterData::__Product::__Product( const NSMasterData::__Product& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__Product&  NSMasterData::__Product::operator=( const NSMasterData::__Product& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ProductPackagingUnit::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mBarCode;
    bool mBarCode_nil;
    float mMultiplier;
    bool mMultiplier_nil;
    QString mPackagingUnit;
    bool mPackagingUnit_nil;
    QString mPackagingUnitCode;
    bool mPackagingUnitCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
};

NSMasterData::__ProductPackagingUnit::PrivateDPtr::PrivateDPtr()
    : mBarCode_nil(true), mMultiplier(0), mMultiplier_nil(true), mPackagingUnit_nil(true), mPackagingUnitCode_nil(true), mProductCode_nil(true)
{
}


void NSMasterData::__ProductPackagingUnit::setBarCode( const QString& barCode )
{
    d_ptr->mBarCode_nil = false;
    d_ptr->mBarCode = barCode;
}

QString NSMasterData::__ProductPackagingUnit::barCode() const
{
    return d_ptr->mBarCode;
}

void NSMasterData::__ProductPackagingUnit::setMultiplier( float multiplier )
{
    d_ptr->mMultiplier_nil = false;
    d_ptr->mMultiplier = multiplier;
}

float NSMasterData::__ProductPackagingUnit::multiplier() const
{
    return d_ptr->mMultiplier;
}

void NSMasterData::__ProductPackagingUnit::setPackagingUnit( const QString& packagingUnit )
{
    d_ptr->mPackagingUnit_nil = false;
    d_ptr->mPackagingUnit = packagingUnit;
}

QString NSMasterData::__ProductPackagingUnit::packagingUnit() const
{
    return d_ptr->mPackagingUnit;
}

void NSMasterData::__ProductPackagingUnit::setPackagingUnitCode( const QString& packagingUnitCode )
{
    d_ptr->mPackagingUnitCode_nil = false;
    d_ptr->mPackagingUnitCode = packagingUnitCode;
}

QString NSMasterData::__ProductPackagingUnit::packagingUnitCode() const
{
    return d_ptr->mPackagingUnitCode;
}

void NSMasterData::__ProductPackagingUnit::setProductCode( const QString& productCode )
{
    d_ptr->mProductCode_nil = false;
    d_ptr->mProductCode = productCode;
}

QString NSMasterData::__ProductPackagingUnit::productCode() const
{
    return d_ptr->mProductCode;
}

KDSoapValue NSMasterData::__ProductPackagingUnit::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ProductPackagingUnit"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mBarCode_nil) {
        KDSoapValue _valueBarCode(QString::fromLatin1("BarCode"), QVariant::fromValue(d_ptr->mBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBarCode.setQualified(true);
        _valueBarCode.setNillable(true);
        if (!_valueBarCode.isNil())
        args.append(_valueBarCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mMultiplier_nil) {
        KDSoapValue _valueMultiplier(QString::fromLatin1("Multiplier"), QVariant::fromValue(d_ptr->mMultiplier), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valueMultiplier.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMultiplier.setQualified(true);
        if (!_valueMultiplier.isNil())
        args.append(_valueMultiplier);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingUnit_nil) {
        KDSoapValue _valuePackagingUnit(QString::fromLatin1("PackagingUnit"), QVariant::fromValue(d_ptr->mPackagingUnit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valuePackagingUnit.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnit.setQualified(true);
        _valuePackagingUnit.setNillable(true);
        if (!_valuePackagingUnit.isNil())
        args.append(_valuePackagingUnit);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPackagingUnitCode_nil) {
        KDSoapValue _valuePackagingUnitCode(QString::fromLatin1("PackagingUnitCode"), QVariant::fromValue(d_ptr->mPackagingUnitCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valuePackagingUnitCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitCode.setQualified(true);
        _valuePackagingUnitCode.setNillable(true);
        if (!_valuePackagingUnitCode.isNil())
        args.append(_valuePackagingUnitCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        if (!_valueProductCode.isNil())
        args.append(_valueProductCode);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ProductPackagingUnit::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("BarCode")) {// converter_complextype.cpp:271
            d_ptr->mBarCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Multiplier")) {// converter_complextype.cpp:271
            d_ptr->mMultiplier = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingUnit")) {// converter_complextype.cpp:271
            d_ptr->mPackagingUnit = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("PackagingUnitCode")) {// converter_complextype.cpp:271
            d_ptr->mPackagingUnitCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductCode")) {// converter_complextype.cpp:271
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::__ProductPackagingUnit::__ProductPackagingUnit()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ProductPackagingUnit::~__ProductPackagingUnit()
{
}

NSMasterData::__ProductPackagingUnit::__ProductPackagingUnit( const NSMasterData::__ProductPackagingUnit& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ProductPackagingUnit&  NSMasterData::__ProductPackagingUnit::operator=( const NSMasterData::__ProductPackagingUnit& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ProductPrice::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCurrency;
    bool mCurrency_nil;
    int mLineNo;
    bool mLineNo_nil;
    float mPrice;
    bool mPrice_nil;
    QString mProductCode;
    bool mProductCode_nil;
    KDDateTime mValidFrom;
    bool mValidFrom_nil;
    KDDateTime mValidTo;
    bool mValidTo_nil;
};

NSMasterData::__ProductPrice::PrivateDPtr::PrivateDPtr()
    : mCurrency_nil(true), mLineNo(0), mLineNo_nil(true), mPrice(0), mPrice_nil(true), mProductCode_nil(true), mValidFrom_nil(true), mValidTo_nil(true)
{
}


void NSMasterData::__ProductPrice::setCurrency( const QString& currency )
{
    d_ptr->mCurrency_nil = false;
    d_ptr->mCurrency = currency;
}

QString NSMasterData::__ProductPrice::currency() const
{
    return d_ptr->mCurrency;
}

void NSMasterData::__ProductPrice::setLineNo( int lineNo )
{
    d_ptr->mLineNo_nil = false;
    d_ptr->mLineNo = lineNo;
}

int NSMasterData::__ProductPrice::lineNo() const
{
    return d_ptr->mLineNo;
}

void NSMasterData::__ProductPrice::setPrice( float price )
{
    d_ptr->mPrice_nil = false;
    d_ptr->mPrice = price;
}

float NSMasterData::__ProductPrice::price() const
{
    return d_ptr->mPrice;
}

void NSMasterData::__ProductPrice::setProductCode( const QString& productCode )
{
    d_ptr->mProductCode_nil = false;
    d_ptr->mProductCode = productCode;
}

QString NSMasterData::__ProductPrice::productCode() const
{
    return d_ptr->mProductCode;
}

void NSMasterData::__ProductPrice::setValidFrom( const KDDateTime& validFrom )
{
    d_ptr->mValidFrom_nil = false;
    d_ptr->mValidFrom = validFrom;
}

KDDateTime NSMasterData::__ProductPrice::validFrom() const
{
    return d_ptr->mValidFrom;
}

void NSMasterData::__ProductPrice::setValidTo( const KDDateTime& validTo )
{
    d_ptr->mValidTo_nil = false;
    d_ptr->mValidTo = validTo;
}

KDDateTime NSMasterData::__ProductPrice::validTo() const
{
    return d_ptr->mValidTo;
}

KDSoapValue NSMasterData::__ProductPrice::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ProductPrice"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCurrency_nil) {
        KDSoapValue _valueCurrency(QString::fromLatin1("Currency"), QVariant::fromValue(d_ptr->mCurrency), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCurrency.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCurrency.setQualified(true);
        _valueCurrency.setNillable(true);
        if (!_valueCurrency.isNil())
        args.append(_valueCurrency);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        if (!_valueLineNo.isNil())
        args.append(_valueLineNo);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPrice_nil) {
        KDSoapValue _valuePrice(QString::fromLatin1("Price"), QVariant::fromValue(d_ptr->mPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valuePrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePrice.setQualified(true);
        if (!_valuePrice.isNil())
        args.append(_valuePrice);// converter_complextype.cpp:253
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        if (!_valueProductCode.isNil())
        args.append(_valueProductCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mValidFrom_nil) {
        KDSoapValue _valueValidFrom(QString::fromLatin1("ValidFrom"), d_ptr->mValidFrom.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueValidFrom.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidFrom.setQualified(true);
        _valueValidFrom.setNillable(true);
        if (!_valueValidFrom.isNil())
        args.append(_valueValidFrom);// converter_complextype.cpp:253
    }
    if (!d_ptr->mValidTo_nil) {
        KDSoapValue _valueValidTo(QString::fromLatin1("ValidTo"), d_ptr->mValidTo.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueValidTo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidTo.setQualified(true);
        _valueValidTo.setNillable(true);
        if (!_valueValidTo.isNil())
        args.append(_valueValidTo);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ProductPrice::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Currency")) {// converter_complextype.cpp:271
            d_ptr->mCurrency = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("LineNo")) {// converter_complextype.cpp:271
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Price")) {// converter_complextype.cpp:271
            d_ptr->mPrice = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ProductCode")) {// converter_complextype.cpp:271
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ValidFrom")) {// converter_complextype.cpp:271
            d_ptr->mValidFrom = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("ValidTo")) {// converter_complextype.cpp:271
            d_ptr->mValidTo = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
    }
}

NSMasterData::__ProductPrice::__ProductPrice()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ProductPrice::~__ProductPrice()
{
}

NSMasterData::__ProductPrice::__ProductPrice( const NSMasterData::__ProductPrice& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ProductPrice&  NSMasterData::__ProductPrice::operator=( const NSMasterData::__ProductPrice& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfProductGroup::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__ProductGroup> mProductGroup;
    bool mProductGroup_nil;
};

NSMasterData::__ArrayOfProductGroup::PrivateDPtr::PrivateDPtr()
    : mProductGroup_nil(true)
{
}


void NSMasterData::__ArrayOfProductGroup::setProductGroup( const QList<NSMasterData::__ProductGroup>& productGroup )
{
    d_ptr->mProductGroup_nil = false;
    d_ptr->mProductGroup = productGroup;
}

QList<NSMasterData::__ProductGroup> NSMasterData::__ArrayOfProductGroup::productGroup() const
{
    return d_ptr->mProductGroup;
}

KDSoapValue NSMasterData::__ArrayOfProductGroup::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProductGroup"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mProductGroup.count(); ++i) {
        KDSoapValue _valueProductGroup(d_ptr->mProductGroup.at(i).serialize(QString::fromLatin1("ProductGroup")));// converter_complextype.cpp:233
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        args.append(_valueProductGroup);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfProductGroup::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:271
            NSMasterData::__ProductGroup mProductGroupTemp;
            mProductGroupTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mProductGroup.append(mProductGroupTemp);
        }
    }
}

NSMasterData::__ArrayOfProductGroup::__ArrayOfProductGroup()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfProductGroup::~__ArrayOfProductGroup()
{
}

NSMasterData::__ArrayOfProductGroup::__ArrayOfProductGroup( const NSMasterData::__ArrayOfProductGroup& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfProductGroup&  NSMasterData::__ArrayOfProductGroup::operator=( const NSMasterData::__ArrayOfProductGroup& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductsSince::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    KDDateTime mModifiedSince;
    bool mModifiedSince_nil;
};

NSMasterData::TNS__GetProductsSince::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mModifiedSince_nil(true)
{
}


void NSMasterData::TNS__GetProductsSince::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetProductsSince::shopId() const
{
    return d_ptr->mShopId;
}

void NSMasterData::TNS__GetProductsSince::setModifiedSince( const KDDateTime& modifiedSince )
{
    d_ptr->mModifiedSince_nil = false;
    d_ptr->mModifiedSince = modifiedSince;
}

KDDateTime NSMasterData::TNS__GetProductsSince::modifiedSince() const
{
    return d_ptr->mModifiedSince;
}

KDSoapValue NSMasterData::TNS__GetProductsSince::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductsSince"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mModifiedSince_nil) {
        KDSoapValue _valueModifiedSince(QString::fromLatin1("modifiedSince"), d_ptr->mModifiedSince.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueModifiedSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueModifiedSince.setQualified(true);
        if (!_valueModifiedSince.isNil())
        args.append(_valueModifiedSince);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductsSince::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("modifiedSince")) {// converter_complextype.cpp:271
            d_ptr->mModifiedSince = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetProductsSince::TNS__GetProductsSince()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductsSince::~TNS__GetProductsSince()
{
}

NSMasterData::TNS__GetProductsSince::TNS__GetProductsSince( const NSMasterData::TNS__GetProductsSince& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductsSince&  NSMasterData::TNS__GetProductsSince::operator=( const NSMasterData::TNS__GetProductsSince& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetReasonCodesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfReasonCode mGetReasonCodesResult;
    bool mGetReasonCodesResult_nil;
};

NSMasterData::TNS__GetReasonCodesResponse::PrivateDPtr::PrivateDPtr()
    : mGetReasonCodesResult_nil(true)
{
}


void NSMasterData::TNS__GetReasonCodesResponse::setGetReasonCodesResult( const NSMasterData::__ArrayOfReasonCode& getReasonCodesResult )
{
    d_ptr->mGetReasonCodesResult_nil = false;
    d_ptr->mGetReasonCodesResult = getReasonCodesResult;
}

NSMasterData::__ArrayOfReasonCode NSMasterData::TNS__GetReasonCodesResponse::getReasonCodesResult() const
{
    return d_ptr->mGetReasonCodesResult;
}

KDSoapValue NSMasterData::TNS__GetReasonCodesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetReasonCodesResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetReasonCodesResult_nil) {
        KDSoapValue _valueGetReasonCodesResult(d_ptr->mGetReasonCodesResult.serialize(QString::fromLatin1("GetReasonCodesResult")));// converter_complextype.cpp:233
        _valueGetReasonCodesResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetReasonCodesResult.setQualified(true);
        _valueGetReasonCodesResult.setNillable(true);
        if (!_valueGetReasonCodesResult.isNil())
        args.append(_valueGetReasonCodesResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetReasonCodesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetReasonCodesResult")) {// converter_complextype.cpp:271
            d_ptr->mGetReasonCodesResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetReasonCodesResponse::TNS__GetReasonCodesResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetReasonCodesResponse::~TNS__GetReasonCodesResponse()
{
}

NSMasterData::TNS__GetReasonCodesResponse::TNS__GetReasonCodesResponse( const NSMasterData::TNS__GetReasonCodesResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetReasonCodesResponse&  NSMasterData::TNS__GetReasonCodesResponse::operator=( const NSMasterData::TNS__GetReasonCodesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__VATRate::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mActive;
    bool mActive_nil;
    NSMasterData::__VATCode mCashRegisterVATCode;
    bool mCashRegisterVATCode_nil;
    QString mCode;
    bool mCode_nil;
    QString mName;
    bool mName_nil;
    float mPercentage;
    bool mPercentage_nil;
    NSMasterData::__VATType mType;
    bool mType_nil;
    KDDateTime mValidFrom;
    bool mValidFrom_nil;
};

NSMasterData::__VATRate::PrivateDPtr::PrivateDPtr()
    : mActive(false), mActive_nil(true), mCashRegisterVATCode_nil(true), mCode_nil(true), mName_nil(true), mPercentage(0), mPercentage_nil(true), mType_nil(true), mValidFrom_nil(true)
{
}


void NSMasterData::__VATRate::setActive( bool active )
{
    d_ptr->mActive_nil = false;
    d_ptr->mActive = active;
}

bool NSMasterData::__VATRate::active() const
{
    return d_ptr->mActive;
}

void NSMasterData::__VATRate::setCashRegisterVATCode( const NSMasterData::__VATCode& cashRegisterVATCode )
{
    d_ptr->mCashRegisterVATCode_nil = false;
    d_ptr->mCashRegisterVATCode = cashRegisterVATCode;
}

NSMasterData::__VATCode NSMasterData::__VATRate::cashRegisterVATCode() const
{
    return d_ptr->mCashRegisterVATCode;
}

void NSMasterData::__VATRate::setCode( const QString& code )
{
    d_ptr->mCode_nil = false;
    d_ptr->mCode = code;
}

QString NSMasterData::__VATRate::code() const
{
    return d_ptr->mCode;
}

void NSMasterData::__VATRate::setName( const QString& name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = name;
}

QString NSMasterData::__VATRate::name() const
{
    return d_ptr->mName;
}

void NSMasterData::__VATRate::setPercentage( float percentage )
{
    d_ptr->mPercentage_nil = false;
    d_ptr->mPercentage = percentage;
}

float NSMasterData::__VATRate::percentage() const
{
    return d_ptr->mPercentage;
}

void NSMasterData::__VATRate::setType( const NSMasterData::__VATType& type )
{
    d_ptr->mType_nil = false;
    d_ptr->mType = type;
}

NSMasterData::__VATType NSMasterData::__VATRate::type() const
{
    return d_ptr->mType;
}

void NSMasterData::__VATRate::setValidFrom( const KDDateTime& validFrom )
{
    d_ptr->mValidFrom_nil = false;
    d_ptr->mValidFrom = validFrom;
}

KDDateTime NSMasterData::__VATRate::validFrom() const
{
    return d_ptr->mValidFrom;
}

KDSoapValue NSMasterData::__VATRate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATRate"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mActive_nil) {
        KDSoapValue _valueActive(QString::fromLatin1("Active"), QVariant::fromValue(d_ptr->mActive), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// converter_complextype.cpp:239
        _valueActive.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueActive.setQualified(true);
        if (!_valueActive.isNil())
        args.append(_valueActive);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCashRegisterVATCode_nil) {
        KDSoapValue _valueCashRegisterVATCode(QString::fromLatin1("CashRegisterVATCode"), d_ptr->mCashRegisterVATCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));// converter_complextype.cpp:241
        _valueCashRegisterVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCashRegisterVATCode.setQualified(true);
        if (!_valueCashRegisterVATCode.isNil())
        args.append(_valueCashRegisterVATCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        _valueCode.setNillable(true);
        if (!_valueCode.isNil())
        args.append(_valueCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mPercentage_nil) {
        KDSoapValue _valuePercentage(QString::fromLatin1("Percentage"), QVariant::fromValue(d_ptr->mPercentage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// converter_complextype.cpp:239
        _valuePercentage.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePercentage.setQualified(true);
        if (!_valuePercentage.isNil())
        args.append(_valuePercentage);// converter_complextype.cpp:253
    }
    if (!d_ptr->mType_nil) {
        KDSoapValue _valueType(QString::fromLatin1("Type"), d_ptr->mType.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATType"));// converter_complextype.cpp:241
        _valueType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueType.setQualified(true);
        if (!_valueType.isNil())
        args.append(_valueType);// converter_complextype.cpp:253
    }
    if (!d_ptr->mValidFrom_nil) {
        KDSoapValue _valueValidFrom(QString::fromLatin1("ValidFrom"), d_ptr->mValidFrom.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueValidFrom.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidFrom.setQualified(true);
        if (!_valueValidFrom.isNil())
        args.append(_valueValidFrom);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__VATRate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Active")) {// converter_complextype.cpp:271
            d_ptr->mActive = val.value().value<bool>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("CashRegisterVATCode")) {// converter_complextype.cpp:271
            d_ptr->mCashRegisterVATCode.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("Code")) {// converter_complextype.cpp:271
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Name")) {// converter_complextype.cpp:271
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Percentage")) {// converter_complextype.cpp:271
            d_ptr->mPercentage = val.value().value<float>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Type")) {// converter_complextype.cpp:271
            d_ptr->mType.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("ValidFrom")) {// converter_complextype.cpp:271
            d_ptr->mValidFrom = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
    }
}

NSMasterData::__VATRate::__VATRate()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__VATRate::~__VATRate()
{
}

NSMasterData::__VATRate::__VATRate( const NSMasterData::__VATRate& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__VATRate&  NSMasterData::__VATRate::operator=( const NSMasterData::__VATRate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__Manufacturer::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mCode;
    bool mCode_nil;
    QString mName;
    bool mName_nil;
};

NSMasterData::__Manufacturer::PrivateDPtr::PrivateDPtr()
    : mCode(0), mCode_nil(true), mName_nil(true)
{
}


void NSMasterData::__Manufacturer::setCode( int code )
{
    d_ptr->mCode_nil = false;
    d_ptr->mCode = code;
}

int NSMasterData::__Manufacturer::code() const
{
    return d_ptr->mCode;
}

void NSMasterData::__Manufacturer::setName( const QString& name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = name;
}

QString NSMasterData::__Manufacturer::name() const
{
    return d_ptr->mName;
}

KDSoapValue NSMasterData::__Manufacturer::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Manufacturer"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        if (!_valueCode.isNil())
        args.append(_valueCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__Manufacturer::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Code")) {// converter_complextype.cpp:271
            d_ptr->mCode = val.value().value<int>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Name")) {// converter_complextype.cpp:271
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::__Manufacturer::__Manufacturer()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__Manufacturer::~__Manufacturer()
{
}

NSMasterData::__Manufacturer::__Manufacturer( const NSMasterData::__Manufacturer& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__Manufacturer&  NSMasterData::__Manufacturer::operator=( const NSMasterData::__Manufacturer& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfManufacturer::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__Manufacturer> mManufacturer;
    bool mManufacturer_nil;
};

NSMasterData::__ArrayOfManufacturer::PrivateDPtr::PrivateDPtr()
    : mManufacturer_nil(true)
{
}


void NSMasterData::__ArrayOfManufacturer::setManufacturer( const QList<NSMasterData::__Manufacturer>& manufacturer )
{
    d_ptr->mManufacturer_nil = false;
    d_ptr->mManufacturer = manufacturer;
}

QList<NSMasterData::__Manufacturer> NSMasterData::__ArrayOfManufacturer::manufacturer() const
{
    return d_ptr->mManufacturer;
}

KDSoapValue NSMasterData::__ArrayOfManufacturer::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfManufacturer"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mManufacturer.count(); ++i) {
        KDSoapValue _valueManufacturer(d_ptr->mManufacturer.at(i).serialize(QString::fromLatin1("Manufacturer")));// converter_complextype.cpp:233
        _valueManufacturer.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueManufacturer.setQualified(true);
        _valueManufacturer.setNillable(true);
        args.append(_valueManufacturer);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfManufacturer::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Manufacturer")) {// converter_complextype.cpp:271
            NSMasterData::__Manufacturer mManufacturerTemp;
            mManufacturerTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mManufacturer.append(mManufacturerTemp);
        }
    }
}

NSMasterData::__ArrayOfManufacturer::__ArrayOfManufacturer()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfManufacturer::~__ArrayOfManufacturer()
{
}

NSMasterData::__ArrayOfManufacturer::__ArrayOfManufacturer( const NSMasterData::__ArrayOfManufacturer& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfManufacturer&  NSMasterData::__ArrayOfManufacturer::operator=( const NSMasterData::__ArrayOfManufacturer& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfProduct::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__Product> mProduct;
    bool mProduct_nil;
};

NSMasterData::__ArrayOfProduct::PrivateDPtr::PrivateDPtr()
    : mProduct_nil(true)
{
}


void NSMasterData::__ArrayOfProduct::setProduct( const QList<NSMasterData::__Product>& product )
{
    d_ptr->mProduct_nil = false;
    d_ptr->mProduct = product;
}

QList<NSMasterData::__Product> NSMasterData::__ArrayOfProduct::product() const
{
    return d_ptr->mProduct;
}

KDSoapValue NSMasterData::__ArrayOfProduct::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProduct"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mProduct.count(); ++i) {
        KDSoapValue _valueProduct(d_ptr->mProduct.at(i).serialize(QString::fromLatin1("Product")));// converter_complextype.cpp:233
        _valueProduct.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProduct.setQualified(true);
        _valueProduct.setNillable(true);
        args.append(_valueProduct);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfProduct::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Product")) {// converter_complextype.cpp:271
            NSMasterData::__Product mProductTemp;
            mProductTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mProduct.append(mProductTemp);
        }
    }
}

NSMasterData::__ArrayOfProduct::__ArrayOfProduct()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfProduct::~__ArrayOfProduct()
{
}

NSMasterData::__ArrayOfProduct::__ArrayOfProduct( const NSMasterData::__ArrayOfProduct& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfProduct&  NSMasterData::__ArrayOfProduct::operator=( const NSMasterData::__ArrayOfProduct& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProducts::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::TNS__GetProducts::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::TNS__GetProducts::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetProducts::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSMasterData::TNS__GetProducts::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProducts"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProducts::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetProducts::TNS__GetProducts()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProducts::~TNS__GetProducts()
{
}

NSMasterData::TNS__GetProducts::TNS__GetProducts( const NSMasterData::TNS__GetProducts& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProducts&  NSMasterData::TNS__GetProducts::operator=( const NSMasterData::TNS__GetProducts& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetCurrentVATRatesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfVATRate mGetCurrentVATRatesResult;
    bool mGetCurrentVATRatesResult_nil;
};

NSMasterData::TNS__GetCurrentVATRatesResponse::PrivateDPtr::PrivateDPtr()
    : mGetCurrentVATRatesResult_nil(true)
{
}


void NSMasterData::TNS__GetCurrentVATRatesResponse::setGetCurrentVATRatesResult( const NSMasterData::__ArrayOfVATRate& getCurrentVATRatesResult )
{
    d_ptr->mGetCurrentVATRatesResult_nil = false;
    d_ptr->mGetCurrentVATRatesResult = getCurrentVATRatesResult;
}

NSMasterData::__ArrayOfVATRate NSMasterData::TNS__GetCurrentVATRatesResponse::getCurrentVATRatesResult() const
{
    return d_ptr->mGetCurrentVATRatesResult;
}

KDSoapValue NSMasterData::TNS__GetCurrentVATRatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetCurrentVATRatesResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetCurrentVATRatesResult_nil) {
        KDSoapValue _valueGetCurrentVATRatesResult(d_ptr->mGetCurrentVATRatesResult.serialize(QString::fromLatin1("GetCurrentVATRatesResult")));// converter_complextype.cpp:233
        _valueGetCurrentVATRatesResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetCurrentVATRatesResult.setQualified(true);
        _valueGetCurrentVATRatesResult.setNillable(true);
        if (!_valueGetCurrentVATRatesResult.isNil())
        args.append(_valueGetCurrentVATRatesResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetCurrentVATRatesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetCurrentVATRatesResult")) {// converter_complextype.cpp:271
            d_ptr->mGetCurrentVATRatesResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetCurrentVATRatesResponse::TNS__GetCurrentVATRatesResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetCurrentVATRatesResponse::~TNS__GetCurrentVATRatesResponse()
{
}

NSMasterData::TNS__GetCurrentVATRatesResponse::TNS__GetCurrentVATRatesResponse( const NSMasterData::TNS__GetCurrentVATRatesResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetCurrentVATRatesResponse&  NSMasterData::TNS__GetCurrentVATRatesResponse::operator=( const NSMasterData::TNS__GetCurrentVATRatesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetManufacturers::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::TNS__GetManufacturers::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::TNS__GetManufacturers::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetManufacturers::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSMasterData::TNS__GetManufacturers::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetManufacturers"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetManufacturers::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetManufacturers::TNS__GetManufacturers()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetManufacturers::~TNS__GetManufacturers()
{
}

NSMasterData::TNS__GetManufacturers::TNS__GetManufacturers( const NSMasterData::TNS__GetManufacturers& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetManufacturers&  NSMasterData::TNS__GetManufacturers::operator=( const NSMasterData::TNS__GetManufacturers& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfReasonCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__ReasonCode> mReasonCode;
    bool mReasonCode_nil;
};

NSMasterData::__ArrayOfReasonCode::PrivateDPtr::PrivateDPtr()
    : mReasonCode_nil(true)
{
}


void NSMasterData::__ArrayOfReasonCode::setReasonCode( const QList<NSMasterData::__ReasonCode>& reasonCode )
{
    d_ptr->mReasonCode_nil = false;
    d_ptr->mReasonCode = reasonCode;
}

QList<NSMasterData::__ReasonCode> NSMasterData::__ArrayOfReasonCode::reasonCode() const
{
    return d_ptr->mReasonCode;
}

KDSoapValue NSMasterData::__ArrayOfReasonCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfReasonCode"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mReasonCode.count(); ++i) {
        KDSoapValue _valueReasonCode(d_ptr->mReasonCode.at(i).serialize(QString::fromLatin1("ReasonCode")));// converter_complextype.cpp:233
        _valueReasonCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReasonCode.setQualified(true);
        _valueReasonCode.setNillable(true);
        args.append(_valueReasonCode);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfReasonCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ReasonCode")) {// converter_complextype.cpp:271
            NSMasterData::__ReasonCode mReasonCodeTemp;
            mReasonCodeTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mReasonCode.append(mReasonCodeTemp);
        }
    }
}

NSMasterData::__ArrayOfReasonCode::__ArrayOfReasonCode()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfReasonCode::~__ArrayOfReasonCode()
{
}

NSMasterData::__ArrayOfReasonCode::__ArrayOfReasonCode( const NSMasterData::__ArrayOfReasonCode& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfReasonCode&  NSMasterData::__ArrayOfReasonCode::operator=( const NSMasterData::__ArrayOfReasonCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfProductPackagingUnit::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__ProductPackagingUnit> mProductPackagingUnit;
    bool mProductPackagingUnit_nil;
};

NSMasterData::__ArrayOfProductPackagingUnit::PrivateDPtr::PrivateDPtr()
    : mProductPackagingUnit_nil(true)
{
}


void NSMasterData::__ArrayOfProductPackagingUnit::setProductPackagingUnit( const QList<NSMasterData::__ProductPackagingUnit>& productPackagingUnit )
{
    d_ptr->mProductPackagingUnit_nil = false;
    d_ptr->mProductPackagingUnit = productPackagingUnit;
}

QList<NSMasterData::__ProductPackagingUnit> NSMasterData::__ArrayOfProductPackagingUnit::productPackagingUnit() const
{
    return d_ptr->mProductPackagingUnit;
}

KDSoapValue NSMasterData::__ArrayOfProductPackagingUnit::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProductPackagingUnit"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mProductPackagingUnit.count(); ++i) {
        KDSoapValue _valueProductPackagingUnit(d_ptr->mProductPackagingUnit.at(i).serialize(QString::fromLatin1("ProductPackagingUnit")));// converter_complextype.cpp:233
        _valueProductPackagingUnit.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductPackagingUnit.setQualified(true);
        _valueProductPackagingUnit.setNillable(true);
        args.append(_valueProductPackagingUnit);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfProductPackagingUnit::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ProductPackagingUnit")) {// converter_complextype.cpp:271
            NSMasterData::__ProductPackagingUnit mProductPackagingUnitTemp;
            mProductPackagingUnitTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mProductPackagingUnit.append(mProductPackagingUnitTemp);
        }
    }
}

NSMasterData::__ArrayOfProductPackagingUnit::__ArrayOfProductPackagingUnit()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfProductPackagingUnit::~__ArrayOfProductPackagingUnit()
{
}

NSMasterData::__ArrayOfProductPackagingUnit::__ArrayOfProductPackagingUnit( const NSMasterData::__ArrayOfProductPackagingUnit& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfProductPackagingUnit&  NSMasterData::__ArrayOfProductPackagingUnit::operator=( const NSMasterData::__ArrayOfProductPackagingUnit& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ReasonCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ReasonCode_ReasonCodeEnum mCode;
    bool mCode_nil;
    QString mDescription;
    bool mDescription_nil;
    NSMasterData::__MovementType mMovementType;
    bool mMovementType_nil;
};

NSMasterData::__ReasonCode::PrivateDPtr::PrivateDPtr()
    : mCode_nil(true), mDescription_nil(true), mMovementType_nil(true)
{
}


void NSMasterData::__ReasonCode::setCode( const NSMasterData::__ReasonCode_ReasonCodeEnum& code )
{
    d_ptr->mCode_nil = false;
    d_ptr->mCode = code;
}

NSMasterData::__ReasonCode_ReasonCodeEnum NSMasterData::__ReasonCode::code() const
{
    return d_ptr->mCode;
}

void NSMasterData::__ReasonCode::setDescription( const QString& description )
{
    d_ptr->mDescription_nil = false;
    d_ptr->mDescription = description;
}

QString NSMasterData::__ReasonCode::description() const
{
    return d_ptr->mDescription;
}

void NSMasterData::__ReasonCode::setMovementType( const NSMasterData::__MovementType& movementType )
{
    d_ptr->mMovementType_nil = false;
    d_ptr->mMovementType = movementType;
}

NSMasterData::__MovementType NSMasterData::__ReasonCode::movementType() const
{
    return d_ptr->mMovementType;
}

KDSoapValue NSMasterData::__ReasonCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode(QString::fromLatin1("Code"), d_ptr->mCode.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));// converter_complextype.cpp:241
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        if (!_valueCode.isNil())
        args.append(_valueCode);// converter_complextype.cpp:253
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription(QString::fromLatin1("Description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDescription.setQualified(true);
        _valueDescription.setNillable(true);
        if (!_valueDescription.isNil())
        args.append(_valueDescription);// converter_complextype.cpp:253
    }
    if (!d_ptr->mMovementType_nil) {
        KDSoapValue _valueMovementType(QString::fromLatin1("MovementType"), d_ptr->mMovementType.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));// converter_complextype.cpp:241
        _valueMovementType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMovementType.setQualified(true);
        if (!_valueMovementType.isNil())
        args.append(_valueMovementType);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ReasonCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Code")) {// converter_complextype.cpp:271
            d_ptr->mCode.deserialize(val.value());// converter_complextype.cpp:288
        }
        else if (name == QLatin1String("Description")) {// converter_complextype.cpp:271
            d_ptr->mDescription = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("MovementType")) {// converter_complextype.cpp:271
            d_ptr->mMovementType.deserialize(val.value());// converter_complextype.cpp:288
        }
    }
}

NSMasterData::__ReasonCode::__ReasonCode()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ReasonCode::~__ReasonCode()
{
}

NSMasterData::__ReasonCode::__ReasonCode( const NSMasterData::__ReasonCode& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ReasonCode&  NSMasterData::__ReasonCode::operator=( const NSMasterData::__ReasonCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductPricesOfResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfProductPrice mGetProductPricesOfResult;
    bool mGetProductPricesOfResult_nil;
};

NSMasterData::TNS__GetProductPricesOfResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductPricesOfResult_nil(true)
{
}


void NSMasterData::TNS__GetProductPricesOfResponse::setGetProductPricesOfResult( const NSMasterData::__ArrayOfProductPrice& getProductPricesOfResult )
{
    d_ptr->mGetProductPricesOfResult_nil = false;
    d_ptr->mGetProductPricesOfResult = getProductPricesOfResult;
}

NSMasterData::__ArrayOfProductPrice NSMasterData::TNS__GetProductPricesOfResponse::getProductPricesOfResult() const
{
    return d_ptr->mGetProductPricesOfResult;
}

KDSoapValue NSMasterData::TNS__GetProductPricesOfResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPricesOfResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetProductPricesOfResult_nil) {
        KDSoapValue _valueGetProductPricesOfResult(d_ptr->mGetProductPricesOfResult.serialize(QString::fromLatin1("GetProductPricesOfResult")));// converter_complextype.cpp:233
        _valueGetProductPricesOfResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductPricesOfResult.setQualified(true);
        _valueGetProductPricesOfResult.setNillable(true);
        if (!_valueGetProductPricesOfResult.isNil())
        args.append(_valueGetProductPricesOfResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductPricesOfResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetProductPricesOfResult")) {// converter_complextype.cpp:271
            d_ptr->mGetProductPricesOfResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetProductPricesOfResponse::TNS__GetProductPricesOfResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductPricesOfResponse::~TNS__GetProductPricesOfResponse()
{
}

NSMasterData::TNS__GetProductPricesOfResponse::TNS__GetProductPricesOfResponse( const NSMasterData::TNS__GetProductPricesOfResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductPricesOfResponse&  NSMasterData::TNS__GetProductPricesOfResponse::operator=( const NSMasterData::TNS__GetProductPricesOfResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductGroups::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::TNS__GetProductGroups::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::TNS__GetProductGroups::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetProductGroups::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSMasterData::TNS__GetProductGroups::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductGroups"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductGroups::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetProductGroups::TNS__GetProductGroups()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductGroups::~TNS__GetProductGroups()
{
}

NSMasterData::TNS__GetProductGroups::TNS__GetProductGroups( const NSMasterData::TNS__GetProductGroups& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductGroups&  NSMasterData::TNS__GetProductGroups::operator=( const NSMasterData::TNS__GetProductGroups& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfProductPrice::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__ProductPrice> mProductPrice;
    bool mProductPrice_nil;
};

NSMasterData::__ArrayOfProductPrice::PrivateDPtr::PrivateDPtr()
    : mProductPrice_nil(true)
{
}


void NSMasterData::__ArrayOfProductPrice::setProductPrice( const QList<NSMasterData::__ProductPrice>& productPrice )
{
    d_ptr->mProductPrice_nil = false;
    d_ptr->mProductPrice = productPrice;
}

QList<NSMasterData::__ProductPrice> NSMasterData::__ArrayOfProductPrice::productPrice() const
{
    return d_ptr->mProductPrice;
}

KDSoapValue NSMasterData::__ArrayOfProductPrice::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProductPrice"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mProductPrice.count(); ++i) {
        KDSoapValue _valueProductPrice(d_ptr->mProductPrice.at(i).serialize(QString::fromLatin1("ProductPrice")));// converter_complextype.cpp:233
        _valueProductPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductPrice.setQualified(true);
        _valueProductPrice.setNillable(true);
        args.append(_valueProductPrice);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfProductPrice::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("ProductPrice")) {// converter_complextype.cpp:271
            NSMasterData::__ProductPrice mProductPriceTemp;
            mProductPriceTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mProductPrice.append(mProductPriceTemp);
        }
    }
}

NSMasterData::__ArrayOfProductPrice::__ArrayOfProductPrice()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfProductPrice::~__ArrayOfProductPrice()
{
}

NSMasterData::__ArrayOfProductPrice::__ArrayOfProductPrice( const NSMasterData::__ArrayOfProductPrice& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfProductPrice&  NSMasterData::__ArrayOfProductPrice::operator=( const NSMasterData::__ArrayOfProductPrice& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::__ArrayOfVATRate::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMasterData::__VATRate> mVATRate;
    bool mVATRate_nil;
};

NSMasterData::__ArrayOfVATRate::PrivateDPtr::PrivateDPtr()
    : mVATRate_nil(true)
{
}


void NSMasterData::__ArrayOfVATRate::setVATRate( const QList<NSMasterData::__VATRate>& vATRate )
{
    d_ptr->mVATRate_nil = false;
    d_ptr->mVATRate = vATRate;
}

QList<NSMasterData::__VATRate> NSMasterData::__ArrayOfVATRate::vATRate() const
{
    return d_ptr->mVATRate;
}

KDSoapValue NSMasterData::__ArrayOfVATRate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfVATRate"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mVATRate.count(); ++i) {
        KDSoapValue _valueVATRate(d_ptr->mVATRate.at(i).serialize(QString::fromLatin1("VATRate")));// converter_complextype.cpp:233
        _valueVATRate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATRate.setQualified(true);
        _valueVATRate.setNillable(true);
        args.append(_valueVATRate);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::__ArrayOfVATRate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("VATRate")) {// converter_complextype.cpp:271
            NSMasterData::__VATRate mVATRateTemp;
            mVATRateTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mVATRate.append(mVATRateTemp);
        }
    }
}

NSMasterData::__ArrayOfVATRate::__ArrayOfVATRate()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::__ArrayOfVATRate::~__ArrayOfVATRate()
{
}

NSMasterData::__ArrayOfVATRate::__ArrayOfVATRate( const NSMasterData::__ArrayOfVATRate& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::__ArrayOfVATRate&  NSMasterData::__ArrayOfVATRate::operator=( const NSMasterData::__ArrayOfVATRate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetManufacturersResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfManufacturer mGetManufacturersResult;
    bool mGetManufacturersResult_nil;
};

NSMasterData::TNS__GetManufacturersResponse::PrivateDPtr::PrivateDPtr()
    : mGetManufacturersResult_nil(true)
{
}


void NSMasterData::TNS__GetManufacturersResponse::setGetManufacturersResult( const NSMasterData::__ArrayOfManufacturer& getManufacturersResult )
{
    d_ptr->mGetManufacturersResult_nil = false;
    d_ptr->mGetManufacturersResult = getManufacturersResult;
}

NSMasterData::__ArrayOfManufacturer NSMasterData::TNS__GetManufacturersResponse::getManufacturersResult() const
{
    return d_ptr->mGetManufacturersResult;
}

KDSoapValue NSMasterData::TNS__GetManufacturersResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetManufacturersResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetManufacturersResult_nil) {
        KDSoapValue _valueGetManufacturersResult(d_ptr->mGetManufacturersResult.serialize(QString::fromLatin1("GetManufacturersResult")));// converter_complextype.cpp:233
        _valueGetManufacturersResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetManufacturersResult.setQualified(true);
        _valueGetManufacturersResult.setNillable(true);
        if (!_valueGetManufacturersResult.isNil())
        args.append(_valueGetManufacturersResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetManufacturersResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetManufacturersResult")) {// converter_complextype.cpp:271
            d_ptr->mGetManufacturersResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetManufacturersResponse::TNS__GetManufacturersResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetManufacturersResponse::~TNS__GetManufacturersResponse()
{
}

NSMasterData::TNS__GetManufacturersResponse::TNS__GetManufacturersResponse( const NSMasterData::TNS__GetManufacturersResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetManufacturersResponse&  NSMasterData::TNS__GetManufacturersResponse::operator=( const NSMasterData::TNS__GetManufacturersResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductsSinceResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfProduct mGetProductsSinceResult;
    bool mGetProductsSinceResult_nil;
};

NSMasterData::TNS__GetProductsSinceResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductsSinceResult_nil(true)
{
}


void NSMasterData::TNS__GetProductsSinceResponse::setGetProductsSinceResult( const NSMasterData::__ArrayOfProduct& getProductsSinceResult )
{
    d_ptr->mGetProductsSinceResult_nil = false;
    d_ptr->mGetProductsSinceResult = getProductsSinceResult;
}

NSMasterData::__ArrayOfProduct NSMasterData::TNS__GetProductsSinceResponse::getProductsSinceResult() const
{
    return d_ptr->mGetProductsSinceResult;
}

KDSoapValue NSMasterData::TNS__GetProductsSinceResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductsSinceResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetProductsSinceResult_nil) {
        KDSoapValue _valueGetProductsSinceResult(d_ptr->mGetProductsSinceResult.serialize(QString::fromLatin1("GetProductsSinceResult")));// converter_complextype.cpp:233
        _valueGetProductsSinceResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductsSinceResult.setQualified(true);
        _valueGetProductsSinceResult.setNillable(true);
        if (!_valueGetProductsSinceResult.isNil())
        args.append(_valueGetProductsSinceResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductsSinceResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetProductsSinceResult")) {// converter_complextype.cpp:271
            d_ptr->mGetProductsSinceResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetProductsSinceResponse::TNS__GetProductsSinceResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductsSinceResponse::~TNS__GetProductsSinceResponse()
{
}

NSMasterData::TNS__GetProductsSinceResponse::TNS__GetProductsSinceResponse( const NSMasterData::TNS__GetProductsSinceResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductsSinceResponse&  NSMasterData::TNS__GetProductsSinceResponse::operator=( const NSMasterData::TNS__GetProductsSinceResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductPrices::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::TNS__GetProductPrices::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::TNS__GetProductPrices::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetProductPrices::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSMasterData::TNS__GetProductPrices::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPrices"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductPrices::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetProductPrices::TNS__GetProductPrices()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductPrices::~TNS__GetProductPrices()
{
}

NSMasterData::TNS__GetProductPrices::TNS__GetProductPrices( const NSMasterData::TNS__GetProductPrices& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductPrices&  NSMasterData::TNS__GetProductPrices::operator=( const NSMasterData::TNS__GetProductPrices& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetProductsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::__ArrayOfProduct mGetProductsResult;
    bool mGetProductsResult_nil;
};

NSMasterData::TNS__GetProductsResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductsResult_nil(true)
{
}


void NSMasterData::TNS__GetProductsResponse::setGetProductsResult( const NSMasterData::__ArrayOfProduct& getProductsResult )
{
    d_ptr->mGetProductsResult_nil = false;
    d_ptr->mGetProductsResult = getProductsResult;
}

NSMasterData::__ArrayOfProduct NSMasterData::TNS__GetProductsResponse::getProductsResult() const
{
    return d_ptr->mGetProductsResult;
}

KDSoapValue NSMasterData::TNS__GetProductsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductsResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetProductsResult_nil) {
        KDSoapValue _valueGetProductsResult(d_ptr->mGetProductsResult.serialize(QString::fromLatin1("GetProductsResult")));// converter_complextype.cpp:233
        _valueGetProductsResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductsResult.setQualified(true);
        _valueGetProductsResult.setNillable(true);
        if (!_valueGetProductsResult.isNil())
        args.append(_valueGetProductsResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetProductsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetProductsResult")) {// converter_complextype.cpp:271
            d_ptr->mGetProductsResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMasterData::TNS__GetProductsResponse::TNS__GetProductsResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetProductsResponse::~TNS__GetProductsResponse()
{
}

NSMasterData::TNS__GetProductsResponse::TNS__GetProductsResponse( const NSMasterData::TNS__GetProductsResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetProductsResponse&  NSMasterData::TNS__GetProductsResponse::operator=( const NSMasterData::TNS__GetProductsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetCurrentVATRates::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::TNS__GetCurrentVATRates::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::TNS__GetCurrentVATRates::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetCurrentVATRates::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSMasterData::TNS__GetCurrentVATRates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetCurrentVATRates"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetCurrentVATRates::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetCurrentVATRates::TNS__GetCurrentVATRates()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetCurrentVATRates::~TNS__GetCurrentVATRates()
{
}

NSMasterData::TNS__GetCurrentVATRates::TNS__GetCurrentVATRates( const NSMasterData::TNS__GetCurrentVATRates& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetCurrentVATRates&  NSMasterData::TNS__GetCurrentVATRates::operator=( const NSMasterData::TNS__GetCurrentVATRates& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::TNS__GetReasonCodes::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::TNS__GetReasonCodes::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::TNS__GetReasonCodes::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMasterData::TNS__GetReasonCodes::shopId() const
{
    return d_ptr->mShopId;
}

KDSoapValue NSMasterData::TNS__GetReasonCodes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetReasonCodes"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMasterData::TNS__GetReasonCodes::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMasterData::TNS__GetReasonCodes::TNS__GetReasonCodes()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::TNS__GetReasonCodes::~TNS__GetReasonCodes()
{
}

NSMasterData::TNS__GetReasonCodes::TNS__GetReasonCodes( const NSMasterData::TNS__GetReasonCodes& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::TNS__GetReasonCodes&  NSMasterData::TNS__GetReasonCodes::operator=( const NSMasterData::TNS__GetReasonCodes& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMasterData::GetCurrentVATRatesJob::GetCurrentVATRatesJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetCurrentVATRatesJob::setParameters( const NSMasterData::TNS__GetCurrentVATRates& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetCurrentVATRates NSMasterData::GetCurrentVATRatesJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetCurrentVATRatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetCurrentVATRates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCurrentVATRates(mParameters.serialize(QString::fromLatin1("GetCurrentVATRates")));// converter_complextype.cpp:233
    _valueGetCurrentVATRates.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetCurrentVATRates.setQualified(true);
    message = _valueGetCurrentVATRates;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCurrentVATRates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetCurrentVATRatesResponse NSMasterData::GetCurrentVATRatesJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetCurrentVATRatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetManufacturersJob::GetManufacturersJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetManufacturersJob::setParameters( const NSMasterData::TNS__GetManufacturers& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetManufacturers NSMasterData::GetManufacturersJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetManufacturersJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetManufacturers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetManufacturers(mParameters.serialize(QString::fromLatin1("GetManufacturers")));// converter_complextype.cpp:233
    _valueGetManufacturers.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetManufacturers.setQualified(true);
    message = _valueGetManufacturers;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetManufacturers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetManufacturersResponse NSMasterData::GetManufacturersJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetManufacturersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetProductGroupsJob::GetProductGroupsJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductGroupsJob::setParameters( const NSMasterData::TNS__GetProductGroups& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetProductGroups NSMasterData::GetProductGroupsJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductGroupsJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductGroups");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductGroups(mParameters.serialize(QString::fromLatin1("GetProductGroups")));// converter_complextype.cpp:233
    _valueGetProductGroups.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductGroups.setQualified(true);
    message = _valueGetProductGroups;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductGroups"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetProductGroupsResponse NSMasterData::GetProductGroupsJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductGroupsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetProductsJob::GetProductsJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductsJob::setParameters( const NSMasterData::TNS__GetProducts& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetProducts NSMasterData::GetProductsJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductsJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProducts");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProducts(mParameters.serialize(QString::fromLatin1("GetProducts")));// converter_complextype.cpp:233
    _valueGetProducts.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProducts.setQualified(true);
    message = _valueGetProducts;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProducts"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetProductsResponse NSMasterData::GetProductsJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetProductsSinceJob::GetProductsSinceJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductsSinceJob::setParameters( const NSMasterData::TNS__GetProductsSince& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetProductsSince NSMasterData::GetProductsSinceJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductsSinceJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductsSince");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductsSince(mParameters.serialize(QString::fromLatin1("GetProductsSince")));// converter_complextype.cpp:233
    _valueGetProductsSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductsSince.setQualified(true);
    message = _valueGetProductsSince;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductsSince"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetProductsSinceResponse NSMasterData::GetProductsSinceJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductsSinceJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetProductPricesJob::GetProductPricesJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductPricesJob::setParameters( const NSMasterData::TNS__GetProductPrices& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetProductPrices NSMasterData::GetProductPricesJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductPricesJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPrices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPrices(mParameters.serialize(QString::fromLatin1("GetProductPrices")));// converter_complextype.cpp:233
    _valueGetProductPrices.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPrices.setQualified(true);
    message = _valueGetProductPrices;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductPrices"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetProductPricesResponse NSMasterData::GetProductPricesJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductPricesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetProductPricesOfJob::GetProductPricesOfJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductPricesOfJob::setParameters( const NSMasterData::TNS__GetProductPricesOf& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetProductPricesOf NSMasterData::GetProductPricesOfJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductPricesOfJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPricesOf");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPricesOf(mParameters.serialize(QString::fromLatin1("GetProductPricesOf")));// converter_complextype.cpp:233
    _valueGetProductPricesOf.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPricesOf.setQualified(true);
    message = _valueGetProductPricesOf;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductPricesOf"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetProductPricesOfResponse NSMasterData::GetProductPricesOfJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductPricesOfJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMasterData::GetReasonCodesJob::GetReasonCodesJob( NSMasterData::MasterData* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetReasonCodesJob::setParameters( const NSMasterData::TNS__GetReasonCodes& arg0 )
{
    mParameters = arg0;
}

NSMasterData::TNS__GetReasonCodes NSMasterData::GetReasonCodesJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetReasonCodesJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetReasonCodes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetReasonCodes(mParameters.serialize(QString::fromLatin1("GetReasonCodes")));// converter_complextype.cpp:233
    _valueGetReasonCodes.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetReasonCodes.setQualified(true);
    message = _valueGetReasonCodes;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetReasonCodes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::TNS__GetReasonCodesResponse NSMasterData::GetReasonCodesJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetReasonCodesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


class NSMasterData::MasterData::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

NSMasterData::MasterData::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


NSMasterData::MasterData::MasterData( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

NSMasterData::MasterData::~MasterData()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void NSMasterData::MasterData::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void NSMasterData::MasterData::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void NSMasterData::MasterData::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString NSMasterData::MasterData::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *NSMasterData::MasterData::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://adatkuldes-teszt.nemzetidohany.gov.hu:8444/ndc/MasterData.svc");
        const QString messageNamespace = QString::fromLatin1("http://localhost/nd/communication/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *NSMasterData::MasterData::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const MasterData*>( this )->clientInterface() );
}

NSMasterData::TNS__GetCurrentVATRatesResponse NSMasterData::MasterData::getCurrentVATRates( const NSMasterData::TNS__GetCurrentVATRates& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetCurrentVATRates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCurrentVATRates(parameters.serialize(QString::fromLatin1("GetCurrentVATRates")));// converter_complextype.cpp:233
    _valueGetCurrentVATRates.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetCurrentVATRates.setQualified(true);
    message = _valueGetCurrentVATRates;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCurrentVATRates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetCurrentVATRatesResponse();
    NSMasterData::TNS__GetCurrentVATRatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetCurrentVATRates( const NSMasterData::TNS__GetCurrentVATRates& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetCurrentVATRates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCurrentVATRates(parameters.serialize(QString::fromLatin1("GetCurrentVATRates")));// converter_complextype.cpp:233
    _valueGetCurrentVATRates.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetCurrentVATRates.setQualified(true);
    message = _valueGetCurrentVATRates;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCurrentVATRates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCurrentVATRatesFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetCurrentVATRatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCurrentVATRatesError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getCurrentVATRates"), reply);
    } else {
        NSMasterData::TNS__GetCurrentVATRatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getCurrentVATRatesDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetManufacturersResponse NSMasterData::MasterData::getManufacturers( const NSMasterData::TNS__GetManufacturers& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetManufacturers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetManufacturers(parameters.serialize(QString::fromLatin1("GetManufacturers")));// converter_complextype.cpp:233
    _valueGetManufacturers.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetManufacturers.setQualified(true);
    message = _valueGetManufacturers;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetManufacturers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetManufacturersResponse();
    NSMasterData::TNS__GetManufacturersResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetManufacturers( const NSMasterData::TNS__GetManufacturers& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetManufacturers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetManufacturers(parameters.serialize(QString::fromLatin1("GetManufacturers")));// converter_complextype.cpp:233
    _valueGetManufacturers.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetManufacturers.setQualified(true);
    message = _valueGetManufacturers;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetManufacturers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetManufacturersFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetManufacturersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getManufacturersError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getManufacturers"), reply);
    } else {
        NSMasterData::TNS__GetManufacturersResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getManufacturersDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetProductGroupsResponse NSMasterData::MasterData::getProductGroups( const NSMasterData::TNS__GetProductGroups& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductGroups");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductGroups(parameters.serialize(QString::fromLatin1("GetProductGroups")));// converter_complextype.cpp:233
    _valueGetProductGroups.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductGroups.setQualified(true);
    message = _valueGetProductGroups;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductGroups"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetProductGroupsResponse();
    NSMasterData::TNS__GetProductGroupsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetProductGroups( const NSMasterData::TNS__GetProductGroups& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductGroups");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductGroups(parameters.serialize(QString::fromLatin1("GetProductGroups")));// converter_complextype.cpp:233
    _valueGetProductGroups.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductGroups.setQualified(true);
    message = _valueGetProductGroups;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductGroups"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductGroupsFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductGroupsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductGroupsError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getProductGroups"), reply);
    } else {
        NSMasterData::TNS__GetProductGroupsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getProductGroupsDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetProductsResponse NSMasterData::MasterData::getProducts( const NSMasterData::TNS__GetProducts& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProducts");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProducts(parameters.serialize(QString::fromLatin1("GetProducts")));// converter_complextype.cpp:233
    _valueGetProducts.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProducts.setQualified(true);
    message = _valueGetProducts;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProducts"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetProductsResponse();
    NSMasterData::TNS__GetProductsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetProducts( const NSMasterData::TNS__GetProducts& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProducts");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProducts(parameters.serialize(QString::fromLatin1("GetProducts")));// converter_complextype.cpp:233
    _valueGetProducts.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProducts.setQualified(true);
    message = _valueGetProducts;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProducts"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductsFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductsError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getProducts"), reply);
    } else {
        NSMasterData::TNS__GetProductsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getProductsDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetProductsSinceResponse NSMasterData::MasterData::getProductsSince( const NSMasterData::TNS__GetProductsSince& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductsSince");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductsSince(parameters.serialize(QString::fromLatin1("GetProductsSince")));// converter_complextype.cpp:233
    _valueGetProductsSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductsSince.setQualified(true);
    message = _valueGetProductsSince;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductsSince"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetProductsSinceResponse();
    NSMasterData::TNS__GetProductsSinceResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetProductsSince( const NSMasterData::TNS__GetProductsSince& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductsSince");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductsSince(parameters.serialize(QString::fromLatin1("GetProductsSince")));// converter_complextype.cpp:233
    _valueGetProductsSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductsSince.setQualified(true);
    message = _valueGetProductsSince;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductsSince"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductsSinceFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductsSinceFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductsSinceError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getProductsSince"), reply);
    } else {
        NSMasterData::TNS__GetProductsSinceResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getProductsSinceDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetProductPricesResponse NSMasterData::MasterData::getProductPrices( const NSMasterData::TNS__GetProductPrices& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPrices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPrices(parameters.serialize(QString::fromLatin1("GetProductPrices")));// converter_complextype.cpp:233
    _valueGetProductPrices.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPrices.setQualified(true);
    message = _valueGetProductPrices;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductPrices"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetProductPricesResponse();
    NSMasterData::TNS__GetProductPricesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetProductPrices( const NSMasterData::TNS__GetProductPrices& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPrices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPrices(parameters.serialize(QString::fromLatin1("GetProductPrices")));// converter_complextype.cpp:233
    _valueGetProductPrices.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPrices.setQualified(true);
    message = _valueGetProductPrices;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductPrices"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductPricesFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductPricesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductPricesError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getProductPrices"), reply);
    } else {
        NSMasterData::TNS__GetProductPricesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getProductPricesDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetProductPricesOfResponse NSMasterData::MasterData::getProductPricesOf( const NSMasterData::TNS__GetProductPricesOf& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPricesOf");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPricesOf(parameters.serialize(QString::fromLatin1("GetProductPricesOf")));// converter_complextype.cpp:233
    _valueGetProductPricesOf.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPricesOf.setQualified(true);
    message = _valueGetProductPricesOf;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductPricesOf"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetProductPricesOfResponse();
    NSMasterData::TNS__GetProductPricesOfResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetProductPricesOf( const NSMasterData::TNS__GetProductPricesOf& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPricesOf");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPricesOf(parameters.serialize(QString::fromLatin1("GetProductPricesOf")));// converter_complextype.cpp:233
    _valueGetProductPricesOf.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPricesOf.setQualified(true);
    message = _valueGetProductPricesOf;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductPricesOf"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductPricesOfFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductPricesOfFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductPricesOfError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getProductPricesOf"), reply);
    } else {
        NSMasterData::TNS__GetProductPricesOfResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getProductPricesOfDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::TNS__GetReasonCodesResponse NSMasterData::MasterData::getReasonCodes( const NSMasterData::TNS__GetReasonCodes& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetReasonCodes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetReasonCodes(parameters.serialize(QString::fromLatin1("GetReasonCodes")));// converter_complextype.cpp:233
    _valueGetReasonCodes.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetReasonCodes.setQualified(true);
    message = _valueGetReasonCodes;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetReasonCodes"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::TNS__GetReasonCodesResponse();
    NSMasterData::TNS__GetReasonCodesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMasterData::MasterData::asyncGetReasonCodes( const NSMasterData::TNS__GetReasonCodes& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetReasonCodes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetReasonCodes(parameters.serialize(QString::fromLatin1("GetReasonCodes")));// converter_complextype.cpp:233
    _valueGetReasonCodes.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetReasonCodes.setQualified(true);
    message = _valueGetReasonCodes;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetReasonCodes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetReasonCodesFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetReasonCodesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getReasonCodesError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getReasonCodes"), reply);
    } else {
        NSMasterData::TNS__GetReasonCodesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getReasonCodesDone( ret );
    }
    watcher->deleteLater();
}


