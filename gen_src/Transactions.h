// This file is generated by KDAB's kdwsdl2cpp from Transactions.svc?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/
#ifndef TRANSACTIONS_H
#define TRANSACTIONS_H

#include <QtCore/QString>
#include <QSharedPointer>
#include <QtCore/QSharedData>
#include <QtCore/QList>
#include <KDSoapClient/KDDateTime.h>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

#undef daylight
#undef timezone
class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
namespace NSTransactions {
    class NDN__ArrayOfDocumentVatBreakDown;
    class NDN__ArrayOfOpeningStockLine;
    class NDN__ArrayOfResponseCode;
    class NDN__ArrayOfSalesDocument;
    class NDN__ArrayOfSalesDocumentLine;
    class NDN__ArrayOfStockDocument;
    class NDN__ArrayOfStockDocumentLine;
    class NDN__DocumentVatBreakDown;
    class NDN__ExciseCategory;
    class NDN__MovementType;
    class NDN__OpeningStock;
    class NDN__OpeningStockLine;
    class NDN__Partner;
    class NDN__PriceLevelType;
    class NDN__ReasonCode_ReasonCodeEnum;
    class NDN__ResponseCode;
    class NDN__SalesDocument;
    class NDN__SalesDocumentLine;
    class NDN__StockDocument;
    class NDN__StockDocumentLine;
    class NDN__TransactionCallConfig;
    class NDN__TransactionResponse;
    class NDN__VATCode;
    class Transactions;
}


namespace NSTransactions {
    class NDN_COMM__CreateOpeningStock
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        void setDocument( const NSTransactions::NDN__OpeningStock& arg_document );
        NSTransactions::NDN__OpeningStock document() const;
        bool hasValueForDocument() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__CreateOpeningStock();
        ~NDN_COMM__CreateOpeningStock();

    public:
        NDN_COMM__CreateOpeningStock( const NDN_COMM__CreateOpeningStock& );
        NDN_COMM__CreateOpeningStock &operator=( const NDN_COMM__CreateOpeningStock& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN_COMM__CreateOpeningStockResponse
    {
    public:
        void setCreateOpeningStockResult( const NSTransactions::NDN__TransactionResponse& arg_createOpeningStockResult );
        NSTransactions::NDN__TransactionResponse createOpeningStockResult() const;
        bool hasValueForCreateOpeningStockResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__CreateOpeningStockResponse();
        ~NDN_COMM__CreateOpeningStockResponse();

    public:
        NDN_COMM__CreateOpeningStockResponse( const NDN_COMM__CreateOpeningStockResponse& );
        NDN_COMM__CreateOpeningStockResponse &operator=( const NDN_COMM__CreateOpeningStockResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN_COMM__CreateSalesTransaction
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        void setDocuments( const NSTransactions::NDN__ArrayOfSalesDocument& arg_documents );
        NSTransactions::NDN__ArrayOfSalesDocument documents() const;
        bool hasValueForDocuments() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__CreateSalesTransaction();
        ~NDN_COMM__CreateSalesTransaction();

    public:
        NDN_COMM__CreateSalesTransaction( const NDN_COMM__CreateSalesTransaction& );
        NDN_COMM__CreateSalesTransaction &operator=( const NDN_COMM__CreateSalesTransaction& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN_COMM__CreateSalesTransactionResponse
    {
    public:
        void setCreateSalesTransactionResult( const NSTransactions::NDN__TransactionResponse& arg_createSalesTransactionResult );
        NSTransactions::NDN__TransactionResponse createSalesTransactionResult() const;
        bool hasValueForCreateSalesTransactionResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__CreateSalesTransactionResponse();
        ~NDN_COMM__CreateSalesTransactionResponse();

    public:
        NDN_COMM__CreateSalesTransactionResponse( const NDN_COMM__CreateSalesTransactionResponse& );
        NDN_COMM__CreateSalesTransactionResponse &operator=( const NDN_COMM__CreateSalesTransactionResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN_COMM__CreateStockTransaction
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        void setDocuments( const NSTransactions::NDN__ArrayOfStockDocument& arg_documents );
        NSTransactions::NDN__ArrayOfStockDocument documents() const;
        bool hasValueForDocuments() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__CreateStockTransaction();
        ~NDN_COMM__CreateStockTransaction();

    public:
        NDN_COMM__CreateStockTransaction( const NDN_COMM__CreateStockTransaction& );
        NDN_COMM__CreateStockTransaction &operator=( const NDN_COMM__CreateStockTransaction& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN_COMM__CreateStockTransactionResponse
    {
    public:
        void setCreateStockTransactionResult( const NSTransactions::NDN__TransactionResponse& arg_createStockTransactionResult );
        NSTransactions::NDN__TransactionResponse createStockTransactionResult() const;
        bool hasValueForCreateStockTransactionResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__CreateStockTransactionResponse();
        ~NDN_COMM__CreateStockTransactionResponse();

    public:
        NDN_COMM__CreateStockTransactionResponse( const NDN_COMM__CreateStockTransactionResponse& );
        NDN_COMM__CreateStockTransactionResponse &operator=( const NDN_COMM__CreateStockTransactionResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfDocumentVatBreakDown
    {
    public:
        void setDocumentVatBreakDown( const QList< NSTransactions::NDN__DocumentVatBreakDown >& arg_documentVatBreakDown );
        QList< NSTransactions::NDN__DocumentVatBreakDown > documentVatBreakDown() const;
        bool hasValueForDocumentVatBreakDown() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfDocumentVatBreakDown();
        ~NDN__ArrayOfDocumentVatBreakDown();

    public:
        NDN__ArrayOfDocumentVatBreakDown( const NDN__ArrayOfDocumentVatBreakDown& );
        NDN__ArrayOfDocumentVatBreakDown &operator=( const NDN__ArrayOfDocumentVatBreakDown& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfOpeningStockLine
    {
    public:
        void setOpeningStockLine( const QList< NSTransactions::NDN__OpeningStockLine >& arg_openingStockLine );
        QList< NSTransactions::NDN__OpeningStockLine > openingStockLine() const;
        bool hasValueForOpeningStockLine() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfOpeningStockLine();
        ~NDN__ArrayOfOpeningStockLine();

    public:
        NDN__ArrayOfOpeningStockLine( const NDN__ArrayOfOpeningStockLine& );
        NDN__ArrayOfOpeningStockLine &operator=( const NDN__ArrayOfOpeningStockLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfResponseCode
    {
    public:
        void setResponseCode( const QList< NSTransactions::NDN__ResponseCode >& arg_responseCode );
        QList< NSTransactions::NDN__ResponseCode > responseCode() const;
        bool hasValueForResponseCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfResponseCode();
        ~NDN__ArrayOfResponseCode();

    public:
        NDN__ArrayOfResponseCode( const NDN__ArrayOfResponseCode& );
        NDN__ArrayOfResponseCode &operator=( const NDN__ArrayOfResponseCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfSalesDocument
    {
    public:
        void setSalesDocument( const QList< NSTransactions::NDN__SalesDocument >& arg_salesDocument );
        QList< NSTransactions::NDN__SalesDocument > salesDocument() const;
        bool hasValueForSalesDocument() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfSalesDocument();
        ~NDN__ArrayOfSalesDocument();

    public:
        NDN__ArrayOfSalesDocument( const NDN__ArrayOfSalesDocument& );
        NDN__ArrayOfSalesDocument &operator=( const NDN__ArrayOfSalesDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfSalesDocumentLine
    {
    public:
        void setSalesDocumentLine( const QList< NSTransactions::NDN__SalesDocumentLine >& arg_salesDocumentLine );
        QList< NSTransactions::NDN__SalesDocumentLine > salesDocumentLine() const;
        bool hasValueForSalesDocumentLine() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfSalesDocumentLine();
        ~NDN__ArrayOfSalesDocumentLine();

    public:
        NDN__ArrayOfSalesDocumentLine( const NDN__ArrayOfSalesDocumentLine& );
        NDN__ArrayOfSalesDocumentLine &operator=( const NDN__ArrayOfSalesDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfStockDocument
    {
    public:
        void setStockDocument( const QList< NSTransactions::NDN__StockDocument >& arg_stockDocument );
        QList< NSTransactions::NDN__StockDocument > stockDocument() const;
        bool hasValueForStockDocument() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfStockDocument();
        ~NDN__ArrayOfStockDocument();

    public:
        NDN__ArrayOfStockDocument( const NDN__ArrayOfStockDocument& );
        NDN__ArrayOfStockDocument &operator=( const NDN__ArrayOfStockDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ArrayOfStockDocumentLine
    {
    public:
        void setStockDocumentLine( const QList< NSTransactions::NDN__StockDocumentLine >& arg_stockDocumentLine );
        QList< NSTransactions::NDN__StockDocumentLine > stockDocumentLine() const;
        bool hasValueForStockDocumentLine() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfStockDocumentLine();
        ~NDN__ArrayOfStockDocumentLine();

    public:
        NDN__ArrayOfStockDocumentLine( const NDN__ArrayOfStockDocumentLine& );
        NDN__ArrayOfStockDocumentLine &operator=( const NDN__ArrayOfStockDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__DocumentVatBreakDown
    {
    public:
        void setNetAmount( float arg_netAmount );
        float netAmount() const;
        bool hasValueForNetAmount() const;
        void setVATAmount( float arg_vATAmount );
        float vATAmount() const;
        bool hasValueForVATAmount() const;
        void setVATCode( const NSTransactions::NDN__VATCode& arg_vATCode );
        NSTransactions::NDN__VATCode vATCode() const;
        bool hasValueForVATCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__DocumentVatBreakDown();
        ~NDN__DocumentVatBreakDown();

    public:
        NDN__DocumentVatBreakDown( const NDN__DocumentVatBreakDown& );
        NDN__DocumentVatBreakDown &operator=( const NDN__DocumentVatBreakDown& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__ExciseCategory you can
        also pass the enum directly.
        Example:
        someMethod(NDN__ExciseCategory::Tobacco).
     */
    class NDN__ExciseCategory
    {
    public:
        enum Type { Tobacco, Alcohol, Other };

    public:
        NDN__ExciseCategory( const Type &type );
        void setType( Type type );
        NSTransactions::NDN__ExciseCategory::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ExciseCategory();
        ~NDN__ExciseCategory();

    private:
        Type mType;
    };
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__MovementType you can
        also pass the enum directly.
        Example:
        someMethod(NDN__MovementType::AB).
     */
    class NDN__MovementType
    {
    public:
        enum Type { AB, ABS, BET, BETS, SVISZ, SVISZS, KIT, KITS, LELTT, LELTH, EGYT, EGYJ, ASZLA, ASZLAS, NY, NYS, KSZLA, KSZLAS, VVISZ };

    public:
        NDN__MovementType( const Type &type );
        void setType( Type type );
        NSTransactions::NDN__MovementType::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__MovementType();
        ~NDN__MovementType();

    private:
        Type mType;
    };
} // namespace end

namespace NSTransactions {
    class NDN__OpeningStock
    {
    public:
        void setCreatedAt( const KDDateTime& arg_createdAt );
        KDDateTime createdAt() const;
        bool hasValueForCreatedAt() const;
        void setLines( const NSTransactions::NDN__ArrayOfOpeningStockLine& arg_lines );
        NSTransactions::NDN__ArrayOfOpeningStockLine lines() const;
        bool hasValueForLines() const;
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__OpeningStock();
        ~NDN__OpeningStock();

    public:
        NDN__OpeningStock( const NDN__OpeningStock& );
        NDN__OpeningStock &operator=( const NDN__OpeningStock& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__OpeningStockLine
    {
    public:
        void setLineNo( int arg_lineNo );
        int lineNo() const;
        bool hasValueForLineNo() const;
        void setLocalProductCode( const QString& arg_localProductCode );
        QString localProductCode() const;
        bool hasValueForLocalProductCode() const;
        void setProductCode( const QString& arg_productCode );
        QString productCode() const;
        bool hasValueForProductCode() const;
        void setProductGroup( int arg_productGroup );
        int productGroup() const;
        bool hasValueForProductGroup() const;
        void setProductName( const QString& arg_productName );
        QString productName() const;
        bool hasValueForProductName() const;
        void setQuantity( float arg_quantity );
        float quantity() const;
        bool hasValueForQuantity() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__OpeningStockLine();
        ~NDN__OpeningStockLine();

    public:
        NDN__OpeningStockLine( const NDN__OpeningStockLine& );
        NDN__OpeningStockLine &operator=( const NDN__OpeningStockLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__Partner
    {
    public:
        void setCity( const QString& arg_city );
        QString city() const;
        bool hasValueForCity() const;
        void setLocalPartnerCode( const QString& arg_localPartnerCode );
        QString localPartnerCode() const;
        bool hasValueForLocalPartnerCode() const;
        void setName( const QString& arg_name );
        QString name() const;
        bool hasValueForName() const;
        void setPostCode( const QString& arg_postCode );
        QString postCode() const;
        bool hasValueForPostCode() const;
        void setStreet( const QString& arg_street );
        QString street() const;
        bool hasValueForStreet() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__Partner();
        ~NDN__Partner();

    public:
        NDN__Partner( const NDN__Partner& );
        NDN__Partner &operator=( const NDN__Partner& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__PriceLevelType you can
        also pass the enum directly.
        Example:
        someMethod(NDN__PriceLevelType::A).
     */
    class NDN__PriceLevelType
    {
    public:
        enum Type { A, Z, N };

    public:
        NDN__PriceLevelType( const Type &type );
        void setType( Type type );
        NSTransactions::NDN__PriceLevelType::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__PriceLevelType();
        ~NDN__PriceLevelType();

    private:
        Type mType;
    };
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type
        NDN__ReasonCode_ReasonCodeEnum you can also pass the enum directly.
        Example:
        someMethod(NDN__ReasonCode_ReasonCodeEnum::Scrapping).
     */
    class NDN__ReasonCode_ReasonCodeEnum
    {
    public:
        enum Type { Scrapping, Usage, OtherLoss, InventoryCorrection, OtherGain };

    public:
        NDN__ReasonCode_ReasonCodeEnum( const Type &type );
        void setType( Type type );
        NSTransactions::NDN__ReasonCode_ReasonCodeEnum::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ReasonCode_ReasonCodeEnum();
        ~NDN__ReasonCode_ReasonCodeEnum();

    private:
        Type mType;
    };
} // namespace end

namespace NSTransactions {
    class NDN__ResponseCode
    {
    public:
        void setCode( const QString& arg_code );
        QString code() const;
        bool hasValueForCode() const;
        void setKey( const QString& arg_key );
        QString key() const;
        bool hasValueForKey() const;
        void setLocalId( const QString& arg_localId );
        QString localId() const;
        bool hasValueForLocalId() const;
        void setMessage( const QString& arg_message );
        QString message() const;
        bool hasValueForMessage() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ResponseCode();
        ~NDN__ResponseCode();

    public:
        NDN__ResponseCode( const NDN__ResponseCode& );
        NDN__ResponseCode &operator=( const NDN__ResponseCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__SalesDocument
    {
    public:
        void setCashRegId( const QString& arg_cashRegId );
        QString cashRegId() const;
        bool hasValueForCashRegId() const;
        void setComment( const QString& arg_comment );
        QString comment() const;
        bool hasValueForComment() const;
        void setCreatedAt( const KDDateTime& arg_createdAt );
        KDDateTime createdAt() const;
        bool hasValueForCreatedAt() const;
        void setDocumentDate( const KDDateTime& arg_documentDate );
        KDDateTime documentDate() const;
        bool hasValueForDocumentDate() const;
        void setDueDate( const KDDateTime& arg_dueDate );
        KDDateTime dueDate() const;
        bool hasValueForDueDate() const;
        void setGross( float arg_gross );
        float gross() const;
        bool hasValueForGross() const;
        void setIssuedOnDate( const KDDateTime& arg_issuedOnDate );
        KDDateTime issuedOnDate() const;
        bool hasValueForIssuedOnDate() const;
        void setLines( const NSTransactions::NDN__ArrayOfSalesDocumentLine& arg_lines );
        NSTransactions::NDN__ArrayOfSalesDocumentLine lines() const;
        bool hasValueForLines() const;
        void setLocalDocumentId( const QString& arg_localDocumentId );
        QString localDocumentId() const;
        bool hasValueForLocalDocumentId() const;
        void setMovementType( const NSTransactions::NDN__MovementType& arg_movementType );
        NSTransactions::NDN__MovementType movementType() const;
        bool hasValueForMovementType() const;
        void setPartner( const NSTransactions::NDN__Partner& arg_partner );
        NSTransactions::NDN__Partner partner() const;
        bool hasValueForPartner() const;
        void setReference( const QString& arg_reference );
        QString reference() const;
        bool hasValueForReference() const;
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        void setStornoReference( const QString& arg_stornoReference );
        QString stornoReference() const;
        bool hasValueForStornoReference() const;
        void setVAT( float arg_vAT );
        float vAT() const;
        bool hasValueForVAT() const;
        void setVATBreakDown( const NSTransactions::NDN__ArrayOfDocumentVatBreakDown& arg_vATBreakDown );
        NSTransactions::NDN__ArrayOfDocumentVatBreakDown vATBreakDown() const;
        bool hasValueForVATBreakDown() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__SalesDocument();
        ~NDN__SalesDocument();

    public:
        NDN__SalesDocument( const NDN__SalesDocument& );
        NDN__SalesDocument &operator=( const NDN__SalesDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__SalesDocumentLine
    {
    public:
        void setDiscountValue( float arg_discountValue );
        float discountValue() const;
        bool hasValueForDiscountValue() const;
        void setExciseCategory( const NSTransactions::NDN__ExciseCategory& arg_exciseCategory );
        NSTransactions::NDN__ExciseCategory exciseCategory() const;
        bool hasValueForExciseCategory() const;
        void setGrossConsumerPrice( float arg_grossConsumerPrice );
        float grossConsumerPrice() const;
        bool hasValueForGrossConsumerPrice() const;
        void setGrossLineTotal( float arg_grossLineTotal );
        float grossLineTotal() const;
        bool hasValueForGrossLineTotal() const;
        void setGrossUnitPrice( float arg_grossUnitPrice );
        float grossUnitPrice() const;
        bool hasValueForGrossUnitPrice() const;
        void setLineNo( int arg_lineNo );
        int lineNo() const;
        bool hasValueForLineNo() const;
        void setLocalProductCode( const QString& arg_localProductCode );
        QString localProductCode() const;
        bool hasValueForLocalProductCode() const;
        void setNetListPrice( float arg_netListPrice );
        float netListPrice() const;
        bool hasValueForNetListPrice() const;
        void setNetUnitPrice( float arg_netUnitPrice );
        float netUnitPrice() const;
        bool hasValueForNetUnitPrice() const;
        void setPackagingQuantity( float arg_packagingQuantity );
        float packagingQuantity() const;
        bool hasValueForPackagingQuantity() const;
        void setPackagingUnitOfMeasure( const QString& arg_packagingUnitOfMeasure );
        QString packagingUnitOfMeasure() const;
        bool hasValueForPackagingUnitOfMeasure() const;
        void setPriceLevelType( const NSTransactions::NDN__PriceLevelType& arg_priceLevelType );
        NSTransactions::NDN__PriceLevelType priceLevelType() const;
        bool hasValueForPriceLevelType() const;
        void setProductBarCode( const QString& arg_productBarCode );
        QString productBarCode() const;
        bool hasValueForProductBarCode() const;
        void setProductCode( const QString& arg_productCode );
        QString productCode() const;
        bool hasValueForProductCode() const;
        void setProductGroup( int arg_productGroup );
        int productGroup() const;
        bool hasValueForProductGroup() const;
        void setProductName( const QString& arg_productName );
        QString productName() const;
        bool hasValueForProductName() const;
        void setProductStockPrice( float arg_productStockPrice );
        float productStockPrice() const;
        bool hasValueForProductStockPrice() const;
        void setQuantity( float arg_quantity );
        float quantity() const;
        bool hasValueForQuantity() const;
        void setUnitOfMeasure( const QString& arg_unitOfMeasure );
        QString unitOfMeasure() const;
        bool hasValueForUnitOfMeasure() const;
        void setVATCode( const NSTransactions::NDN__VATCode& arg_vATCode );
        NSTransactions::NDN__VATCode vATCode() const;
        bool hasValueForVATCode() const;
        void setVATLineTotal( float arg_vATLineTotal );
        float vATLineTotal() const;
        bool hasValueForVATLineTotal() const;
        void setVATPercent( float arg_vATPercent );
        float vATPercent() const;
        bool hasValueForVATPercent() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__SalesDocumentLine();
        ~NDN__SalesDocumentLine();

    public:
        NDN__SalesDocumentLine( const NDN__SalesDocumentLine& );
        NDN__SalesDocumentLine &operator=( const NDN__SalesDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__StockDocument
    {
    public:
        void setComment( const QString& arg_comment );
        QString comment() const;
        bool hasValueForComment() const;
        void setCreatedAt( const KDDateTime& arg_createdAt );
        KDDateTime createdAt() const;
        void setDocumentDate( const KDDateTime& arg_documentDate );
        KDDateTime documentDate() const;
        void setGross( float arg_gross );
        float gross() const;
        void setIssuedOnDate( const KDDateTime& arg_issuedOnDate );
        KDDateTime issuedOnDate() const;
        void setLines( const NSTransactions::NDN__ArrayOfStockDocumentLine& arg_lines );
        NSTransactions::NDN__ArrayOfStockDocumentLine lines() const;
        bool hasValueForLines() const;
        void setLocalDocumentId( const QString& arg_localDocumentId );
        QString localDocumentId() const;
        void setMovementType( const NSTransactions::NDN__MovementType& arg_movementType );
        NSTransactions::NDN__MovementType movementType() const;
        void setPartner( const NSTransactions::NDN__Partner& arg_partner );
        NSTransactions::NDN__Partner partner() const;
        bool hasValueForPartner() const;
        void setReason( const QString& arg_reason );
        QString reason() const;
        bool hasValueForReason() const;
        void setReasonCode( const NSTransactions::NDN__ReasonCode_ReasonCodeEnum& arg_reasonCode );
        NSTransactions::NDN__ReasonCode_ReasonCodeEnum reasonCode() const;
        bool hasValueForReasonCode() const;
        void setReference( const QString& arg_reference );
        QString reference() const;
        bool hasValueForReference() const;
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        void setStornoReference( const QString& arg_stornoReference );
        QString stornoReference() const;
        bool hasValueForStornoReference() const;
        void setVAT( float arg_vAT );
        float vAT() const;
        void setVATBreakDown( const NSTransactions::NDN__ArrayOfDocumentVatBreakDown& arg_vATBreakDown );
        NSTransactions::NDN__ArrayOfDocumentVatBreakDown vATBreakDown() const;
        bool hasValueForVATBreakDown() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__StockDocument();
        ~NDN__StockDocument();

    public:
        NDN__StockDocument( const NDN__StockDocument& );
        NDN__StockDocument &operator=( const NDN__StockDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__StockDocumentLine
    {
    public:
        void setDiscountValue( float arg_discountValue );
        float discountValue() const;
        bool hasValueForDiscountValue() const;
        void setExciseCategory( const NSTransactions::NDN__ExciseCategory& arg_exciseCategory );
        NSTransactions::NDN__ExciseCategory exciseCategory() const;
        bool hasValueForExciseCategory() const;
        void setGrossConsumerPrice( float arg_grossConsumerPrice );
        float grossConsumerPrice() const;
        bool hasValueForGrossConsumerPrice() const;
        void setGrossLineTotal( float arg_grossLineTotal );
        float grossLineTotal() const;
        bool hasValueForGrossLineTotal() const;
        void setGrossUnitPrice( float arg_grossUnitPrice );
        float grossUnitPrice() const;
        bool hasValueForGrossUnitPrice() const;
        void setLineNo( int arg_lineNo );
        int lineNo() const;
        bool hasValueForLineNo() const;
        void setLocalProductCode( const QString& arg_localProductCode );
        QString localProductCode() const;
        bool hasValueForLocalProductCode() const;
        void setNetListPrice( float arg_netListPrice );
        float netListPrice() const;
        bool hasValueForNetListPrice() const;
        void setNetUnitPrice( float arg_netUnitPrice );
        float netUnitPrice() const;
        bool hasValueForNetUnitPrice() const;
        void setPackagingQuantity( float arg_packagingQuantity );
        float packagingQuantity() const;
        bool hasValueForPackagingQuantity() const;
        void setPackagingUnitOfMeasure( const QString& arg_packagingUnitOfMeasure );
        QString packagingUnitOfMeasure() const;
        bool hasValueForPackagingUnitOfMeasure() const;
        void setPriceLevelType( const NSTransactions::NDN__PriceLevelType& arg_priceLevelType );
        NSTransactions::NDN__PriceLevelType priceLevelType() const;
        bool hasValueForPriceLevelType() const;
        void setProductBarCode( const QString& arg_productBarCode );
        QString productBarCode() const;
        bool hasValueForProductBarCode() const;
        void setProductCode( const QString& arg_productCode );
        QString productCode() const;
        bool hasValueForProductCode() const;
        void setProductGroup( int arg_productGroup );
        int productGroup() const;
        bool hasValueForProductGroup() const;
        void setProductName( const QString& arg_productName );
        QString productName() const;
        bool hasValueForProductName() const;
        void setProductStockPrice( float arg_productStockPrice );
        float productStockPrice() const;
        bool hasValueForProductStockPrice() const;
        void setQuantity( float arg_quantity );
        float quantity() const;
        bool hasValueForQuantity() const;
        void setUnitOfMeasure( const QString& arg_unitOfMeasure );
        QString unitOfMeasure() const;
        bool hasValueForUnitOfMeasure() const;
        void setVATCode( const NSTransactions::NDN__VATCode& arg_vATCode );
        NSTransactions::NDN__VATCode vATCode() const;
        bool hasValueForVATCode() const;
        void setVATLineTotal( float arg_vATLineTotal );
        float vATLineTotal() const;
        bool hasValueForVATLineTotal() const;
        void setVATPercent( float arg_vATPercent );
        float vATPercent() const;
        bool hasValueForVATPercent() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__StockDocumentLine();
        ~NDN__StockDocumentLine();

    public:
        NDN__StockDocumentLine( const NDN__StockDocumentLine& );
        NDN__StockDocumentLine &operator=( const NDN__StockDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__TransactionCallConfig
    {
    public:
        void setBatchSize( int arg_batchSize );
        int batchSize() const;
        bool hasValueForBatchSize() const;
        void setFrequency( int arg_frequency );
        int frequency() const;
        bool hasValueForFrequency() const;
        void setOffset( int arg_offset );
        int offset() const;
        bool hasValueForOffset() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__TransactionCallConfig();
        ~NDN__TransactionCallConfig();

    public:
        NDN__TransactionCallConfig( const NDN__TransactionCallConfig& );
        NDN__TransactionCallConfig &operator=( const NDN__TransactionCallConfig& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    class NDN__TransactionResponse
    {
    public:
        void setCurrentConfig( const NSTransactions::NDN__TransactionCallConfig& arg_currentConfig );
        NSTransactions::NDN__TransactionCallConfig currentConfig() const;
        bool hasValueForCurrentConfig() const;
        void setResponseCodes( const NSTransactions::NDN__ArrayOfResponseCode& arg_responseCodes );
        NSTransactions::NDN__ArrayOfResponseCode responseCodes() const;
        bool hasValueForResponseCodes() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__TransactionResponse();
        ~NDN__TransactionResponse();

    public:
        NDN__TransactionResponse( const NDN__TransactionResponse& );
        NDN__TransactionResponse &operator=( const NDN__TransactionResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__VATCode you can also
        pass the enum directly. Example:
        someMethod(NDN__VATCode::A).
     */
    class NDN__VATCode
    {
    public:
        enum Type { A, B, C, D, E, F, G, H, I, J, K };

    public:
        NDN__VATCode( const Type &type );
        void setType( Type type );
        NSTransactions::NDN__VATCode::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__VATCode();
        ~NDN__VATCode();

    private:
        Type mType;
    };
} // namespace end

namespace NSTransactions {
    class CreateOpeningStockJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateOpeningStockJob( NSTransactions::Transactions* service, QObject* _parent = nullptr );
        void setParameters( const NSTransactions::NDN_COMM__CreateOpeningStock& arg0 );
        NSTransactions::NDN_COMM__CreateOpeningStock parameters() const;
        NSTransactions::NDN_COMM__CreateOpeningStockResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSTransactions::Transactions *mService;
        NSTransactions::NDN_COMM__CreateOpeningStock mParameters;
        NSTransactions::NDN_COMM__CreateOpeningStockResponse mResultParameters;
    };
} // namespace end

namespace NSTransactions {
    class CreateSalesTransactionJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateSalesTransactionJob( NSTransactions::Transactions* service, QObject* _parent = nullptr );
        void setParameters( const NSTransactions::NDN_COMM__CreateSalesTransaction& arg0 );
        NSTransactions::NDN_COMM__CreateSalesTransaction parameters() const;
        NSTransactions::NDN_COMM__CreateSalesTransactionResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSTransactions::Transactions *mService;
        NSTransactions::NDN_COMM__CreateSalesTransaction mParameters;
        NSTransactions::NDN_COMM__CreateSalesTransactionResponse mResultParameters;
    };
} // namespace end

namespace NSTransactions {
    class CreateStockTransactionJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateStockTransactionJob( NSTransactions::Transactions* service, QObject* _parent = nullptr );
        void setParameters( const NSTransactions::NDN_COMM__CreateStockTransaction& arg0 );
        NSTransactions::NDN_COMM__CreateStockTransaction parameters() const;
        NSTransactions::NDN_COMM__CreateStockTransactionResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSTransactions::Transactions *mService;
        NSTransactions::NDN_COMM__CreateStockTransaction mParameters;
        NSTransactions::NDN_COMM__CreateStockTransactionResponse mResultParameters;
    };
} // namespace end

namespace NSTransactions {
    class Transactions : public QObject
    {
        Q_OBJECT

    public:
        Transactions( QObject* _parent = nullptr );
        ~Transactions();
        /**
            Asks Qt to ignore ssl errors in https requests. Use this for
            testing only!
         */
        void ignoreSslErrors();
        /**
            Overwrite the end point defined in the .wsdl file, with another
            http/https URL.
         */
        void setEndPoint( const QString& endPoint );
        /**
            Return the end point that will be used.
         */
        QString endPoint() const;
        /**
            Overwrite the soap version defined in the .wsdl file, with another
            version.
            version can be KDSoapClientInterface::SOAP1_1 or
            KDSoapClientInterface::SOAP1_2
         */
        void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
        /**
            Return the soap version used.n
         */
        KDSoapClientInterface::SoapVersion soapVersion() const;
        /**
            Return the fault code from the last blocking call.
            Empty if no error.
         */
        int lastErrorCode() const;
        /**
            Return the fault code from the last blocking call.
            Empty if no error.
         */
        QString lastFaultCode() const;
        /**
            Return the error from the last blocking call.
            Empty if no error.
         */
        QString lastError() const;
        /**
            Returns the underlying KDSoapClientInterface instance, which allows
            to access setCookieJar, lastResponseHeaders, etc.
         */
        const KDSoapClientInterface *clientInterface() const;
        KDSoapClientInterface *clientInterface();
        /**
            Blocking call to CreateSalesTransaction.
            Not recommended in a GUI thread.
         */
        NSTransactions::NDN_COMM__CreateSalesTransactionResponse createSalesTransaction( const NSTransactions::NDN_COMM__CreateSalesTransaction& parameters );
        /**
            Asynchronous call to CreateSalesTransaction.
            Remember to connect to createSalesTransactionDone and
            createSalesTransactionError.
            Deprecated, use CreateSalesTransactionJob instead.
         */
        void asyncCreateSalesTransaction( const NSTransactions::NDN_COMM__CreateSalesTransaction& parameters );
        /**
            Blocking call to CreateStockTransaction.
            Not recommended in a GUI thread.
         */
        NSTransactions::NDN_COMM__CreateStockTransactionResponse createStockTransaction( const NSTransactions::NDN_COMM__CreateStockTransaction& parameters );
        /**
            Asynchronous call to CreateStockTransaction.
            Remember to connect to createStockTransactionDone and
            createStockTransactionError.
            Deprecated, use CreateStockTransactionJob instead.
         */
        void asyncCreateStockTransaction( const NSTransactions::NDN_COMM__CreateStockTransaction& parameters );
        /**
            Blocking call to CreateOpeningStock.
            Not recommended in a GUI thread.
         */
        NSTransactions::NDN_COMM__CreateOpeningStockResponse createOpeningStock( const NSTransactions::NDN_COMM__CreateOpeningStock& parameters );
        /**
            Asynchronous call to CreateOpeningStock.
            Remember to connect to createOpeningStockDone and
            createOpeningStockError.
            Deprecated, use CreateOpeningStockJob instead.
         */
        void asyncCreateOpeningStock( const NSTransactions::NDN_COMM__CreateOpeningStock& parameters );

    Q_SIGNALS:
        /**
            This signal is emitted whenever a SOAP call failed, for a central
            processing of all SOAP errors.
            method is the name of the method (or operation) that returned the
            fault, for instance "addContact".
         */
        void soapError( const QString& method, const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncCreateSalesTransaction() has succeeded.
         */
        void createSalesTransactionDone( const NSTransactions::NDN_COMM__CreateSalesTransactionResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncCreateSalesTransaction() has failed.
         */
        void createSalesTransactionError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncCreateStockTransaction() has succeeded.
         */
        void createStockTransactionDone( const NSTransactions::NDN_COMM__CreateStockTransactionResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncCreateStockTransaction() has failed.
         */
        void createStockTransactionError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncCreateOpeningStock() has succeeded.
         */
        void createOpeningStockDone( const NSTransactions::NDN_COMM__CreateOpeningStockResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncCreateOpeningStock() has failed.
         */
        void createOpeningStockError( const KDSoapMessage& fault );

    private Q_SLOTS:
        void _kd_slotCreateSalesTransactionFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateStockTransactionFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateOpeningStockFinished( KDSoapPendingCallWatcher* watcher );

    private:
        class PrivateDPtr;
        PrivateDPtr *d_ptr;
    };
} // namespace end

#endif
