// This file is generated by KDAB's kdwsdl2cpp from MasterData.svc?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "MasterData.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

class NSMasterData::NDN_COMM__GetCurrentVATRates::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::NDN_COMM__GetCurrentVATRates::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::NDN_COMM__GetCurrentVATRates::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetCurrentVATRates::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetCurrentVATRates::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetCurrentVATRates::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetCurrentVATRates"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetCurrentVATRates::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetCurrentVATRates::NDN_COMM__GetCurrentVATRates()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetCurrentVATRates::~NDN_COMM__GetCurrentVATRates()
{
}

NSMasterData::NDN_COMM__GetCurrentVATRates::NDN_COMM__GetCurrentVATRates( const NSMasterData::NDN_COMM__GetCurrentVATRates& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetCurrentVATRates&  NSMasterData::NDN_COMM__GetCurrentVATRates::operator=( const NSMasterData::NDN_COMM__GetCurrentVATRates& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfVATRate mGetCurrentVATRatesResult;
    bool mGetCurrentVATRatesResult_nil;
};

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::PrivateDPtr::PrivateDPtr()
    : mGetCurrentVATRatesResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::setGetCurrentVATRatesResult( const NSMasterData::NDN__ArrayOfVATRate& arg_getCurrentVATRatesResult )
{
    d_ptr->mGetCurrentVATRatesResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetCurrentVATRatesResult = arg_getCurrentVATRatesResult;
}

NSMasterData::NDN__ArrayOfVATRate NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::getCurrentVATRatesResult() const
{
    return d_ptr->mGetCurrentVATRatesResult;
}

bool NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::hasValueForGetCurrentVATRatesResult() const
{
    return d_ptr->mGetCurrentVATRatesResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetCurrentVATRatesResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetCurrentVATRatesResult_nil) {
        KDSoapValue _valueGetCurrentVATRatesResult(d_ptr->mGetCurrentVATRatesResult.serialize(QString::fromLatin1("GetCurrentVATRatesResult")));// elementargumentserializer.cpp:102
        _valueGetCurrentVATRatesResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetCurrentVATRatesResult.setQualified(true);
        _valueGetCurrentVATRatesResult.setNillable(true);
        args.append(_valueGetCurrentVATRatesResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetCurrentVATRatesResult")) {// converter_complextype.cpp:483
            d_ptr->mGetCurrentVATRatesResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetCurrentVATRatesResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::NDN_COMM__GetCurrentVATRatesResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::~NDN_COMM__GetCurrentVATRatesResponse()
{
}

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::NDN_COMM__GetCurrentVATRatesResponse( const NSMasterData::NDN_COMM__GetCurrentVATRatesResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse&  NSMasterData::NDN_COMM__GetCurrentVATRatesResponse::operator=( const NSMasterData::NDN_COMM__GetCurrentVATRatesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetManufacturers::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::NDN_COMM__GetManufacturers::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::NDN_COMM__GetManufacturers::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetManufacturers::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetManufacturers::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetManufacturers::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetManufacturers"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetManufacturers::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetManufacturers::NDN_COMM__GetManufacturers()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetManufacturers::~NDN_COMM__GetManufacturers()
{
}

NSMasterData::NDN_COMM__GetManufacturers::NDN_COMM__GetManufacturers( const NSMasterData::NDN_COMM__GetManufacturers& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetManufacturers&  NSMasterData::NDN_COMM__GetManufacturers::operator=( const NSMasterData::NDN_COMM__GetManufacturers& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetManufacturersResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfManufacturer mGetManufacturersResult;
    bool mGetManufacturersResult_nil;
};

NSMasterData::NDN_COMM__GetManufacturersResponse::PrivateDPtr::PrivateDPtr()
    : mGetManufacturersResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetManufacturersResponse::setGetManufacturersResult( const NSMasterData::NDN__ArrayOfManufacturer& arg_getManufacturersResult )
{
    d_ptr->mGetManufacturersResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetManufacturersResult = arg_getManufacturersResult;
}

NSMasterData::NDN__ArrayOfManufacturer NSMasterData::NDN_COMM__GetManufacturersResponse::getManufacturersResult() const
{
    return d_ptr->mGetManufacturersResult;
}

bool NSMasterData::NDN_COMM__GetManufacturersResponse::hasValueForGetManufacturersResult() const
{
    return d_ptr->mGetManufacturersResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetManufacturersResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetManufacturersResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetManufacturersResult_nil) {
        KDSoapValue _valueGetManufacturersResult(d_ptr->mGetManufacturersResult.serialize(QString::fromLatin1("GetManufacturersResult")));// elementargumentserializer.cpp:102
        _valueGetManufacturersResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetManufacturersResult.setQualified(true);
        _valueGetManufacturersResult.setNillable(true);
        args.append(_valueGetManufacturersResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetManufacturersResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetManufacturersResult")) {// converter_complextype.cpp:483
            d_ptr->mGetManufacturersResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetManufacturersResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetManufacturersResponse::NDN_COMM__GetManufacturersResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetManufacturersResponse::~NDN_COMM__GetManufacturersResponse()
{
}

NSMasterData::NDN_COMM__GetManufacturersResponse::NDN_COMM__GetManufacturersResponse( const NSMasterData::NDN_COMM__GetManufacturersResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetManufacturersResponse&  NSMasterData::NDN_COMM__GetManufacturersResponse::operator=( const NSMasterData::NDN_COMM__GetManufacturersResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductGroups::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::NDN_COMM__GetProductGroups::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductGroups::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetProductGroups::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetProductGroups::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductGroups::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductGroups"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductGroups::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductGroups::NDN_COMM__GetProductGroups()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductGroups::~NDN_COMM__GetProductGroups()
{
}

NSMasterData::NDN_COMM__GetProductGroups::NDN_COMM__GetProductGroups( const NSMasterData::NDN_COMM__GetProductGroups& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductGroups&  NSMasterData::NDN_COMM__GetProductGroups::operator=( const NSMasterData::NDN_COMM__GetProductGroups& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductGroupsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfProductGroup mGetProductGroupsResult;
    bool mGetProductGroupsResult_nil;
};

NSMasterData::NDN_COMM__GetProductGroupsResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductGroupsResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductGroupsResponse::setGetProductGroupsResult( const NSMasterData::NDN__ArrayOfProductGroup& arg_getProductGroupsResult )
{
    d_ptr->mGetProductGroupsResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetProductGroupsResult = arg_getProductGroupsResult;
}

NSMasterData::NDN__ArrayOfProductGroup NSMasterData::NDN_COMM__GetProductGroupsResponse::getProductGroupsResult() const
{
    return d_ptr->mGetProductGroupsResult;
}

bool NSMasterData::NDN_COMM__GetProductGroupsResponse::hasValueForGetProductGroupsResult() const
{
    return d_ptr->mGetProductGroupsResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductGroupsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductGroupsResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetProductGroupsResult_nil) {
        KDSoapValue _valueGetProductGroupsResult(d_ptr->mGetProductGroupsResult.serialize(QString::fromLatin1("GetProductGroupsResult")));// elementargumentserializer.cpp:102
        _valueGetProductGroupsResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductGroupsResult.setQualified(true);
        _valueGetProductGroupsResult.setNillable(true);
        args.append(_valueGetProductGroupsResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductGroupsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetProductGroupsResult")) {// converter_complextype.cpp:483
            d_ptr->mGetProductGroupsResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetProductGroupsResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductGroupsResponse::NDN_COMM__GetProductGroupsResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductGroupsResponse::~NDN_COMM__GetProductGroupsResponse()
{
}

NSMasterData::NDN_COMM__GetProductGroupsResponse::NDN_COMM__GetProductGroupsResponse( const NSMasterData::NDN_COMM__GetProductGroupsResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductGroupsResponse&  NSMasterData::NDN_COMM__GetProductGroupsResponse::operator=( const NSMasterData::NDN_COMM__GetProductGroupsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductPrices::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::NDN_COMM__GetProductPrices::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductPrices::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetProductPrices::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetProductPrices::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductPrices::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPrices"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductPrices::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductPrices::NDN_COMM__GetProductPrices()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductPrices::~NDN_COMM__GetProductPrices()
{
}

NSMasterData::NDN_COMM__GetProductPrices::NDN_COMM__GetProductPrices( const NSMasterData::NDN_COMM__GetProductPrices& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductPrices&  NSMasterData::NDN_COMM__GetProductPrices::operator=( const NSMasterData::NDN_COMM__GetProductPrices& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductPricesOf::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    QString mProductCode;
    bool mProductCode_nil;
};

NSMasterData::NDN_COMM__GetProductPricesOf::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mProductCode_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductPricesOf::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetProductPricesOf::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetProductPricesOf::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSMasterData::NDN_COMM__GetProductPricesOf::setProductCode( const QString& arg_productCode )
{
    d_ptr->mProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductCode = arg_productCode;
}

QString NSMasterData::NDN_COMM__GetProductPricesOf::productCode() const
{
    return d_ptr->mProductCode;
}

bool NSMasterData::NDN_COMM__GetProductPricesOf::hasValueForProductCode() const
{
    return d_ptr->mProductCode_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductPricesOf::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPricesOf"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode = KDSoapValue(QString::fromLatin1("productCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        args.append(_valueProductCode);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductPricesOf::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("productCode")) {// converter_complextype.cpp:483
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductCode_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductPricesOf::NDN_COMM__GetProductPricesOf()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductPricesOf::~NDN_COMM__GetProductPricesOf()
{
}

NSMasterData::NDN_COMM__GetProductPricesOf::NDN_COMM__GetProductPricesOf( const NSMasterData::NDN_COMM__GetProductPricesOf& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductPricesOf&  NSMasterData::NDN_COMM__GetProductPricesOf::operator=( const NSMasterData::NDN_COMM__GetProductPricesOf& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductPricesOfResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfProductPrice mGetProductPricesOfResult;
    bool mGetProductPricesOfResult_nil;
};

NSMasterData::NDN_COMM__GetProductPricesOfResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductPricesOfResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductPricesOfResponse::setGetProductPricesOfResult( const NSMasterData::NDN__ArrayOfProductPrice& arg_getProductPricesOfResult )
{
    d_ptr->mGetProductPricesOfResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetProductPricesOfResult = arg_getProductPricesOfResult;
}

NSMasterData::NDN__ArrayOfProductPrice NSMasterData::NDN_COMM__GetProductPricesOfResponse::getProductPricesOfResult() const
{
    return d_ptr->mGetProductPricesOfResult;
}

bool NSMasterData::NDN_COMM__GetProductPricesOfResponse::hasValueForGetProductPricesOfResult() const
{
    return d_ptr->mGetProductPricesOfResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductPricesOfResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPricesOfResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetProductPricesOfResult_nil) {
        KDSoapValue _valueGetProductPricesOfResult(d_ptr->mGetProductPricesOfResult.serialize(QString::fromLatin1("GetProductPricesOfResult")));// elementargumentserializer.cpp:102
        _valueGetProductPricesOfResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductPricesOfResult.setQualified(true);
        _valueGetProductPricesOfResult.setNillable(true);
        args.append(_valueGetProductPricesOfResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductPricesOfResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetProductPricesOfResult")) {// converter_complextype.cpp:483
            d_ptr->mGetProductPricesOfResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetProductPricesOfResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductPricesOfResponse::NDN_COMM__GetProductPricesOfResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductPricesOfResponse::~NDN_COMM__GetProductPricesOfResponse()
{
}

NSMasterData::NDN_COMM__GetProductPricesOfResponse::NDN_COMM__GetProductPricesOfResponse( const NSMasterData::NDN_COMM__GetProductPricesOfResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductPricesOfResponse&  NSMasterData::NDN_COMM__GetProductPricesOfResponse::operator=( const NSMasterData::NDN_COMM__GetProductPricesOfResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductPricesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfProductPrice mGetProductPricesResult;
    bool mGetProductPricesResult_nil;
};

NSMasterData::NDN_COMM__GetProductPricesResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductPricesResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductPricesResponse::setGetProductPricesResult( const NSMasterData::NDN__ArrayOfProductPrice& arg_getProductPricesResult )
{
    d_ptr->mGetProductPricesResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetProductPricesResult = arg_getProductPricesResult;
}

NSMasterData::NDN__ArrayOfProductPrice NSMasterData::NDN_COMM__GetProductPricesResponse::getProductPricesResult() const
{
    return d_ptr->mGetProductPricesResult;
}

bool NSMasterData::NDN_COMM__GetProductPricesResponse::hasValueForGetProductPricesResult() const
{
    return d_ptr->mGetProductPricesResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductPricesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductPricesResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetProductPricesResult_nil) {
        KDSoapValue _valueGetProductPricesResult(d_ptr->mGetProductPricesResult.serialize(QString::fromLatin1("GetProductPricesResult")));// elementargumentserializer.cpp:102
        _valueGetProductPricesResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductPricesResult.setQualified(true);
        _valueGetProductPricesResult.setNillable(true);
        args.append(_valueGetProductPricesResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductPricesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetProductPricesResult")) {// converter_complextype.cpp:483
            d_ptr->mGetProductPricesResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetProductPricesResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductPricesResponse::NDN_COMM__GetProductPricesResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductPricesResponse::~NDN_COMM__GetProductPricesResponse()
{
}

NSMasterData::NDN_COMM__GetProductPricesResponse::NDN_COMM__GetProductPricesResponse( const NSMasterData::NDN_COMM__GetProductPricesResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductPricesResponse&  NSMasterData::NDN_COMM__GetProductPricesResponse::operator=( const NSMasterData::NDN_COMM__GetProductPricesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProducts::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::NDN_COMM__GetProducts::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProducts::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetProducts::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetProducts::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProducts::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProducts"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProducts::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProducts::NDN_COMM__GetProducts()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProducts::~NDN_COMM__GetProducts()
{
}

NSMasterData::NDN_COMM__GetProducts::NDN_COMM__GetProducts( const NSMasterData::NDN_COMM__GetProducts& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProducts&  NSMasterData::NDN_COMM__GetProducts::operator=( const NSMasterData::NDN_COMM__GetProducts& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductsResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfProduct mGetProductsResult;
    bool mGetProductsResult_nil;
};

NSMasterData::NDN_COMM__GetProductsResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductsResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductsResponse::setGetProductsResult( const NSMasterData::NDN__ArrayOfProduct& arg_getProductsResult )
{
    d_ptr->mGetProductsResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetProductsResult = arg_getProductsResult;
}

NSMasterData::NDN__ArrayOfProduct NSMasterData::NDN_COMM__GetProductsResponse::getProductsResult() const
{
    return d_ptr->mGetProductsResult;
}

bool NSMasterData::NDN_COMM__GetProductsResponse::hasValueForGetProductsResult() const
{
    return d_ptr->mGetProductsResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductsResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductsResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetProductsResult_nil) {
        KDSoapValue _valueGetProductsResult(d_ptr->mGetProductsResult.serialize(QString::fromLatin1("GetProductsResult")));// elementargumentserializer.cpp:102
        _valueGetProductsResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductsResult.setQualified(true);
        _valueGetProductsResult.setNillable(true);
        args.append(_valueGetProductsResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductsResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetProductsResult")) {// converter_complextype.cpp:483
            d_ptr->mGetProductsResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetProductsResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductsResponse::NDN_COMM__GetProductsResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductsResponse::~NDN_COMM__GetProductsResponse()
{
}

NSMasterData::NDN_COMM__GetProductsResponse::NDN_COMM__GetProductsResponse( const NSMasterData::NDN_COMM__GetProductsResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductsResponse&  NSMasterData::NDN_COMM__GetProductsResponse::operator=( const NSMasterData::NDN_COMM__GetProductsResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductsSince::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    KDDateTime mModifiedSince;
    bool mModifiedSince_nil;
};

NSMasterData::NDN_COMM__GetProductsSince::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mModifiedSince_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductsSince::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetProductsSince::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetProductsSince::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSMasterData::NDN_COMM__GetProductsSince::setModifiedSince( const KDDateTime& arg_modifiedSince )
{
    d_ptr->mModifiedSince_nil = false;// converter_complextype.cpp:352
    d_ptr->mModifiedSince = arg_modifiedSince;
}

KDDateTime NSMasterData::NDN_COMM__GetProductsSince::modifiedSince() const
{
    return d_ptr->mModifiedSince;
}

bool NSMasterData::NDN_COMM__GetProductsSince::hasValueForModifiedSince() const
{
    return d_ptr->mModifiedSince_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductsSince::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductsSince"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mModifiedSince_nil) {
        KDSoapValue _valueModifiedSince = KDSoapValue(QString::fromLatin1("modifiedSince"), d_ptr->mModifiedSince.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueModifiedSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueModifiedSince.setQualified(true);
        args.append(_valueModifiedSince);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductsSince::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("modifiedSince")) {// converter_complextype.cpp:483
            d_ptr->mModifiedSince = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mModifiedSince_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductsSince::NDN_COMM__GetProductsSince()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductsSince::~NDN_COMM__GetProductsSince()
{
}

NSMasterData::NDN_COMM__GetProductsSince::NDN_COMM__GetProductsSince( const NSMasterData::NDN_COMM__GetProductsSince& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductsSince&  NSMasterData::NDN_COMM__GetProductsSince::operator=( const NSMasterData::NDN_COMM__GetProductsSince& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetProductsSinceResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfProduct mGetProductsSinceResult;
    bool mGetProductsSinceResult_nil;
};

NSMasterData::NDN_COMM__GetProductsSinceResponse::PrivateDPtr::PrivateDPtr()
    : mGetProductsSinceResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetProductsSinceResponse::setGetProductsSinceResult( const NSMasterData::NDN__ArrayOfProduct& arg_getProductsSinceResult )
{
    d_ptr->mGetProductsSinceResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetProductsSinceResult = arg_getProductsSinceResult;
}

NSMasterData::NDN__ArrayOfProduct NSMasterData::NDN_COMM__GetProductsSinceResponse::getProductsSinceResult() const
{
    return d_ptr->mGetProductsSinceResult;
}

bool NSMasterData::NDN_COMM__GetProductsSinceResponse::hasValueForGetProductsSinceResult() const
{
    return d_ptr->mGetProductsSinceResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetProductsSinceResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetProductsSinceResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetProductsSinceResult_nil) {
        KDSoapValue _valueGetProductsSinceResult(d_ptr->mGetProductsSinceResult.serialize(QString::fromLatin1("GetProductsSinceResult")));// elementargumentserializer.cpp:102
        _valueGetProductsSinceResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetProductsSinceResult.setQualified(true);
        _valueGetProductsSinceResult.setNillable(true);
        args.append(_valueGetProductsSinceResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetProductsSinceResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetProductsSinceResult")) {// converter_complextype.cpp:483
            d_ptr->mGetProductsSinceResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetProductsSinceResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetProductsSinceResponse::NDN_COMM__GetProductsSinceResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetProductsSinceResponse::~NDN_COMM__GetProductsSinceResponse()
{
}

NSMasterData::NDN_COMM__GetProductsSinceResponse::NDN_COMM__GetProductsSinceResponse( const NSMasterData::NDN_COMM__GetProductsSinceResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetProductsSinceResponse&  NSMasterData::NDN_COMM__GetProductsSinceResponse::operator=( const NSMasterData::NDN_COMM__GetProductsSinceResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetReasonCodes::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
};

NSMasterData::NDN_COMM__GetReasonCodes::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true)
{
}


void NSMasterData::NDN_COMM__GetReasonCodes::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMasterData::NDN_COMM__GetReasonCodes::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMasterData::NDN_COMM__GetReasonCodes::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetReasonCodes::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetReasonCodes"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetReasonCodes::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetReasonCodes::NDN_COMM__GetReasonCodes()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetReasonCodes::~NDN_COMM__GetReasonCodes()
{
}

NSMasterData::NDN_COMM__GetReasonCodes::NDN_COMM__GetReasonCodes( const NSMasterData::NDN_COMM__GetReasonCodes& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetReasonCodes&  NSMasterData::NDN_COMM__GetReasonCodes::operator=( const NSMasterData::NDN_COMM__GetReasonCodes& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN_COMM__GetReasonCodesResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ArrayOfReasonCode mGetReasonCodesResult;
    bool mGetReasonCodesResult_nil;
};

NSMasterData::NDN_COMM__GetReasonCodesResponse::PrivateDPtr::PrivateDPtr()
    : mGetReasonCodesResult_nil(true)
{
}


void NSMasterData::NDN_COMM__GetReasonCodesResponse::setGetReasonCodesResult( const NSMasterData::NDN__ArrayOfReasonCode& arg_getReasonCodesResult )
{
    d_ptr->mGetReasonCodesResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetReasonCodesResult = arg_getReasonCodesResult;
}

NSMasterData::NDN__ArrayOfReasonCode NSMasterData::NDN_COMM__GetReasonCodesResponse::getReasonCodesResult() const
{
    return d_ptr->mGetReasonCodesResult;
}

bool NSMasterData::NDN_COMM__GetReasonCodesResponse::hasValueForGetReasonCodesResult() const
{
    return d_ptr->mGetReasonCodesResult_nil == false;
}

KDSoapValue NSMasterData::NDN_COMM__GetReasonCodesResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetReasonCodesResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetReasonCodesResult_nil) {
        KDSoapValue _valueGetReasonCodesResult(d_ptr->mGetReasonCodesResult.serialize(QString::fromLatin1("GetReasonCodesResult")));// elementargumentserializer.cpp:102
        _valueGetReasonCodesResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetReasonCodesResult.setQualified(true);
        _valueGetReasonCodesResult.setNillable(true);
        args.append(_valueGetReasonCodesResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN_COMM__GetReasonCodesResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetReasonCodesResult")) {// converter_complextype.cpp:483
            d_ptr->mGetReasonCodesResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetReasonCodesResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN_COMM__GetReasonCodesResponse::NDN_COMM__GetReasonCodesResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN_COMM__GetReasonCodesResponse::~NDN_COMM__GetReasonCodesResponse()
{
}

NSMasterData::NDN_COMM__GetReasonCodesResponse::NDN_COMM__GetReasonCodesResponse( const NSMasterData::NDN_COMM__GetReasonCodesResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN_COMM__GetReasonCodesResponse&  NSMasterData::NDN_COMM__GetReasonCodesResponse::operator=( const NSMasterData::NDN_COMM__GetReasonCodesResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfManufacturer::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__Manufacturer > mManufacturer;
    bool mManufacturer_nil;
};

NSMasterData::NDN__ArrayOfManufacturer::PrivateDPtr::PrivateDPtr()
    : mManufacturer_nil(true)
{
}


void NSMasterData::NDN__ArrayOfManufacturer::setManufacturer( const QList< NSMasterData::NDN__Manufacturer >& arg_manufacturer )
{
    d_ptr->mManufacturer_nil = false;// converter_complextype.cpp:352
    d_ptr->mManufacturer = arg_manufacturer;
}

QList< NSMasterData::NDN__Manufacturer > NSMasterData::NDN__ArrayOfManufacturer::manufacturer() const
{
    return d_ptr->mManufacturer;
}

bool NSMasterData::NDN__ArrayOfManufacturer::hasValueForManufacturer() const
{
    return d_ptr->mManufacturer_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfManufacturer::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfManufacturer"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mManufacturer.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueManufacturer(d_ptr->mManufacturer.at(i).serialize(QString::fromLatin1("Manufacturer")));// elementargumentserializer.cpp:102
        _valueManufacturer.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueManufacturer.setQualified(true);
        _valueManufacturer.setNillable(true);
        args.append(_valueManufacturer);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfManufacturer::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Manufacturer")) {// converter_complextype.cpp:483
            NSMasterData::NDN__Manufacturer mManufacturerTemp;// converter_complextype.cpp:541
            mManufacturerTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mManufacturer.append(mManufacturerTemp);// converter_complextype.cpp:549
            d_ptr->mManufacturer_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfManufacturer::NDN__ArrayOfManufacturer()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfManufacturer::~NDN__ArrayOfManufacturer()
{
}

NSMasterData::NDN__ArrayOfManufacturer::NDN__ArrayOfManufacturer( const NSMasterData::NDN__ArrayOfManufacturer& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfManufacturer&  NSMasterData::NDN__ArrayOfManufacturer::operator=( const NSMasterData::NDN__ArrayOfManufacturer& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfProduct::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__Product > mProduct;
    bool mProduct_nil;
};

NSMasterData::NDN__ArrayOfProduct::PrivateDPtr::PrivateDPtr()
    : mProduct_nil(true)
{
}


void NSMasterData::NDN__ArrayOfProduct::setProduct( const QList< NSMasterData::NDN__Product >& arg_product )
{
    d_ptr->mProduct_nil = false;// converter_complextype.cpp:352
    d_ptr->mProduct = arg_product;
}

QList< NSMasterData::NDN__Product > NSMasterData::NDN__ArrayOfProduct::product() const
{
    return d_ptr->mProduct;
}

bool NSMasterData::NDN__ArrayOfProduct::hasValueForProduct() const
{
    return d_ptr->mProduct_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfProduct::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProduct"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mProduct.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueProduct(d_ptr->mProduct.at(i).serialize(QString::fromLatin1("Product")));// elementargumentserializer.cpp:102
        _valueProduct.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProduct.setQualified(true);
        _valueProduct.setNillable(true);
        args.append(_valueProduct);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfProduct::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Product")) {// converter_complextype.cpp:483
            NSMasterData::NDN__Product mProductTemp;// converter_complextype.cpp:541
            mProductTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mProduct.append(mProductTemp);// converter_complextype.cpp:549
            d_ptr->mProduct_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfProduct::NDN__ArrayOfProduct()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfProduct::~NDN__ArrayOfProduct()
{
}

NSMasterData::NDN__ArrayOfProduct::NDN__ArrayOfProduct( const NSMasterData::NDN__ArrayOfProduct& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfProduct&  NSMasterData::NDN__ArrayOfProduct::operator=( const NSMasterData::NDN__ArrayOfProduct& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfProductGroup::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__ProductGroup > mProductGroup;
    bool mProductGroup_nil;
};

NSMasterData::NDN__ArrayOfProductGroup::PrivateDPtr::PrivateDPtr()
    : mProductGroup_nil(true)
{
}


void NSMasterData::NDN__ArrayOfProductGroup::setProductGroup( const QList< NSMasterData::NDN__ProductGroup >& arg_productGroup )
{
    d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductGroup = arg_productGroup;
}

QList< NSMasterData::NDN__ProductGroup > NSMasterData::NDN__ArrayOfProductGroup::productGroup() const
{
    return d_ptr->mProductGroup;
}

bool NSMasterData::NDN__ArrayOfProductGroup::hasValueForProductGroup() const
{
    return d_ptr->mProductGroup_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfProductGroup::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProductGroup"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mProductGroup.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueProductGroup(d_ptr->mProductGroup.at(i).serialize(QString::fromLatin1("ProductGroup")));// elementargumentserializer.cpp:102
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        args.append(_valueProductGroup);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfProductGroup::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:483
            NSMasterData::NDN__ProductGroup mProductGroupTemp;// converter_complextype.cpp:541
            mProductGroupTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mProductGroup.append(mProductGroupTemp);// converter_complextype.cpp:549
            d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfProductGroup::NDN__ArrayOfProductGroup()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfProductGroup::~NDN__ArrayOfProductGroup()
{
}

NSMasterData::NDN__ArrayOfProductGroup::NDN__ArrayOfProductGroup( const NSMasterData::NDN__ArrayOfProductGroup& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfProductGroup&  NSMasterData::NDN__ArrayOfProductGroup::operator=( const NSMasterData::NDN__ArrayOfProductGroup& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfProductPackagingUnit::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__ProductPackagingUnit > mProductPackagingUnit;
    bool mProductPackagingUnit_nil;
};

NSMasterData::NDN__ArrayOfProductPackagingUnit::PrivateDPtr::PrivateDPtr()
    : mProductPackagingUnit_nil(true)
{
}


void NSMasterData::NDN__ArrayOfProductPackagingUnit::setProductPackagingUnit( const QList< NSMasterData::NDN__ProductPackagingUnit >& arg_productPackagingUnit )
{
    d_ptr->mProductPackagingUnit_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductPackagingUnit = arg_productPackagingUnit;
}

QList< NSMasterData::NDN__ProductPackagingUnit > NSMasterData::NDN__ArrayOfProductPackagingUnit::productPackagingUnit() const
{
    return d_ptr->mProductPackagingUnit;
}

bool NSMasterData::NDN__ArrayOfProductPackagingUnit::hasValueForProductPackagingUnit() const
{
    return d_ptr->mProductPackagingUnit_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfProductPackagingUnit::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProductPackagingUnit"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mProductPackagingUnit.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueProductPackagingUnit(d_ptr->mProductPackagingUnit.at(i).serialize(QString::fromLatin1("ProductPackagingUnit")));// elementargumentserializer.cpp:102
        _valueProductPackagingUnit.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductPackagingUnit.setQualified(true);
        _valueProductPackagingUnit.setNillable(true);
        args.append(_valueProductPackagingUnit);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfProductPackagingUnit::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ProductPackagingUnit")) {// converter_complextype.cpp:483
            NSMasterData::NDN__ProductPackagingUnit mProductPackagingUnitTemp;// converter_complextype.cpp:541
            mProductPackagingUnitTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mProductPackagingUnit.append(mProductPackagingUnitTemp);// converter_complextype.cpp:549
            d_ptr->mProductPackagingUnit_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfProductPackagingUnit::NDN__ArrayOfProductPackagingUnit()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfProductPackagingUnit::~NDN__ArrayOfProductPackagingUnit()
{
}

NSMasterData::NDN__ArrayOfProductPackagingUnit::NDN__ArrayOfProductPackagingUnit( const NSMasterData::NDN__ArrayOfProductPackagingUnit& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfProductPackagingUnit&  NSMasterData::NDN__ArrayOfProductPackagingUnit::operator=( const NSMasterData::NDN__ArrayOfProductPackagingUnit& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfProductPrice::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__ProductPrice > mProductPrice;
    bool mProductPrice_nil;
};

NSMasterData::NDN__ArrayOfProductPrice::PrivateDPtr::PrivateDPtr()
    : mProductPrice_nil(true)
{
}


void NSMasterData::NDN__ArrayOfProductPrice::setProductPrice( const QList< NSMasterData::NDN__ProductPrice >& arg_productPrice )
{
    d_ptr->mProductPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductPrice = arg_productPrice;
}

QList< NSMasterData::NDN__ProductPrice > NSMasterData::NDN__ArrayOfProductPrice::productPrice() const
{
    return d_ptr->mProductPrice;
}

bool NSMasterData::NDN__ArrayOfProductPrice::hasValueForProductPrice() const
{
    return d_ptr->mProductPrice_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfProductPrice::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfProductPrice"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mProductPrice.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueProductPrice(d_ptr->mProductPrice.at(i).serialize(QString::fromLatin1("ProductPrice")));// elementargumentserializer.cpp:102
        _valueProductPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductPrice.setQualified(true);
        _valueProductPrice.setNillable(true);
        args.append(_valueProductPrice);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfProductPrice::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ProductPrice")) {// converter_complextype.cpp:483
            NSMasterData::NDN__ProductPrice mProductPriceTemp;// converter_complextype.cpp:541
            mProductPriceTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mProductPrice.append(mProductPriceTemp);// converter_complextype.cpp:549
            d_ptr->mProductPrice_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfProductPrice::NDN__ArrayOfProductPrice()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfProductPrice::~NDN__ArrayOfProductPrice()
{
}

NSMasterData::NDN__ArrayOfProductPrice::NDN__ArrayOfProductPrice( const NSMasterData::NDN__ArrayOfProductPrice& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfProductPrice&  NSMasterData::NDN__ArrayOfProductPrice::operator=( const NSMasterData::NDN__ArrayOfProductPrice& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfReasonCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__ReasonCode > mReasonCode;
    bool mReasonCode_nil;
};

NSMasterData::NDN__ArrayOfReasonCode::PrivateDPtr::PrivateDPtr()
    : mReasonCode_nil(true)
{
}


void NSMasterData::NDN__ArrayOfReasonCode::setReasonCode( const QList< NSMasterData::NDN__ReasonCode >& arg_reasonCode )
{
    d_ptr->mReasonCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mReasonCode = arg_reasonCode;
}

QList< NSMasterData::NDN__ReasonCode > NSMasterData::NDN__ArrayOfReasonCode::reasonCode() const
{
    return d_ptr->mReasonCode;
}

bool NSMasterData::NDN__ArrayOfReasonCode::hasValueForReasonCode() const
{
    return d_ptr->mReasonCode_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfReasonCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfReasonCode"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mReasonCode.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueReasonCode(d_ptr->mReasonCode.at(i).serialize(QString::fromLatin1("ReasonCode")));// elementargumentserializer.cpp:102
        _valueReasonCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReasonCode.setQualified(true);
        _valueReasonCode.setNillable(true);
        args.append(_valueReasonCode);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfReasonCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ReasonCode")) {// converter_complextype.cpp:483
            NSMasterData::NDN__ReasonCode mReasonCodeTemp;// converter_complextype.cpp:541
            mReasonCodeTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mReasonCode.append(mReasonCodeTemp);// converter_complextype.cpp:549
            d_ptr->mReasonCode_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfReasonCode::NDN__ArrayOfReasonCode()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfReasonCode::~NDN__ArrayOfReasonCode()
{
}

NSMasterData::NDN__ArrayOfReasonCode::NDN__ArrayOfReasonCode( const NSMasterData::NDN__ArrayOfReasonCode& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfReasonCode&  NSMasterData::NDN__ArrayOfReasonCode::operator=( const NSMasterData::NDN__ArrayOfReasonCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ArrayOfVATRate::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMasterData::NDN__VATRate > mVATRate;
    bool mVATRate_nil;
};

NSMasterData::NDN__ArrayOfVATRate::PrivateDPtr::PrivateDPtr()
    : mVATRate_nil(true)
{
}


void NSMasterData::NDN__ArrayOfVATRate::setVATRate( const QList< NSMasterData::NDN__VATRate >& arg_vATRate )
{
    d_ptr->mVATRate_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATRate = arg_vATRate;
}

QList< NSMasterData::NDN__VATRate > NSMasterData::NDN__ArrayOfVATRate::vATRate() const
{
    return d_ptr->mVATRate;
}

bool NSMasterData::NDN__ArrayOfVATRate::hasValueForVATRate() const
{
    return d_ptr->mVATRate_nil == false;
}

KDSoapValue NSMasterData::NDN__ArrayOfVATRate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfVATRate"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mVATRate.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueVATRate(d_ptr->mVATRate.at(i).serialize(QString::fromLatin1("VATRate")));// elementargumentserializer.cpp:102
        _valueVATRate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATRate.setQualified(true);
        _valueVATRate.setNillable(true);
        args.append(_valueVATRate);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ArrayOfVATRate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("VATRate")) {// converter_complextype.cpp:483
            NSMasterData::NDN__VATRate mVATRateTemp;// converter_complextype.cpp:541
            mVATRateTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mVATRate.append(mVATRateTemp);// converter_complextype.cpp:549
            d_ptr->mVATRate_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMasterData::NDN__ArrayOfVATRate::NDN__ArrayOfVATRate()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ArrayOfVATRate::~NDN__ArrayOfVATRate()
{
}

NSMasterData::NDN__ArrayOfVATRate::NDN__ArrayOfVATRate( const NSMasterData::NDN__ArrayOfVATRate& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ArrayOfVATRate&  NSMasterData::NDN__ArrayOfVATRate::operator=( const NSMasterData::NDN__ArrayOfVATRate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMasterData::NDN__ExciseCategory::NDN__ExciseCategory( const Type &type )
{
    mType = type;
}

void NSMasterData::NDN__ExciseCategory::setType( Type type )
{
    mType = type;
}

NSMasterData::NDN__ExciseCategory::Type NSMasterData::NDN__ExciseCategory::type() const
{
    return mType;
}

NSMasterData::NDN__ExciseCategory::operator Type() const
{
    return mType;
}

KDSoapValue NSMasterData::NDN__ExciseCategory::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMasterData::NDN__ExciseCategory::Tobacco:
            return KDSoapValue(valueName, "Tobacco", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));
        case NSMasterData::NDN__ExciseCategory::Alcohol:
            return KDSoapValue(valueName, "Alcohol", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));
        case NSMasterData::NDN__ExciseCategory::Other:
            return KDSoapValue(valueName, "Other", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMasterData::NDN__ExciseCategory::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Tobacco", NSMasterData::NDN__ExciseCategory::Tobacco },
    { "Alcohol", NSMasterData::NDN__ExciseCategory::Alcohol },
    { "Other", NSMasterData::NDN__ExciseCategory::Other }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__ExciseCategory'.", qPrintable(str) );
}

NSMasterData::NDN__ExciseCategory::NDN__ExciseCategory()
    : mType(Type(0))
{
}

NSMasterData::NDN__ExciseCategory::~NDN__ExciseCategory()
{
}


class NSMasterData::NDN__Manufacturer::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mCode;
    bool mCode_nil;
    QString mName;
    bool mName_nil;
};

NSMasterData::NDN__Manufacturer::PrivateDPtr::PrivateDPtr()
    : mCode(0), mCode_nil(true), mName_nil(true)
{
}


void NSMasterData::NDN__Manufacturer::setCode( int arg_code )
{
    d_ptr->mCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCode = arg_code;
}

int NSMasterData::NDN__Manufacturer::code() const
{
    return d_ptr->mCode;
}

bool NSMasterData::NDN__Manufacturer::hasValueForCode() const
{
    return d_ptr->mCode_nil == false;
}

void NSMasterData::NDN__Manufacturer::setName( const QString& arg_name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:352
    d_ptr->mName = arg_name;
}

QString NSMasterData::NDN__Manufacturer::name() const
{
    return d_ptr->mName;
}

bool NSMasterData::NDN__Manufacturer::hasValueForName() const
{
    return d_ptr->mName_nil == false;
}

KDSoapValue NSMasterData::NDN__Manufacturer::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Manufacturer"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode = KDSoapValue(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        args.append(_valueCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName = KDSoapValue(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        args.append(_valueName);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__Manufacturer::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Code")) {// converter_complextype.cpp:483
            d_ptr->mCode = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:483
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mName_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__Manufacturer::NDN__Manufacturer()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__Manufacturer::~NDN__Manufacturer()
{
}

NSMasterData::NDN__Manufacturer::NDN__Manufacturer( const NSMasterData::NDN__Manufacturer& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__Manufacturer&  NSMasterData::NDN__Manufacturer::operator=( const NSMasterData::NDN__Manufacturer& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMasterData::NDN__MovementType::NDN__MovementType( const Type &type )
{
    mType = type;
}

void NSMasterData::NDN__MovementType::setType( Type type )
{
    mType = type;
}

NSMasterData::NDN__MovementType::Type NSMasterData::NDN__MovementType::type() const
{
    return mType;
}

NSMasterData::NDN__MovementType::operator Type() const
{
    return mType;
}

KDSoapValue NSMasterData::NDN__MovementType::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMasterData::NDN__MovementType::AB:
            return KDSoapValue(valueName, "AB", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::ABS:
            return KDSoapValue(valueName, "ABS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::BET:
            return KDSoapValue(valueName, "BET", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::BETS:
            return KDSoapValue(valueName, "BETS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::SVISZ:
            return KDSoapValue(valueName, "SVISZ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::SVISZS:
            return KDSoapValue(valueName, "SVISZS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::KIT:
            return KDSoapValue(valueName, "KIT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::KITS:
            return KDSoapValue(valueName, "KITS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::LELTT:
            return KDSoapValue(valueName, "LELTT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::LELTH:
            return KDSoapValue(valueName, "LELTH", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::EGYT:
            return KDSoapValue(valueName, "EGYT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::EGYJ:
            return KDSoapValue(valueName, "EGYJ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::ASZLA:
            return KDSoapValue(valueName, "ASZLA", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::ASZLAS:
            return KDSoapValue(valueName, "ASZLAS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::NY:
            return KDSoapValue(valueName, "NY", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::NYS:
            return KDSoapValue(valueName, "NYS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::KSZLA:
            return KDSoapValue(valueName, "KSZLA", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::KSZLAS:
            return KDSoapValue(valueName, "KSZLAS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMasterData::NDN__MovementType::VVISZ:
            return KDSoapValue(valueName, "VVISZ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMasterData::NDN__MovementType::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AB", NSMasterData::NDN__MovementType::AB },
    { "ABS", NSMasterData::NDN__MovementType::ABS },
    { "BET", NSMasterData::NDN__MovementType::BET },
    { "BETS", NSMasterData::NDN__MovementType::BETS },
    { "SVISZ", NSMasterData::NDN__MovementType::SVISZ },
    { "SVISZS", NSMasterData::NDN__MovementType::SVISZS },
    { "KIT", NSMasterData::NDN__MovementType::KIT },
    { "KITS", NSMasterData::NDN__MovementType::KITS },
    { "LELTT", NSMasterData::NDN__MovementType::LELTT },
    { "LELTH", NSMasterData::NDN__MovementType::LELTH },
    { "EGYT", NSMasterData::NDN__MovementType::EGYT },
    { "EGYJ", NSMasterData::NDN__MovementType::EGYJ },
    { "ASZLA", NSMasterData::NDN__MovementType::ASZLA },
    { "ASZLAS", NSMasterData::NDN__MovementType::ASZLAS },
    { "NY", NSMasterData::NDN__MovementType::NY },
    { "NYS", NSMasterData::NDN__MovementType::NYS },
    { "KSZLA", NSMasterData::NDN__MovementType::KSZLA },
    { "KSZLAS", NSMasterData::NDN__MovementType::KSZLAS },
    { "VVISZ", NSMasterData::NDN__MovementType::VVISZ }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__MovementType'.", qPrintable(str) );
}

NSMasterData::NDN__MovementType::NDN__MovementType()
    : mType(Type(0))
{
}

NSMasterData::NDN__MovementType::~NDN__MovementType()
{
}


NSMasterData::NDN__PriceLevelType::NDN__PriceLevelType( const Type &type )
{
    mType = type;
}

void NSMasterData::NDN__PriceLevelType::setType( Type type )
{
    mType = type;
}

NSMasterData::NDN__PriceLevelType::Type NSMasterData::NDN__PriceLevelType::type() const
{
    return mType;
}

NSMasterData::NDN__PriceLevelType::operator Type() const
{
    return mType;
}

KDSoapValue NSMasterData::NDN__PriceLevelType::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMasterData::NDN__PriceLevelType::A:
            return KDSoapValue(valueName, "A", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("PriceLevelType"));
        case NSMasterData::NDN__PriceLevelType::Z:
            return KDSoapValue(valueName, "Z", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("PriceLevelType"));
        case NSMasterData::NDN__PriceLevelType::N:
            return KDSoapValue(valueName, "N", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("PriceLevelType"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMasterData::NDN__PriceLevelType::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "A", NSMasterData::NDN__PriceLevelType::A },
    { "Z", NSMasterData::NDN__PriceLevelType::Z },
    { "N", NSMasterData::NDN__PriceLevelType::N }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__PriceLevelType'.", qPrintable(str) );
}

NSMasterData::NDN__PriceLevelType::NDN__PriceLevelType()
    : mType(Type(0))
{
}

NSMasterData::NDN__PriceLevelType::~NDN__PriceLevelType()
{
}


class NSMasterData::NDN__Product::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mBaseBarCode;
    bool mBaseBarCode_nil;
    QString mBaseUnitOfMeasure;
    bool mBaseUnitOfMeasure_nil;
    NSMasterData::NDN__VATCode mCashRegisterVATCode;
    bool mCashRegisterVATCode_nil;
    QString mCode;
    bool mCode_nil;
    QString mCustCommCode;
    bool mCustCommCode_nil;
    NSMasterData::NDN__ExciseCategory mExciseCategory;
    bool mExciseCategory_nil;
    KDDateTime mLastModifiedOn;
    bool mLastModifiedOn_nil;
    int mManufacturerCode;
    bool mManufacturerCode_nil;
    QString mName;
    bool mName_nil;
    float mPackagingQuantity;
    bool mPackagingQuantity_nil;
    QString mPackagingUnitOfMeasure;
    bool mPackagingUnitOfMeasure_nil;
    NSMasterData::NDN__ArrayOfProductPackagingUnit mPackagingUnits;
    bool mPackagingUnits_nil;
    NSMasterData::NDN__ArrayOfProductPrice mPrices;
    bool mPrices_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mShortName;
    bool mShortName_nil;
    KDDateTime mValidTo;
    bool mValidTo_nil;
};

NSMasterData::NDN__Product::PrivateDPtr::PrivateDPtr()
    : mBaseBarCode_nil(true), mBaseUnitOfMeasure_nil(true), mCashRegisterVATCode_nil(true), mCode_nil(true), mCustCommCode_nil(true), mExciseCategory_nil(true), mLastModifiedOn_nil(true), mManufacturerCode(0), mManufacturerCode_nil(true), mName_nil(true), mPackagingQuantity(0), mPackagingQuantity_nil(true), mPackagingUnitOfMeasure_nil(true), mPackagingUnits_nil(true), mPrices_nil(true), mProductGroup(0), mProductGroup_nil(true), mShortName_nil(true), mValidTo_nil(true)
{
}


void NSMasterData::NDN__Product::setBaseBarCode( const QString& arg_baseBarCode )
{
    d_ptr->mBaseBarCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mBaseBarCode = arg_baseBarCode;
}

QString NSMasterData::NDN__Product::baseBarCode() const
{
    return d_ptr->mBaseBarCode;
}

bool NSMasterData::NDN__Product::hasValueForBaseBarCode() const
{
    return d_ptr->mBaseBarCode_nil == false;
}

void NSMasterData::NDN__Product::setBaseUnitOfMeasure( const QString& arg_baseUnitOfMeasure )
{
    d_ptr->mBaseUnitOfMeasure_nil = false;// converter_complextype.cpp:352
    d_ptr->mBaseUnitOfMeasure = arg_baseUnitOfMeasure;
}

QString NSMasterData::NDN__Product::baseUnitOfMeasure() const
{
    return d_ptr->mBaseUnitOfMeasure;
}

bool NSMasterData::NDN__Product::hasValueForBaseUnitOfMeasure() const
{
    return d_ptr->mBaseUnitOfMeasure_nil == false;
}

void NSMasterData::NDN__Product::setCashRegisterVATCode( const NSMasterData::NDN__VATCode& arg_cashRegisterVATCode )
{
    d_ptr->mCashRegisterVATCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCashRegisterVATCode = arg_cashRegisterVATCode;
}

NSMasterData::NDN__VATCode NSMasterData::NDN__Product::cashRegisterVATCode() const
{
    return d_ptr->mCashRegisterVATCode;
}

bool NSMasterData::NDN__Product::hasValueForCashRegisterVATCode() const
{
    return d_ptr->mCashRegisterVATCode_nil == false;
}

void NSMasterData::NDN__Product::setCode( const QString& arg_code )
{
    d_ptr->mCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCode = arg_code;
}

QString NSMasterData::NDN__Product::code() const
{
    return d_ptr->mCode;
}

bool NSMasterData::NDN__Product::hasValueForCode() const
{
    return d_ptr->mCode_nil == false;
}

void NSMasterData::NDN__Product::setCustCommCode( const QString& arg_custCommCode )
{
    d_ptr->mCustCommCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCustCommCode = arg_custCommCode;
}

QString NSMasterData::NDN__Product::custCommCode() const
{
    return d_ptr->mCustCommCode;
}

bool NSMasterData::NDN__Product::hasValueForCustCommCode() const
{
    return d_ptr->mCustCommCode_nil == false;
}

void NSMasterData::NDN__Product::setExciseCategory( const NSMasterData::NDN__ExciseCategory& arg_exciseCategory )
{
    d_ptr->mExciseCategory_nil = false;// converter_complextype.cpp:352
    d_ptr->mExciseCategory = arg_exciseCategory;
}

NSMasterData::NDN__ExciseCategory NSMasterData::NDN__Product::exciseCategory() const
{
    return d_ptr->mExciseCategory;
}

bool NSMasterData::NDN__Product::hasValueForExciseCategory() const
{
    return d_ptr->mExciseCategory_nil == false;
}

void NSMasterData::NDN__Product::setLastModifiedOn( const KDDateTime& arg_lastModifiedOn )
{
    d_ptr->mLastModifiedOn_nil = false;// converter_complextype.cpp:352
    d_ptr->mLastModifiedOn = arg_lastModifiedOn;
}

KDDateTime NSMasterData::NDN__Product::lastModifiedOn() const
{
    return d_ptr->mLastModifiedOn;
}

bool NSMasterData::NDN__Product::hasValueForLastModifiedOn() const
{
    return d_ptr->mLastModifiedOn_nil == false;
}

void NSMasterData::NDN__Product::setManufacturerCode( int arg_manufacturerCode )
{
    d_ptr->mManufacturerCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mManufacturerCode = arg_manufacturerCode;
}

int NSMasterData::NDN__Product::manufacturerCode() const
{
    return d_ptr->mManufacturerCode;
}

bool NSMasterData::NDN__Product::hasValueForManufacturerCode() const
{
    return d_ptr->mManufacturerCode_nil == false;
}

void NSMasterData::NDN__Product::setName( const QString& arg_name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:352
    d_ptr->mName = arg_name;
}

QString NSMasterData::NDN__Product::name() const
{
    return d_ptr->mName;
}

bool NSMasterData::NDN__Product::hasValueForName() const
{
    return d_ptr->mName_nil == false;
}

void NSMasterData::NDN__Product::setPackagingQuantity( float arg_packagingQuantity )
{
    d_ptr->mPackagingQuantity_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingQuantity = arg_packagingQuantity;
}

float NSMasterData::NDN__Product::packagingQuantity() const
{
    return d_ptr->mPackagingQuantity;
}

bool NSMasterData::NDN__Product::hasValueForPackagingQuantity() const
{
    return d_ptr->mPackagingQuantity_nil == false;
}

void NSMasterData::NDN__Product::setPackagingUnitOfMeasure( const QString& arg_packagingUnitOfMeasure )
{
    d_ptr->mPackagingUnitOfMeasure_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingUnitOfMeasure = arg_packagingUnitOfMeasure;
}

QString NSMasterData::NDN__Product::packagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure;
}

bool NSMasterData::NDN__Product::hasValueForPackagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure_nil == false;
}

void NSMasterData::NDN__Product::setPackagingUnits( const NSMasterData::NDN__ArrayOfProductPackagingUnit& arg_packagingUnits )
{
    d_ptr->mPackagingUnits_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingUnits = arg_packagingUnits;
}

NSMasterData::NDN__ArrayOfProductPackagingUnit NSMasterData::NDN__Product::packagingUnits() const
{
    return d_ptr->mPackagingUnits;
}

bool NSMasterData::NDN__Product::hasValueForPackagingUnits() const
{
    return d_ptr->mPackagingUnits_nil == false;
}

void NSMasterData::NDN__Product::setPrices( const NSMasterData::NDN__ArrayOfProductPrice& arg_prices )
{
    d_ptr->mPrices_nil = false;// converter_complextype.cpp:352
    d_ptr->mPrices = arg_prices;
}

NSMasterData::NDN__ArrayOfProductPrice NSMasterData::NDN__Product::prices() const
{
    return d_ptr->mPrices;
}

bool NSMasterData::NDN__Product::hasValueForPrices() const
{
    return d_ptr->mPrices_nil == false;
}

void NSMasterData::NDN__Product::setProductGroup( int arg_productGroup )
{
    d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductGroup = arg_productGroup;
}

int NSMasterData::NDN__Product::productGroup() const
{
    return d_ptr->mProductGroup;
}

bool NSMasterData::NDN__Product::hasValueForProductGroup() const
{
    return d_ptr->mProductGroup_nil == false;
}

void NSMasterData::NDN__Product::setShortName( const QString& arg_shortName )
{
    d_ptr->mShortName_nil = false;// converter_complextype.cpp:352
    d_ptr->mShortName = arg_shortName;
}

QString NSMasterData::NDN__Product::shortName() const
{
    return d_ptr->mShortName;
}

bool NSMasterData::NDN__Product::hasValueForShortName() const
{
    return d_ptr->mShortName_nil == false;
}

void NSMasterData::NDN__Product::setValidTo( const KDDateTime& arg_validTo )
{
    d_ptr->mValidTo_nil = false;// converter_complextype.cpp:352
    d_ptr->mValidTo = arg_validTo;
}

KDDateTime NSMasterData::NDN__Product::validTo() const
{
    return d_ptr->mValidTo;
}

bool NSMasterData::NDN__Product::hasValueForValidTo() const
{
    return d_ptr->mValidTo_nil == false;
}

KDSoapValue NSMasterData::NDN__Product::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Product"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mBaseBarCode_nil) {
        KDSoapValue _valueBaseBarCode = KDSoapValue(QString::fromLatin1("BaseBarCode"), QVariant::fromValue(d_ptr->mBaseBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueBaseBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBaseBarCode.setQualified(true);
        _valueBaseBarCode.setNillable(true);
        args.append(_valueBaseBarCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mBaseUnitOfMeasure_nil) {
        KDSoapValue _valueBaseUnitOfMeasure = KDSoapValue(QString::fromLatin1("BaseUnitOfMeasure"), QVariant::fromValue(d_ptr->mBaseUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueBaseUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBaseUnitOfMeasure.setQualified(true);
        _valueBaseUnitOfMeasure.setNillable(true);
        args.append(_valueBaseUnitOfMeasure);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCashRegisterVATCode_nil) {
        KDSoapValue _valueCashRegisterVATCode = d_ptr->mCashRegisterVATCode.serialize(QString::fromLatin1("CashRegisterVATCode"));// elementargumentserializer.cpp:108
        _valueCashRegisterVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCashRegisterVATCode.setQualified(true);
        args.append(_valueCashRegisterVATCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode = KDSoapValue(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        _valueCode.setNillable(true);
        args.append(_valueCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCustCommCode_nil) {
        KDSoapValue _valueCustCommCode = KDSoapValue(QString::fromLatin1("CustCommCode"), QVariant::fromValue(d_ptr->mCustCommCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCustCommCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCustCommCode.setQualified(true);
        _valueCustCommCode.setNillable(true);
        args.append(_valueCustCommCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mExciseCategory_nil) {
        KDSoapValue _valueExciseCategory = d_ptr->mExciseCategory.serialize(QString::fromLatin1("ExciseCategory"));// elementargumentserializer.cpp:108
        _valueExciseCategory.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueExciseCategory.setQualified(true);
        _valueExciseCategory.setNillable(true);
        args.append(_valueExciseCategory);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLastModifiedOn_nil) {
        KDSoapValue _valueLastModifiedOn = KDSoapValue(QString::fromLatin1("LastModifiedOn"), d_ptr->mLastModifiedOn.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueLastModifiedOn.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLastModifiedOn.setQualified(true);
        _valueLastModifiedOn.setNillable(true);
        args.append(_valueLastModifiedOn);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mManufacturerCode_nil) {
        KDSoapValue _valueManufacturerCode = KDSoapValue(QString::fromLatin1("ManufacturerCode"), QVariant::fromValue(d_ptr->mManufacturerCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueManufacturerCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueManufacturerCode.setQualified(true);
        args.append(_valueManufacturerCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName = KDSoapValue(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        args.append(_valueName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingQuantity_nil) {
        KDSoapValue _valuePackagingQuantity = KDSoapValue(QString::fromLatin1("PackagingQuantity"), QVariant::fromValue(d_ptr->mPackagingQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valuePackagingQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingQuantity.setQualified(true);
        _valuePackagingQuantity.setNillable(true);
        args.append(_valuePackagingQuantity);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingUnitOfMeasure_nil) {
        KDSoapValue _valuePackagingUnitOfMeasure = KDSoapValue(QString::fromLatin1("PackagingUnitOfMeasure"), QVariant::fromValue(d_ptr->mPackagingUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valuePackagingUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitOfMeasure.setQualified(true);
        _valuePackagingUnitOfMeasure.setNillable(true);
        args.append(_valuePackagingUnitOfMeasure);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingUnits_nil) {
        KDSoapValue _valuePackagingUnits(d_ptr->mPackagingUnits.serialize(QString::fromLatin1("PackagingUnits")));// elementargumentserializer.cpp:102
        _valuePackagingUnits.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnits.setQualified(true);
        _valuePackagingUnits.setNillable(true);
        args.append(_valuePackagingUnits);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPrices_nil) {
        KDSoapValue _valuePrices(d_ptr->mPrices.serialize(QString::fromLatin1("Prices")));// elementargumentserializer.cpp:102
        _valuePrices.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePrices.setQualified(true);
        _valuePrices.setNillable(true);
        args.append(_valuePrices);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup = KDSoapValue(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        args.append(_valueProductGroup);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mShortName_nil) {
        KDSoapValue _valueShortName = KDSoapValue(QString::fromLatin1("ShortName"), QVariant::fromValue(d_ptr->mShortName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShortName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueShortName.setQualified(true);
        _valueShortName.setNillable(true);
        args.append(_valueShortName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mValidTo_nil) {
        KDSoapValue _valueValidTo = KDSoapValue(QString::fromLatin1("ValidTo"), d_ptr->mValidTo.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueValidTo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidTo.setQualified(true);
        _valueValidTo.setNillable(true);
        args.append(_valueValidTo);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__Product::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BaseBarCode")) {// converter_complextype.cpp:483
            d_ptr->mBaseBarCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mBaseBarCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("BaseUnitOfMeasure")) {// converter_complextype.cpp:483
            d_ptr->mBaseUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mBaseUnitOfMeasure_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("CashRegisterVATCode")) {// converter_complextype.cpp:483
            d_ptr->mCashRegisterVATCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mCashRegisterVATCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Code")) {// converter_complextype.cpp:483
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("CustCommCode")) {// converter_complextype.cpp:483
            d_ptr->mCustCommCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCustCommCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ExciseCategory")) {// converter_complextype.cpp:483
            d_ptr->mExciseCategory.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mExciseCategory_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LastModifiedOn")) {// converter_complextype.cpp:483
            d_ptr->mLastModifiedOn = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mLastModifiedOn_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ManufacturerCode")) {// converter_complextype.cpp:483
            d_ptr->mManufacturerCode = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mManufacturerCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:483
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingQuantity")) {// converter_complextype.cpp:483
            d_ptr->mPackagingQuantity = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mPackagingQuantity_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingUnitOfMeasure")) {// converter_complextype.cpp:483
            d_ptr->mPackagingUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mPackagingUnitOfMeasure_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingUnits")) {// converter_complextype.cpp:483
            d_ptr->mPackagingUnits.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mPackagingUnits_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Prices")) {// converter_complextype.cpp:483
            d_ptr->mPrices.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mPrices_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:483
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ShortName")) {// converter_complextype.cpp:483
            d_ptr->mShortName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShortName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ValidTo")) {// converter_complextype.cpp:483
            d_ptr->mValidTo = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mValidTo_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__Product::NDN__Product()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__Product::~NDN__Product()
{
}

NSMasterData::NDN__Product::NDN__Product( const NSMasterData::NDN__Product& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__Product&  NSMasterData::NDN__Product::operator=( const NSMasterData::NDN__Product& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ProductGroup::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mCode;
    bool mCode_nil;
    bool mIsFixedPrice;
    bool mIsFixedPrice_nil;
    QString mName;
    bool mName_nil;
};

NSMasterData::NDN__ProductGroup::PrivateDPtr::PrivateDPtr()
    : mCode(0), mCode_nil(true), mIsFixedPrice(false), mIsFixedPrice_nil(true), mName_nil(true)
{
}


void NSMasterData::NDN__ProductGroup::setCode( int arg_code )
{
    d_ptr->mCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCode = arg_code;
}

int NSMasterData::NDN__ProductGroup::code() const
{
    return d_ptr->mCode;
}

bool NSMasterData::NDN__ProductGroup::hasValueForCode() const
{
    return d_ptr->mCode_nil == false;
}

void NSMasterData::NDN__ProductGroup::setIsFixedPrice( bool arg_isFixedPrice )
{
    d_ptr->mIsFixedPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mIsFixedPrice = arg_isFixedPrice;
}

bool NSMasterData::NDN__ProductGroup::isFixedPrice() const
{
    return d_ptr->mIsFixedPrice;
}

bool NSMasterData::NDN__ProductGroup::hasValueForIsFixedPrice() const
{
    return d_ptr->mIsFixedPrice_nil == false;
}

void NSMasterData::NDN__ProductGroup::setName( const QString& arg_name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:352
    d_ptr->mName = arg_name;
}

QString NSMasterData::NDN__ProductGroup::name() const
{
    return d_ptr->mName;
}

bool NSMasterData::NDN__ProductGroup::hasValueForName() const
{
    return d_ptr->mName_nil == false;
}

KDSoapValue NSMasterData::NDN__ProductGroup::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ProductGroup"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode = KDSoapValue(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        args.append(_valueCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mIsFixedPrice_nil) {
        KDSoapValue _valueIsFixedPrice = KDSoapValue(QString::fromLatin1("IsFixedPrice"), QVariant::fromValue(d_ptr->mIsFixedPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:106
        _valueIsFixedPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueIsFixedPrice.setQualified(true);
        args.append(_valueIsFixedPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName = KDSoapValue(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        args.append(_valueName);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ProductGroup::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Code")) {// converter_complextype.cpp:483
            d_ptr->mCode = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("IsFixedPrice")) {// converter_complextype.cpp:483
            d_ptr->mIsFixedPrice = val.value().value<bool>();// converter_complextype.cpp:496
            d_ptr->mIsFixedPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:483
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mName_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__ProductGroup::NDN__ProductGroup()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ProductGroup::~NDN__ProductGroup()
{
}

NSMasterData::NDN__ProductGroup::NDN__ProductGroup( const NSMasterData::NDN__ProductGroup& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ProductGroup&  NSMasterData::NDN__ProductGroup::operator=( const NSMasterData::NDN__ProductGroup& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ProductPackagingUnit::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mBarCode;
    bool mBarCode_nil;
    float mMultiplier;
    bool mMultiplier_nil;
    QString mPackagingUnit;
    bool mPackagingUnit_nil;
    QString mPackagingUnitCode;
    bool mPackagingUnitCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
};

NSMasterData::NDN__ProductPackagingUnit::PrivateDPtr::PrivateDPtr()
    : mBarCode_nil(true), mMultiplier(0), mMultiplier_nil(true), mPackagingUnit_nil(true), mPackagingUnitCode_nil(true), mProductCode_nil(true)
{
}


void NSMasterData::NDN__ProductPackagingUnit::setBarCode( const QString& arg_barCode )
{
    d_ptr->mBarCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mBarCode = arg_barCode;
}

QString NSMasterData::NDN__ProductPackagingUnit::barCode() const
{
    return d_ptr->mBarCode;
}

bool NSMasterData::NDN__ProductPackagingUnit::hasValueForBarCode() const
{
    return d_ptr->mBarCode_nil == false;
}

void NSMasterData::NDN__ProductPackagingUnit::setMultiplier( float arg_multiplier )
{
    d_ptr->mMultiplier_nil = false;// converter_complextype.cpp:352
    d_ptr->mMultiplier = arg_multiplier;
}

float NSMasterData::NDN__ProductPackagingUnit::multiplier() const
{
    return d_ptr->mMultiplier;
}

bool NSMasterData::NDN__ProductPackagingUnit::hasValueForMultiplier() const
{
    return d_ptr->mMultiplier_nil == false;
}

void NSMasterData::NDN__ProductPackagingUnit::setPackagingUnit( const QString& arg_packagingUnit )
{
    d_ptr->mPackagingUnit_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingUnit = arg_packagingUnit;
}

QString NSMasterData::NDN__ProductPackagingUnit::packagingUnit() const
{
    return d_ptr->mPackagingUnit;
}

bool NSMasterData::NDN__ProductPackagingUnit::hasValueForPackagingUnit() const
{
    return d_ptr->mPackagingUnit_nil == false;
}

void NSMasterData::NDN__ProductPackagingUnit::setPackagingUnitCode( const QString& arg_packagingUnitCode )
{
    d_ptr->mPackagingUnitCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingUnitCode = arg_packagingUnitCode;
}

QString NSMasterData::NDN__ProductPackagingUnit::packagingUnitCode() const
{
    return d_ptr->mPackagingUnitCode;
}

bool NSMasterData::NDN__ProductPackagingUnit::hasValueForPackagingUnitCode() const
{
    return d_ptr->mPackagingUnitCode_nil == false;
}

void NSMasterData::NDN__ProductPackagingUnit::setProductCode( const QString& arg_productCode )
{
    d_ptr->mProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductCode = arg_productCode;
}

QString NSMasterData::NDN__ProductPackagingUnit::productCode() const
{
    return d_ptr->mProductCode;
}

bool NSMasterData::NDN__ProductPackagingUnit::hasValueForProductCode() const
{
    return d_ptr->mProductCode_nil == false;
}

KDSoapValue NSMasterData::NDN__ProductPackagingUnit::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ProductPackagingUnit"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mBarCode_nil) {
        KDSoapValue _valueBarCode = KDSoapValue(QString::fromLatin1("BarCode"), QVariant::fromValue(d_ptr->mBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBarCode.setQualified(true);
        _valueBarCode.setNillable(true);
        args.append(_valueBarCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mMultiplier_nil) {
        KDSoapValue _valueMultiplier = KDSoapValue(QString::fromLatin1("Multiplier"), QVariant::fromValue(d_ptr->mMultiplier), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueMultiplier.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMultiplier.setQualified(true);
        args.append(_valueMultiplier);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingUnit_nil) {
        KDSoapValue _valuePackagingUnit = KDSoapValue(QString::fromLatin1("PackagingUnit"), QVariant::fromValue(d_ptr->mPackagingUnit), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valuePackagingUnit.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnit.setQualified(true);
        _valuePackagingUnit.setNillable(true);
        args.append(_valuePackagingUnit);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingUnitCode_nil) {
        KDSoapValue _valuePackagingUnitCode = KDSoapValue(QString::fromLatin1("PackagingUnitCode"), QVariant::fromValue(d_ptr->mPackagingUnitCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valuePackagingUnitCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitCode.setQualified(true);
        _valuePackagingUnitCode.setNillable(true);
        args.append(_valuePackagingUnitCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode = KDSoapValue(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        args.append(_valueProductCode);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ProductPackagingUnit::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BarCode")) {// converter_complextype.cpp:483
            d_ptr->mBarCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mBarCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Multiplier")) {// converter_complextype.cpp:483
            d_ptr->mMultiplier = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mMultiplier_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingUnit")) {// converter_complextype.cpp:483
            d_ptr->mPackagingUnit = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mPackagingUnit_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingUnitCode")) {// converter_complextype.cpp:483
            d_ptr->mPackagingUnitCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mPackagingUnitCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductCode")) {// converter_complextype.cpp:483
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductCode_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__ProductPackagingUnit::NDN__ProductPackagingUnit()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ProductPackagingUnit::~NDN__ProductPackagingUnit()
{
}

NSMasterData::NDN__ProductPackagingUnit::NDN__ProductPackagingUnit( const NSMasterData::NDN__ProductPackagingUnit& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ProductPackagingUnit&  NSMasterData::NDN__ProductPackagingUnit::operator=( const NSMasterData::NDN__ProductPackagingUnit& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ProductPrice::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCurrency;
    bool mCurrency_nil;
    int mLineNo;
    bool mLineNo_nil;
    float mPrice;
    bool mPrice_nil;
    NSMasterData::NDN__PriceLevelType mPriceLevelType;
    bool mPriceLevelType_nil;
    QString mProductCode;
    bool mProductCode_nil;
    KDDateTime mValidFrom;
    bool mValidFrom_nil;
    KDDateTime mValidTo;
    bool mValidTo_nil;
};

NSMasterData::NDN__ProductPrice::PrivateDPtr::PrivateDPtr()
    : mCurrency_nil(true), mLineNo(0), mLineNo_nil(true), mPrice(0), mPrice_nil(true), mPriceLevelType_nil(true), mProductCode_nil(true), mValidFrom_nil(true), mValidTo_nil(true)
{
}


void NSMasterData::NDN__ProductPrice::setCurrency( const QString& arg_currency )
{
    d_ptr->mCurrency_nil = false;// converter_complextype.cpp:352
    d_ptr->mCurrency = arg_currency;
}

QString NSMasterData::NDN__ProductPrice::currency() const
{
    return d_ptr->mCurrency;
}

bool NSMasterData::NDN__ProductPrice::hasValueForCurrency() const
{
    return d_ptr->mCurrency_nil == false;
}

void NSMasterData::NDN__ProductPrice::setLineNo( int arg_lineNo )
{
    d_ptr->mLineNo_nil = false;// converter_complextype.cpp:352
    d_ptr->mLineNo = arg_lineNo;
}

int NSMasterData::NDN__ProductPrice::lineNo() const
{
    return d_ptr->mLineNo;
}

bool NSMasterData::NDN__ProductPrice::hasValueForLineNo() const
{
    return d_ptr->mLineNo_nil == false;
}

void NSMasterData::NDN__ProductPrice::setPrice( float arg_price )
{
    d_ptr->mPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mPrice = arg_price;
}

float NSMasterData::NDN__ProductPrice::price() const
{
    return d_ptr->mPrice;
}

bool NSMasterData::NDN__ProductPrice::hasValueForPrice() const
{
    return d_ptr->mPrice_nil == false;
}

void NSMasterData::NDN__ProductPrice::setPriceLevelType( const NSMasterData::NDN__PriceLevelType& arg_priceLevelType )
{
    d_ptr->mPriceLevelType_nil = false;// converter_complextype.cpp:352
    d_ptr->mPriceLevelType = arg_priceLevelType;
}

NSMasterData::NDN__PriceLevelType NSMasterData::NDN__ProductPrice::priceLevelType() const
{
    return d_ptr->mPriceLevelType;
}

bool NSMasterData::NDN__ProductPrice::hasValueForPriceLevelType() const
{
    return d_ptr->mPriceLevelType_nil == false;
}

void NSMasterData::NDN__ProductPrice::setProductCode( const QString& arg_productCode )
{
    d_ptr->mProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductCode = arg_productCode;
}

QString NSMasterData::NDN__ProductPrice::productCode() const
{
    return d_ptr->mProductCode;
}

bool NSMasterData::NDN__ProductPrice::hasValueForProductCode() const
{
    return d_ptr->mProductCode_nil == false;
}

void NSMasterData::NDN__ProductPrice::setValidFrom( const KDDateTime& arg_validFrom )
{
    d_ptr->mValidFrom_nil = false;// converter_complextype.cpp:352
    d_ptr->mValidFrom = arg_validFrom;
}

KDDateTime NSMasterData::NDN__ProductPrice::validFrom() const
{
    return d_ptr->mValidFrom;
}

bool NSMasterData::NDN__ProductPrice::hasValueForValidFrom() const
{
    return d_ptr->mValidFrom_nil == false;
}

void NSMasterData::NDN__ProductPrice::setValidTo( const KDDateTime& arg_validTo )
{
    d_ptr->mValidTo_nil = false;// converter_complextype.cpp:352
    d_ptr->mValidTo = arg_validTo;
}

KDDateTime NSMasterData::NDN__ProductPrice::validTo() const
{
    return d_ptr->mValidTo;
}

bool NSMasterData::NDN__ProductPrice::hasValueForValidTo() const
{
    return d_ptr->mValidTo_nil == false;
}

KDSoapValue NSMasterData::NDN__ProductPrice::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ProductPrice"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCurrency_nil) {
        KDSoapValue _valueCurrency = KDSoapValue(QString::fromLatin1("Currency"), QVariant::fromValue(d_ptr->mCurrency), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCurrency.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCurrency.setQualified(true);
        _valueCurrency.setNillable(true);
        args.append(_valueCurrency);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo = KDSoapValue(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        args.append(_valueLineNo);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPrice_nil) {
        KDSoapValue _valuePrice = KDSoapValue(QString::fromLatin1("Price"), QVariant::fromValue(d_ptr->mPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valuePrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePrice.setQualified(true);
        args.append(_valuePrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPriceLevelType_nil) {
        KDSoapValue _valuePriceLevelType = d_ptr->mPriceLevelType.serialize(QString::fromLatin1("PriceLevelType"));// elementargumentserializer.cpp:108
        _valuePriceLevelType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePriceLevelType.setQualified(true);
        args.append(_valuePriceLevelType);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode = KDSoapValue(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        args.append(_valueProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mValidFrom_nil) {
        KDSoapValue _valueValidFrom = KDSoapValue(QString::fromLatin1("ValidFrom"), d_ptr->mValidFrom.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueValidFrom.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidFrom.setQualified(true);
        _valueValidFrom.setNillable(true);
        args.append(_valueValidFrom);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mValidTo_nil) {
        KDSoapValue _valueValidTo = KDSoapValue(QString::fromLatin1("ValidTo"), d_ptr->mValidTo.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueValidTo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidTo.setQualified(true);
        _valueValidTo.setNillable(true);
        args.append(_valueValidTo);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ProductPrice::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Currency")) {// converter_complextype.cpp:483
            d_ptr->mCurrency = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCurrency_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LineNo")) {// converter_complextype.cpp:483
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mLineNo_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Price")) {// converter_complextype.cpp:483
            d_ptr->mPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PriceLevelType")) {// converter_complextype.cpp:483
            d_ptr->mPriceLevelType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mPriceLevelType_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductCode")) {// converter_complextype.cpp:483
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ValidFrom")) {// converter_complextype.cpp:483
            d_ptr->mValidFrom = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mValidFrom_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ValidTo")) {// converter_complextype.cpp:483
            d_ptr->mValidTo = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mValidTo_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__ProductPrice::NDN__ProductPrice()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ProductPrice::~NDN__ProductPrice()
{
}

NSMasterData::NDN__ProductPrice::NDN__ProductPrice( const NSMasterData::NDN__ProductPrice& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ProductPrice&  NSMasterData::NDN__ProductPrice::operator=( const NSMasterData::NDN__ProductPrice& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMasterData::NDN__ReasonCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMasterData::NDN__ReasonCode_ReasonCodeEnum mCode;
    bool mCode_nil;
    QString mDescription;
    bool mDescription_nil;
    NSMasterData::NDN__MovementType mMovementType;
    bool mMovementType_nil;
};

NSMasterData::NDN__ReasonCode::PrivateDPtr::PrivateDPtr()
    : mCode_nil(true), mDescription_nil(true), mMovementType_nil(true)
{
}


void NSMasterData::NDN__ReasonCode::setCode( const NSMasterData::NDN__ReasonCode_ReasonCodeEnum& arg_code )
{
    d_ptr->mCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCode = arg_code;
}

NSMasterData::NDN__ReasonCode_ReasonCodeEnum NSMasterData::NDN__ReasonCode::code() const
{
    return d_ptr->mCode;
}

bool NSMasterData::NDN__ReasonCode::hasValueForCode() const
{
    return d_ptr->mCode_nil == false;
}

void NSMasterData::NDN__ReasonCode::setDescription( const QString& arg_description )
{
    d_ptr->mDescription_nil = false;// converter_complextype.cpp:352
    d_ptr->mDescription = arg_description;
}

QString NSMasterData::NDN__ReasonCode::description() const
{
    return d_ptr->mDescription;
}

bool NSMasterData::NDN__ReasonCode::hasValueForDescription() const
{
    return d_ptr->mDescription_nil == false;
}

void NSMasterData::NDN__ReasonCode::setMovementType( const NSMasterData::NDN__MovementType& arg_movementType )
{
    d_ptr->mMovementType_nil = false;// converter_complextype.cpp:352
    d_ptr->mMovementType = arg_movementType;
}

NSMasterData::NDN__MovementType NSMasterData::NDN__ReasonCode::movementType() const
{
    return d_ptr->mMovementType;
}

bool NSMasterData::NDN__ReasonCode::hasValueForMovementType() const
{
    return d_ptr->mMovementType_nil == false;
}

KDSoapValue NSMasterData::NDN__ReasonCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode = d_ptr->mCode.serialize(QString::fromLatin1("Code"));// elementargumentserializer.cpp:108
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        args.append(_valueCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mDescription_nil) {
        KDSoapValue _valueDescription = KDSoapValue(QString::fromLatin1("Description"), QVariant::fromValue(d_ptr->mDescription), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueDescription.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDescription.setQualified(true);
        _valueDescription.setNillable(true);
        args.append(_valueDescription);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mMovementType_nil) {
        KDSoapValue _valueMovementType = d_ptr->mMovementType.serialize(QString::fromLatin1("MovementType"));// elementargumentserializer.cpp:108
        _valueMovementType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMovementType.setQualified(true);
        args.append(_valueMovementType);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__ReasonCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Code")) {// converter_complextype.cpp:483
            d_ptr->mCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Description")) {// converter_complextype.cpp:483
            d_ptr->mDescription = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mDescription_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("MovementType")) {// converter_complextype.cpp:483
            d_ptr->mMovementType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mMovementType_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__ReasonCode::NDN__ReasonCode()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__ReasonCode::~NDN__ReasonCode()
{
}

NSMasterData::NDN__ReasonCode::NDN__ReasonCode( const NSMasterData::NDN__ReasonCode& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__ReasonCode&  NSMasterData::NDN__ReasonCode::operator=( const NSMasterData::NDN__ReasonCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMasterData::NDN__ReasonCode_ReasonCodeEnum::NDN__ReasonCode_ReasonCodeEnum( const Type &type )
{
    mType = type;
}

void NSMasterData::NDN__ReasonCode_ReasonCodeEnum::setType( Type type )
{
    mType = type;
}

NSMasterData::NDN__ReasonCode_ReasonCodeEnum::Type NSMasterData::NDN__ReasonCode_ReasonCodeEnum::type() const
{
    return mType;
}

NSMasterData::NDN__ReasonCode_ReasonCodeEnum::operator Type() const
{
    return mType;
}

KDSoapValue NSMasterData::NDN__ReasonCode_ReasonCodeEnum::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMasterData::NDN__ReasonCode_ReasonCodeEnum::Scrapping:
            return KDSoapValue(valueName, "Scrapping", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSMasterData::NDN__ReasonCode_ReasonCodeEnum::Usage:
            return KDSoapValue(valueName, "Usage", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSMasterData::NDN__ReasonCode_ReasonCodeEnum::OtherLoss:
            return KDSoapValue(valueName, "OtherLoss", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSMasterData::NDN__ReasonCode_ReasonCodeEnum::InventoryCorrection:
            return KDSoapValue(valueName, "InventoryCorrection", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSMasterData::NDN__ReasonCode_ReasonCodeEnum::OtherGain:
            return KDSoapValue(valueName, "OtherGain", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMasterData::NDN__ReasonCode_ReasonCodeEnum::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Scrapping", NSMasterData::NDN__ReasonCode_ReasonCodeEnum::Scrapping },
    { "Usage", NSMasterData::NDN__ReasonCode_ReasonCodeEnum::Usage },
    { "OtherLoss", NSMasterData::NDN__ReasonCode_ReasonCodeEnum::OtherLoss },
    { "InventoryCorrection", NSMasterData::NDN__ReasonCode_ReasonCodeEnum::InventoryCorrection },
    { "OtherGain", NSMasterData::NDN__ReasonCode_ReasonCodeEnum::OtherGain }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__ReasonCode_ReasonCodeEnum'.", qPrintable(str) );
}

NSMasterData::NDN__ReasonCode_ReasonCodeEnum::NDN__ReasonCode_ReasonCodeEnum()
    : mType(Type(0))
{
}

NSMasterData::NDN__ReasonCode_ReasonCodeEnum::~NDN__ReasonCode_ReasonCodeEnum()
{
}


NSMasterData::NDN__VATCode::NDN__VATCode( const Type &type )
{
    mType = type;
}

void NSMasterData::NDN__VATCode::setType( Type type )
{
    mType = type;
}

NSMasterData::NDN__VATCode::Type NSMasterData::NDN__VATCode::type() const
{
    return mType;
}

NSMasterData::NDN__VATCode::operator Type() const
{
    return mType;
}

KDSoapValue NSMasterData::NDN__VATCode::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMasterData::NDN__VATCode::A:
            return KDSoapValue(valueName, "A", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::B:
            return KDSoapValue(valueName, "B", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::C:
            return KDSoapValue(valueName, "C", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::D:
            return KDSoapValue(valueName, "D", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::E:
            return KDSoapValue(valueName, "E", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::F:
            return KDSoapValue(valueName, "F", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::G:
            return KDSoapValue(valueName, "G", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::H:
            return KDSoapValue(valueName, "H", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::I:
            return KDSoapValue(valueName, "I", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::J:
            return KDSoapValue(valueName, "J", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSMasterData::NDN__VATCode::K:
            return KDSoapValue(valueName, "K", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMasterData::NDN__VATCode::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[11] = {
    { "A", NSMasterData::NDN__VATCode::A },
    { "B", NSMasterData::NDN__VATCode::B },
    { "C", NSMasterData::NDN__VATCode::C },
    { "D", NSMasterData::NDN__VATCode::D },
    { "E", NSMasterData::NDN__VATCode::E },
    { "F", NSMasterData::NDN__VATCode::F },
    { "G", NSMasterData::NDN__VATCode::G },
    { "H", NSMasterData::NDN__VATCode::H },
    { "I", NSMasterData::NDN__VATCode::I },
    { "J", NSMasterData::NDN__VATCode::J },
    { "K", NSMasterData::NDN__VATCode::K }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 11; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__VATCode'.", qPrintable(str) );
}

NSMasterData::NDN__VATCode::NDN__VATCode()
    : mType(Type(0))
{
}

NSMasterData::NDN__VATCode::~NDN__VATCode()
{
}


class NSMasterData::NDN__VATRate::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    bool mActive;
    bool mActive_nil;
    NSMasterData::NDN__VATCode mCashRegisterVATCode;
    bool mCashRegisterVATCode_nil;
    QString mCode;
    bool mCode_nil;
    QString mName;
    bool mName_nil;
    float mPercentage;
    bool mPercentage_nil;
    NSMasterData::NDN__VATType mType;
    bool mType_nil;
    KDDateTime mValidFrom;
    bool mValidFrom_nil;
};

NSMasterData::NDN__VATRate::PrivateDPtr::PrivateDPtr()
    : mActive(false), mActive_nil(true), mCashRegisterVATCode_nil(true), mCode_nil(true), mName_nil(true), mPercentage(0), mPercentage_nil(true), mType_nil(true), mValidFrom_nil(true)
{
}


void NSMasterData::NDN__VATRate::setActive( bool arg_active )
{
    d_ptr->mActive_nil = false;// converter_complextype.cpp:352
    d_ptr->mActive = arg_active;
}

bool NSMasterData::NDN__VATRate::active() const
{
    return d_ptr->mActive;
}

bool NSMasterData::NDN__VATRate::hasValueForActive() const
{
    return d_ptr->mActive_nil == false;
}

void NSMasterData::NDN__VATRate::setCashRegisterVATCode( const NSMasterData::NDN__VATCode& arg_cashRegisterVATCode )
{
    d_ptr->mCashRegisterVATCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCashRegisterVATCode = arg_cashRegisterVATCode;
}

NSMasterData::NDN__VATCode NSMasterData::NDN__VATRate::cashRegisterVATCode() const
{
    return d_ptr->mCashRegisterVATCode;
}

bool NSMasterData::NDN__VATRate::hasValueForCashRegisterVATCode() const
{
    return d_ptr->mCashRegisterVATCode_nil == false;
}

void NSMasterData::NDN__VATRate::setCode( const QString& arg_code )
{
    d_ptr->mCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCode = arg_code;
}

QString NSMasterData::NDN__VATRate::code() const
{
    return d_ptr->mCode;
}

bool NSMasterData::NDN__VATRate::hasValueForCode() const
{
    return d_ptr->mCode_nil == false;
}

void NSMasterData::NDN__VATRate::setName( const QString& arg_name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:352
    d_ptr->mName = arg_name;
}

QString NSMasterData::NDN__VATRate::name() const
{
    return d_ptr->mName;
}

bool NSMasterData::NDN__VATRate::hasValueForName() const
{
    return d_ptr->mName_nil == false;
}

void NSMasterData::NDN__VATRate::setPercentage( float arg_percentage )
{
    d_ptr->mPercentage_nil = false;// converter_complextype.cpp:352
    d_ptr->mPercentage = arg_percentage;
}

float NSMasterData::NDN__VATRate::percentage() const
{
    return d_ptr->mPercentage;
}

bool NSMasterData::NDN__VATRate::hasValueForPercentage() const
{
    return d_ptr->mPercentage_nil == false;
}

void NSMasterData::NDN__VATRate::setType( const NSMasterData::NDN__VATType& arg_type )
{
    d_ptr->mType_nil = false;// converter_complextype.cpp:352
    d_ptr->mType = arg_type;
}

NSMasterData::NDN__VATType NSMasterData::NDN__VATRate::type() const
{
    return d_ptr->mType;
}

bool NSMasterData::NDN__VATRate::hasValueForType() const
{
    return d_ptr->mType_nil == false;
}

void NSMasterData::NDN__VATRate::setValidFrom( const KDDateTime& arg_validFrom )
{
    d_ptr->mValidFrom_nil = false;// converter_complextype.cpp:352
    d_ptr->mValidFrom = arg_validFrom;
}

KDDateTime NSMasterData::NDN__VATRate::validFrom() const
{
    return d_ptr->mValidFrom;
}

bool NSMasterData::NDN__VATRate::hasValueForValidFrom() const
{
    return d_ptr->mValidFrom_nil == false;
}

KDSoapValue NSMasterData::NDN__VATRate::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATRate"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mActive_nil) {
        KDSoapValue _valueActive = KDSoapValue(QString::fromLatin1("Active"), QVariant::fromValue(d_ptr->mActive), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("boolean"));// elementargumentserializer.cpp:106
        _valueActive.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueActive.setQualified(true);
        args.append(_valueActive);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCashRegisterVATCode_nil) {
        KDSoapValue _valueCashRegisterVATCode = d_ptr->mCashRegisterVATCode.serialize(QString::fromLatin1("CashRegisterVATCode"));// elementargumentserializer.cpp:108
        _valueCashRegisterVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCashRegisterVATCode.setQualified(true);
        args.append(_valueCashRegisterVATCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode = KDSoapValue(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        _valueCode.setNillable(true);
        args.append(_valueCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName = KDSoapValue(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        args.append(_valueName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPercentage_nil) {
        KDSoapValue _valuePercentage = KDSoapValue(QString::fromLatin1("Percentage"), QVariant::fromValue(d_ptr->mPercentage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valuePercentage.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePercentage.setQualified(true);
        args.append(_valuePercentage);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mType_nil) {
        KDSoapValue _valueType = d_ptr->mType.serialize(QString::fromLatin1("Type"));// elementargumentserializer.cpp:108
        _valueType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueType.setQualified(true);
        args.append(_valueType);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mValidFrom_nil) {
        KDSoapValue _valueValidFrom = KDSoapValue(QString::fromLatin1("ValidFrom"), d_ptr->mValidFrom.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueValidFrom.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueValidFrom.setQualified(true);
        args.append(_valueValidFrom);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMasterData::NDN__VATRate::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Active")) {// converter_complextype.cpp:483
            d_ptr->mActive = val.value().value<bool>();// converter_complextype.cpp:496
            d_ptr->mActive_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("CashRegisterVATCode")) {// converter_complextype.cpp:483
            d_ptr->mCashRegisterVATCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mCashRegisterVATCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Code")) {// converter_complextype.cpp:483
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:483
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Percentage")) {// converter_complextype.cpp:483
            d_ptr->mPercentage = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mPercentage_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Type")) {// converter_complextype.cpp:483
            d_ptr->mType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mType_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ValidFrom")) {// converter_complextype.cpp:483
            d_ptr->mValidFrom = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mValidFrom_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMasterData::NDN__VATRate::NDN__VATRate()
    : d_ptr(new PrivateDPtr)
{
}

NSMasterData::NDN__VATRate::~NDN__VATRate()
{
}

NSMasterData::NDN__VATRate::NDN__VATRate( const NSMasterData::NDN__VATRate& other )
    : d_ptr( other.d_ptr )
{
}

NSMasterData::NDN__VATRate&  NSMasterData::NDN__VATRate::operator=( const NSMasterData::NDN__VATRate& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMasterData::NDN__VATType::NDN__VATType( const Type &type )
{
    mType = type;
}

void NSMasterData::NDN__VATType::setType( Type type )
{
    mType = type;
}

NSMasterData::NDN__VATType::Type NSMasterData::NDN__VATType::type() const
{
    return mType;
}

NSMasterData::NDN__VATType::operator Type() const
{
    return mType;
}

KDSoapValue NSMasterData::NDN__VATType::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMasterData::NDN__VATType::SALES:
            return KDSoapValue(valueName, "SALES", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATType"));
        case NSMasterData::NDN__VATType::PURCHASE:
            return KDSoapValue(valueName, "PURCHASE", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATType"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMasterData::NDN__VATType::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[2] = {
    { "SALES", NSMasterData::NDN__VATType::SALES },
    { "PURCHASE", NSMasterData::NDN__VATType::PURCHASE }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 2; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__VATType'.", qPrintable(str) );
}

NSMasterData::NDN__VATType::NDN__VATType()
    : mType(Type(0))
{
}

NSMasterData::NDN__VATType::~NDN__VATType()
{
}


NSMasterData::GetCurrentVATRatesJob::GetCurrentVATRatesJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetCurrentVATRatesJob::setParameters( const NSMasterData::NDN_COMM__GetCurrentVATRates& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetCurrentVATRates NSMasterData::GetCurrentVATRatesJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetCurrentVATRatesJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetCurrentVATRates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCurrentVATRates(mParameters.serialize(QString::fromLatin1("GetCurrentVATRates")));// elementargumentserializer.cpp:102
    _valueGetCurrentVATRates.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetCurrentVATRates.setQualified(true);
    message = _valueGetCurrentVATRates;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetCurrentVATRates"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse NSMasterData::GetCurrentVATRatesJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetCurrentVATRatesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetManufacturersJob::GetManufacturersJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetManufacturersJob::setParameters( const NSMasterData::NDN_COMM__GetManufacturers& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetManufacturers NSMasterData::GetManufacturersJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetManufacturersJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetManufacturers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetManufacturers(mParameters.serialize(QString::fromLatin1("GetManufacturers")));// elementargumentserializer.cpp:102
    _valueGetManufacturers.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetManufacturers.setQualified(true);
    message = _valueGetManufacturers;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetManufacturers"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetManufacturersResponse NSMasterData::GetManufacturersJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetManufacturersJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetProductGroupsJob::GetProductGroupsJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductGroupsJob::setParameters( const NSMasterData::NDN_COMM__GetProductGroups& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetProductGroups NSMasterData::GetProductGroupsJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductGroupsJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductGroups");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductGroups(mParameters.serialize(QString::fromLatin1("GetProductGroups")));// elementargumentserializer.cpp:102
    _valueGetProductGroups.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductGroups.setQualified(true);
    message = _valueGetProductGroups;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductGroups"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetProductGroupsResponse NSMasterData::GetProductGroupsJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductGroupsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetProductPricesJob::GetProductPricesJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductPricesJob::setParameters( const NSMasterData::NDN_COMM__GetProductPrices& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetProductPrices NSMasterData::GetProductPricesJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductPricesJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPrices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPrices(mParameters.serialize(QString::fromLatin1("GetProductPrices")));// elementargumentserializer.cpp:102
    _valueGetProductPrices.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPrices.setQualified(true);
    message = _valueGetProductPrices;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductPrices"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetProductPricesResponse NSMasterData::GetProductPricesJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductPricesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetProductPricesOfJob::GetProductPricesOfJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductPricesOfJob::setParameters( const NSMasterData::NDN_COMM__GetProductPricesOf& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetProductPricesOf NSMasterData::GetProductPricesOfJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductPricesOfJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPricesOf");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPricesOf(mParameters.serialize(QString::fromLatin1("GetProductPricesOf")));// elementargumentserializer.cpp:102
    _valueGetProductPricesOf.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPricesOf.setQualified(true);
    message = _valueGetProductPricesOf;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductPricesOf"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetProductPricesOfResponse NSMasterData::GetProductPricesOfJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductPricesOfJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetProductsJob::GetProductsJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductsJob::setParameters( const NSMasterData::NDN_COMM__GetProducts& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetProducts NSMasterData::GetProductsJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductsJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProducts");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProducts(mParameters.serialize(QString::fromLatin1("GetProducts")));// elementargumentserializer.cpp:102
    _valueGetProducts.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProducts.setQualified(true);
    message = _valueGetProducts;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProducts"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetProductsResponse NSMasterData::GetProductsJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductsJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetProductsSinceJob::GetProductsSinceJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetProductsSinceJob::setParameters( const NSMasterData::NDN_COMM__GetProductsSince& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetProductsSince NSMasterData::GetProductsSinceJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetProductsSinceJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductsSince");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductsSince(mParameters.serialize(QString::fromLatin1("GetProductsSince")));// elementargumentserializer.cpp:102
    _valueGetProductsSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductsSince.setQualified(true);
    message = _valueGetProductsSince;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetProductsSince"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetProductsSinceResponse NSMasterData::GetProductsSinceJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetProductsSinceJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMasterData::GetReasonCodesJob::GetReasonCodesJob( NSMasterData::MasterData* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMasterData::GetReasonCodesJob::setParameters( const NSMasterData::NDN_COMM__GetReasonCodes& arg0 )
{
    mParameters = arg0;
}

NSMasterData::NDN_COMM__GetReasonCodes NSMasterData::GetReasonCodesJob::parameters() const
{
    return mParameters;
}

void NSMasterData::GetReasonCodesJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetReasonCodes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetReasonCodes(mParameters.serialize(QString::fromLatin1("GetReasonCodes")));// elementargumentserializer.cpp:102
    _valueGetReasonCodes.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetReasonCodes.setQualified(true);
    message = _valueGetReasonCodes;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetReasonCodes"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMasterData::NDN_COMM__GetReasonCodesResponse NSMasterData::GetReasonCodesJob::resultParameters() const
{
    return mResultParameters;
}

void NSMasterData::GetReasonCodesJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class NSMasterData::MasterData::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

NSMasterData::MasterData::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


NSMasterData::MasterData::MasterData( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

NSMasterData::MasterData::~MasterData()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void NSMasterData::MasterData::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void NSMasterData::MasterData::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

QString NSMasterData::MasterData::endPoint() const
{
    return d_ptr->m_endPoint;
}

void NSMasterData::MasterData::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

KDSoapClientInterface::SoapVersion NSMasterData::MasterData::soapVersion() const
{
    return clientInterface()->soapVersion();
}

int NSMasterData::MasterData::lastErrorCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toInt();
    return 0;
}

QString NSMasterData::MasterData::lastFaultCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toString();
    return QString();
}

QString NSMasterData::MasterData::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *NSMasterData::MasterData::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://adatkuldes-teszt.nemzetidohany.gov.hu:8444/ndc/MasterData.svc");
        const QString messageNamespace = QString::fromLatin1("http://tempuri.org/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *NSMasterData::MasterData::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const MasterData*>( this )->clientInterface() );
}

NSMasterData::NDN_COMM__GetCurrentVATRatesResponse NSMasterData::MasterData::getCurrentVATRates( const NSMasterData::NDN_COMM__GetCurrentVATRates& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetCurrentVATRates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCurrentVATRates(parameters.serialize(QString::fromLatin1("GetCurrentVATRates")));// elementargumentserializer.cpp:102
    _valueGetCurrentVATRates.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetCurrentVATRates.setQualified(true);
    message = _valueGetCurrentVATRates;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetCurrentVATRates"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetCurrentVATRatesResponse();
    NSMasterData::NDN_COMM__GetCurrentVATRatesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetCurrentVATRates( const NSMasterData::NDN_COMM__GetCurrentVATRates& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetCurrentVATRates");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetCurrentVATRates(parameters.serialize(QString::fromLatin1("GetCurrentVATRates")));// elementargumentserializer.cpp:102
    _valueGetCurrentVATRates.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetCurrentVATRates.setQualified(true);
    message = _valueGetCurrentVATRates;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetCurrentVATRates"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetCurrentVATRatesFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetCurrentVATRatesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getCurrentVATRatesError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getCurrentVATRates"), reply);
    } else {
        NSMasterData::NDN_COMM__GetCurrentVATRatesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getCurrentVATRatesDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetManufacturersResponse NSMasterData::MasterData::getManufacturers( const NSMasterData::NDN_COMM__GetManufacturers& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetManufacturers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetManufacturers(parameters.serialize(QString::fromLatin1("GetManufacturers")));// elementargumentserializer.cpp:102
    _valueGetManufacturers.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetManufacturers.setQualified(true);
    message = _valueGetManufacturers;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetManufacturers"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetManufacturersResponse();
    NSMasterData::NDN_COMM__GetManufacturersResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetManufacturers( const NSMasterData::NDN_COMM__GetManufacturers& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetManufacturers");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetManufacturers(parameters.serialize(QString::fromLatin1("GetManufacturers")));// elementargumentserializer.cpp:102
    _valueGetManufacturers.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetManufacturers.setQualified(true);
    message = _valueGetManufacturers;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetManufacturers"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetManufacturersFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetManufacturersFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getManufacturersError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getManufacturers"), reply);
    } else {
        NSMasterData::NDN_COMM__GetManufacturersResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getManufacturersDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetProductGroupsResponse NSMasterData::MasterData::getProductGroups( const NSMasterData::NDN_COMM__GetProductGroups& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductGroups");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductGroups(parameters.serialize(QString::fromLatin1("GetProductGroups")));// elementargumentserializer.cpp:102
    _valueGetProductGroups.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductGroups.setQualified(true);
    message = _valueGetProductGroups;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductGroups"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetProductGroupsResponse();
    NSMasterData::NDN_COMM__GetProductGroupsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetProductGroups( const NSMasterData::NDN_COMM__GetProductGroups& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductGroups");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductGroups(parameters.serialize(QString::fromLatin1("GetProductGroups")));// elementargumentserializer.cpp:102
    _valueGetProductGroups.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductGroups.setQualified(true);
    message = _valueGetProductGroups;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductGroups"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductGroupsFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductGroupsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductGroupsError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getProductGroups"), reply);
    } else {
        NSMasterData::NDN_COMM__GetProductGroupsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getProductGroupsDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetProductsResponse NSMasterData::MasterData::getProducts( const NSMasterData::NDN_COMM__GetProducts& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProducts");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProducts(parameters.serialize(QString::fromLatin1("GetProducts")));// elementargumentserializer.cpp:102
    _valueGetProducts.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProducts.setQualified(true);
    message = _valueGetProducts;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProducts"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetProductsResponse();
    NSMasterData::NDN_COMM__GetProductsResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetProducts( const NSMasterData::NDN_COMM__GetProducts& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProducts");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProducts(parameters.serialize(QString::fromLatin1("GetProducts")));// elementargumentserializer.cpp:102
    _valueGetProducts.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProducts.setQualified(true);
    message = _valueGetProducts;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProducts"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductsFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductsFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductsError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getProducts"), reply);
    } else {
        NSMasterData::NDN_COMM__GetProductsResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getProductsDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetProductsSinceResponse NSMasterData::MasterData::getProductsSince( const NSMasterData::NDN_COMM__GetProductsSince& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductsSince");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductsSince(parameters.serialize(QString::fromLatin1("GetProductsSince")));// elementargumentserializer.cpp:102
    _valueGetProductsSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductsSince.setQualified(true);
    message = _valueGetProductsSince;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductsSince"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetProductsSinceResponse();
    NSMasterData::NDN_COMM__GetProductsSinceResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetProductsSince( const NSMasterData::NDN_COMM__GetProductsSince& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductsSince");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductsSince(parameters.serialize(QString::fromLatin1("GetProductsSince")));// elementargumentserializer.cpp:102
    _valueGetProductsSince.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductsSince.setQualified(true);
    message = _valueGetProductsSince;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductsSince"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductsSinceFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductsSinceFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductsSinceError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getProductsSince"), reply);
    } else {
        NSMasterData::NDN_COMM__GetProductsSinceResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getProductsSinceDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetProductPricesResponse NSMasterData::MasterData::getProductPrices( const NSMasterData::NDN_COMM__GetProductPrices& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPrices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPrices(parameters.serialize(QString::fromLatin1("GetProductPrices")));// elementargumentserializer.cpp:102
    _valueGetProductPrices.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPrices.setQualified(true);
    message = _valueGetProductPrices;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductPrices"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetProductPricesResponse();
    NSMasterData::NDN_COMM__GetProductPricesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetProductPrices( const NSMasterData::NDN_COMM__GetProductPrices& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPrices");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPrices(parameters.serialize(QString::fromLatin1("GetProductPrices")));// elementargumentserializer.cpp:102
    _valueGetProductPrices.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPrices.setQualified(true);
    message = _valueGetProductPrices;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductPrices"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductPricesFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductPricesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductPricesError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getProductPrices"), reply);
    } else {
        NSMasterData::NDN_COMM__GetProductPricesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getProductPricesDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetProductPricesOfResponse NSMasterData::MasterData::getProductPricesOf( const NSMasterData::NDN_COMM__GetProductPricesOf& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPricesOf");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPricesOf(parameters.serialize(QString::fromLatin1("GetProductPricesOf")));// elementargumentserializer.cpp:102
    _valueGetProductPricesOf.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPricesOf.setQualified(true);
    message = _valueGetProductPricesOf;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetProductPricesOf"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetProductPricesOfResponse();
    NSMasterData::NDN_COMM__GetProductPricesOfResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetProductPricesOf( const NSMasterData::NDN_COMM__GetProductPricesOf& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetProductPricesOf");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetProductPricesOf(parameters.serialize(QString::fromLatin1("GetProductPricesOf")));// elementargumentserializer.cpp:102
    _valueGetProductPricesOf.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetProductPricesOf.setQualified(true);
    message = _valueGetProductPricesOf;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetProductPricesOf"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetProductPricesOfFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetProductPricesOfFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getProductPricesOfError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getProductPricesOf"), reply);
    } else {
        NSMasterData::NDN_COMM__GetProductPricesOfResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getProductPricesOfDone( ret );
    }
    watcher->deleteLater();
}

NSMasterData::NDN_COMM__GetReasonCodesResponse NSMasterData::MasterData::getReasonCodes( const NSMasterData::NDN_COMM__GetReasonCodes& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetReasonCodes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetReasonCodes(parameters.serialize(QString::fromLatin1("GetReasonCodes")));// elementargumentserializer.cpp:102
    _valueGetReasonCodes.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetReasonCodes.setQualified(true);
    message = _valueGetReasonCodes;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetReasonCodes"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMasterData::NDN_COMM__GetReasonCodesResponse();
    NSMasterData::NDN_COMM__GetReasonCodesResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMasterData::MasterData::asyncGetReasonCodes( const NSMasterData::NDN_COMM__GetReasonCodes& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMasterData/GetReasonCodes");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetReasonCodes(parameters.serialize(QString::fromLatin1("GetReasonCodes")));// elementargumentserializer.cpp:102
    _valueGetReasonCodes.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetReasonCodes.setQualified(true);
    message = _valueGetReasonCodes;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetReasonCodes"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetReasonCodesFinished(KDSoapPendingCallWatcher*)));
}

void NSMasterData::MasterData::_kd_slotGetReasonCodesFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getReasonCodesError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getReasonCodes"), reply);
    } else {
        NSMasterData::NDN_COMM__GetReasonCodesResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getReasonCodesDone( ret );
    }
    watcher->deleteLater();
}


