// This file is generated by KDAB's kdwsdl2cpp from Monitoring.svc?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "Monitoring.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

class NSMonitoring::NDN_COMM__GetDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    QString mLocalDocumentId;
    bool mLocalDocumentId_nil;
    NSMonitoring::NDN__MovementType mMovementType;
    bool mMovementType_nil;
};

NSMonitoring::NDN_COMM__GetDocument::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mLocalDocumentId_nil(true), mMovementType_nil(true)
{
}


void NSMonitoring::NDN_COMM__GetDocument::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMonitoring::NDN_COMM__GetDocument::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMonitoring::NDN_COMM__GetDocument::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSMonitoring::NDN_COMM__GetDocument::setLocalDocumentId( const QString& arg_localDocumentId )
{
    d_ptr->mLocalDocumentId_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalDocumentId = arg_localDocumentId;
}

QString NSMonitoring::NDN_COMM__GetDocument::localDocumentId() const
{
    return d_ptr->mLocalDocumentId;
}

bool NSMonitoring::NDN_COMM__GetDocument::hasValueForLocalDocumentId() const
{
    return d_ptr->mLocalDocumentId_nil == false;
}

void NSMonitoring::NDN_COMM__GetDocument::setMovementType( const NSMonitoring::NDN__MovementType& arg_movementType )
{
    d_ptr->mMovementType_nil = false;// converter_complextype.cpp:352
    d_ptr->mMovementType = arg_movementType;
}

NSMonitoring::NDN__MovementType NSMonitoring::NDN_COMM__GetDocument::movementType() const
{
    return d_ptr->mMovementType;
}

bool NSMonitoring::NDN_COMM__GetDocument::hasValueForMovementType() const
{
    return d_ptr->mMovementType_nil == false;
}

KDSoapValue NSMonitoring::NDN_COMM__GetDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetDocument"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalDocumentId_nil) {
        KDSoapValue _valueLocalDocumentId = KDSoapValue(QString::fromLatin1("localDocumentId"), QVariant::fromValue(d_ptr->mLocalDocumentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalDocumentId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueLocalDocumentId.setQualified(true);
        _valueLocalDocumentId.setNillable(true);
        args.append(_valueLocalDocumentId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mMovementType_nil) {
        KDSoapValue _valueMovementType = d_ptr->mMovementType.serialize(QString::fromLatin1("movementType"));// elementargumentserializer.cpp:108
        _valueMovementType.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueMovementType.setQualified(true);
        args.append(_valueMovementType);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN_COMM__GetDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("localDocumentId")) {// converter_complextype.cpp:483
            d_ptr->mLocalDocumentId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalDocumentId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("movementType")) {// converter_complextype.cpp:483
            d_ptr->mMovementType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mMovementType_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN_COMM__GetDocument::NDN_COMM__GetDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN_COMM__GetDocument::~NDN_COMM__GetDocument()
{
}

NSMonitoring::NDN_COMM__GetDocument::NDN_COMM__GetDocument( const NSMonitoring::NDN_COMM__GetDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN_COMM__GetDocument&  NSMonitoring::NDN_COMM__GetDocument::operator=( const NSMonitoring::NDN_COMM__GetDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN_COMM__GetDocumentResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::NDN__Entity mGetDocumentResult;
    bool mGetDocumentResult_nil;
};

NSMonitoring::NDN_COMM__GetDocumentResponse::PrivateDPtr::PrivateDPtr()
    : mGetDocumentResult_nil(true)
{
}


void NSMonitoring::NDN_COMM__GetDocumentResponse::setGetDocumentResult( const NSMonitoring::NDN__Entity& arg_getDocumentResult )
{
    d_ptr->mGetDocumentResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetDocumentResult = arg_getDocumentResult;
}

NSMonitoring::NDN__Entity NSMonitoring::NDN_COMM__GetDocumentResponse::getDocumentResult() const
{
    return d_ptr->mGetDocumentResult;
}

bool NSMonitoring::NDN_COMM__GetDocumentResponse::hasValueForGetDocumentResult() const
{
    return d_ptr->mGetDocumentResult_nil == false;
}

KDSoapValue NSMonitoring::NDN_COMM__GetDocumentResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetDocumentResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetDocumentResult_nil) {
        KDSoapValue _valueGetDocumentResult(d_ptr->mGetDocumentResult.serialize(QString::fromLatin1("GetDocumentResult")));// elementargumentserializer.cpp:102
        _valueGetDocumentResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetDocumentResult.setQualified(true);
        _valueGetDocumentResult.setNillable(true);
        args.append(_valueGetDocumentResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN_COMM__GetDocumentResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetDocumentResult")) {// converter_complextype.cpp:483
            d_ptr->mGetDocumentResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetDocumentResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN_COMM__GetDocumentResponse::NDN_COMM__GetDocumentResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN_COMM__GetDocumentResponse::~NDN_COMM__GetDocumentResponse()
{
}

NSMonitoring::NDN_COMM__GetDocumentResponse::NDN_COMM__GetDocumentResponse( const NSMonitoring::NDN_COMM__GetDocumentResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN_COMM__GetDocumentResponse&  NSMonitoring::NDN_COMM__GetDocumentResponse::operator=( const NSMonitoring::NDN_COMM__GetDocumentResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN_COMM__GetOpeningStock::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    KDDateTime mCreationDate;
    bool mCreationDate_nil;
};

NSMonitoring::NDN_COMM__GetOpeningStock::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mCreationDate_nil(true)
{
}


void NSMonitoring::NDN_COMM__GetOpeningStock::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSMonitoring::NDN_COMM__GetOpeningStock::shopId() const
{
    return d_ptr->mShopId;
}

bool NSMonitoring::NDN_COMM__GetOpeningStock::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSMonitoring::NDN_COMM__GetOpeningStock::setCreationDate( const KDDateTime& arg_creationDate )
{
    d_ptr->mCreationDate_nil = false;// converter_complextype.cpp:352
    d_ptr->mCreationDate = arg_creationDate;
}

KDDateTime NSMonitoring::NDN_COMM__GetOpeningStock::creationDate() const
{
    return d_ptr->mCreationDate;
}

bool NSMonitoring::NDN_COMM__GetOpeningStock::hasValueForCreationDate() const
{
    return d_ptr->mCreationDate_nil == false;
}

KDSoapValue NSMonitoring::NDN_COMM__GetOpeningStock::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetOpeningStock"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCreationDate_nil) {
        KDSoapValue _valueCreationDate = KDSoapValue(QString::fromLatin1("creationDate"), d_ptr->mCreationDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueCreationDate.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreationDate.setQualified(true);
        args.append(_valueCreationDate);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN_COMM__GetOpeningStock::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("creationDate")) {// converter_complextype.cpp:483
            d_ptr->mCreationDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mCreationDate_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN_COMM__GetOpeningStock::NDN_COMM__GetOpeningStock()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN_COMM__GetOpeningStock::~NDN_COMM__GetOpeningStock()
{
}

NSMonitoring::NDN_COMM__GetOpeningStock::NDN_COMM__GetOpeningStock( const NSMonitoring::NDN_COMM__GetOpeningStock& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN_COMM__GetOpeningStock&  NSMonitoring::NDN_COMM__GetOpeningStock::operator=( const NSMonitoring::NDN_COMM__GetOpeningStock& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN_COMM__GetOpeningStockResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::NDN__Entity mGetOpeningStockResult;
    bool mGetOpeningStockResult_nil;
};

NSMonitoring::NDN_COMM__GetOpeningStockResponse::PrivateDPtr::PrivateDPtr()
    : mGetOpeningStockResult_nil(true)
{
}


void NSMonitoring::NDN_COMM__GetOpeningStockResponse::setGetOpeningStockResult( const NSMonitoring::NDN__Entity& arg_getOpeningStockResult )
{
    d_ptr->mGetOpeningStockResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mGetOpeningStockResult = arg_getOpeningStockResult;
}

NSMonitoring::NDN__Entity NSMonitoring::NDN_COMM__GetOpeningStockResponse::getOpeningStockResult() const
{
    return d_ptr->mGetOpeningStockResult;
}

bool NSMonitoring::NDN_COMM__GetOpeningStockResponse::hasValueForGetOpeningStockResult() const
{
    return d_ptr->mGetOpeningStockResult_nil == false;
}

KDSoapValue NSMonitoring::NDN_COMM__GetOpeningStockResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetOpeningStockResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mGetOpeningStockResult_nil) {
        KDSoapValue _valueGetOpeningStockResult(d_ptr->mGetOpeningStockResult.serialize(QString::fromLatin1("GetOpeningStockResult")));// elementargumentserializer.cpp:102
        _valueGetOpeningStockResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetOpeningStockResult.setQualified(true);
        _valueGetOpeningStockResult.setNillable(true);
        args.append(_valueGetOpeningStockResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN_COMM__GetOpeningStockResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("GetOpeningStockResult")) {// converter_complextype.cpp:483
            d_ptr->mGetOpeningStockResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mGetOpeningStockResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN_COMM__GetOpeningStockResponse::NDN_COMM__GetOpeningStockResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN_COMM__GetOpeningStockResponse::~NDN_COMM__GetOpeningStockResponse()
{
}

NSMonitoring::NDN_COMM__GetOpeningStockResponse::NDN_COMM__GetOpeningStockResponse( const NSMonitoring::NDN_COMM__GetOpeningStockResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN_COMM__GetOpeningStockResponse&  NSMonitoring::NDN_COMM__GetOpeningStockResponse::operator=( const NSMonitoring::NDN_COMM__GetOpeningStockResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN_COMM__Wait::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mSec;
    bool mSec_nil;
};

NSMonitoring::NDN_COMM__Wait::PrivateDPtr::PrivateDPtr()
    : mSec(0), mSec_nil(true)
{
}


void NSMonitoring::NDN_COMM__Wait::setSec( int arg_sec )
{
    d_ptr->mSec_nil = false;// converter_complextype.cpp:352
    d_ptr->mSec = arg_sec;
}

int NSMonitoring::NDN_COMM__Wait::sec() const
{
    return d_ptr->mSec;
}

bool NSMonitoring::NDN_COMM__Wait::hasValueForSec() const
{
    return d_ptr->mSec_nil == false;
}

KDSoapValue NSMonitoring::NDN_COMM__Wait::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("Wait"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mSec_nil) {
        KDSoapValue _valueSec = KDSoapValue(QString::fromLatin1("sec"), QVariant::fromValue(d_ptr->mSec), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueSec.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueSec.setQualified(true);
        args.append(_valueSec);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN_COMM__Wait::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("sec")) {// converter_complextype.cpp:483
            d_ptr->mSec = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mSec_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN_COMM__Wait::NDN_COMM__Wait()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN_COMM__Wait::~NDN_COMM__Wait()
{
}

NSMonitoring::NDN_COMM__Wait::NDN_COMM__Wait( const NSMonitoring::NDN_COMM__Wait& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN_COMM__Wait&  NSMonitoring::NDN_COMM__Wait::operator=( const NSMonitoring::NDN_COMM__Wait& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue NSMonitoring::NDN_COMM__WaitResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("WaitResponse"));// converter_complextype.cpp:606
    return mainValue;
}

void NSMonitoring::NDN_COMM__WaitResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:637
}

NSMonitoring::NDN_COMM__WaitResponse::NDN_COMM__WaitResponse()
{
}

NSMonitoring::NDN_COMM__WaitResponse::~NDN_COMM__WaitResponse()
{
}


class NSMonitoring::NDN__ArrayOfColumn::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMonitoring::NDN__Column > mColumn;
    bool mColumn_nil;
};

NSMonitoring::NDN__ArrayOfColumn::PrivateDPtr::PrivateDPtr()
    : mColumn_nil(true)
{
}


void NSMonitoring::NDN__ArrayOfColumn::setColumn( const QList< NSMonitoring::NDN__Column >& arg_column )
{
    d_ptr->mColumn_nil = false;// converter_complextype.cpp:352
    d_ptr->mColumn = arg_column;
}

QList< NSMonitoring::NDN__Column > NSMonitoring::NDN__ArrayOfColumn::column() const
{
    return d_ptr->mColumn;
}

bool NSMonitoring::NDN__ArrayOfColumn::hasValueForColumn() const
{
    return d_ptr->mColumn_nil == false;
}

KDSoapValue NSMonitoring::NDN__ArrayOfColumn::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfColumn"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mColumn.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueColumn(d_ptr->mColumn.at(i).serialize(QString::fromLatin1("Column")));// elementargumentserializer.cpp:102
        _valueColumn.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueColumn.setQualified(true);
        _valueColumn.setNillable(true);
        args.append(_valueColumn);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN__ArrayOfColumn::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Column")) {// converter_complextype.cpp:483
            NSMonitoring::NDN__Column mColumnTemp;// converter_complextype.cpp:541
            mColumnTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mColumn.append(mColumnTemp);// converter_complextype.cpp:549
            d_ptr->mColumn_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMonitoring::NDN__ArrayOfColumn::NDN__ArrayOfColumn()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__ArrayOfColumn::~NDN__ArrayOfColumn()
{
}

NSMonitoring::NDN__ArrayOfColumn::NDN__ArrayOfColumn( const NSMonitoring::NDN__ArrayOfColumn& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__ArrayOfColumn&  NSMonitoring::NDN__ArrayOfColumn::operator=( const NSMonitoring::NDN__ArrayOfColumn& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN__ArrayOfRecord::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMonitoring::NDN__Record > mRecord;
    bool mRecord_nil;
};

NSMonitoring::NDN__ArrayOfRecord::PrivateDPtr::PrivateDPtr()
    : mRecord_nil(true)
{
}


void NSMonitoring::NDN__ArrayOfRecord::setRecord( const QList< NSMonitoring::NDN__Record >& arg_record )
{
    d_ptr->mRecord_nil = false;// converter_complextype.cpp:352
    d_ptr->mRecord = arg_record;
}

QList< NSMonitoring::NDN__Record > NSMonitoring::NDN__ArrayOfRecord::record() const
{
    return d_ptr->mRecord;
}

bool NSMonitoring::NDN__ArrayOfRecord::hasValueForRecord() const
{
    return d_ptr->mRecord_nil == false;
}

KDSoapValue NSMonitoring::NDN__ArrayOfRecord::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfRecord"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mRecord.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueRecord(d_ptr->mRecord.at(i).serialize(QString::fromLatin1("Record")));// elementargumentserializer.cpp:102
        _valueRecord.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueRecord.setQualified(true);
        _valueRecord.setNillable(true);
        args.append(_valueRecord);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN__ArrayOfRecord::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Record")) {// converter_complextype.cpp:483
            NSMonitoring::NDN__Record mRecordTemp;// converter_complextype.cpp:541
            mRecordTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mRecord.append(mRecordTemp);// converter_complextype.cpp:549
            d_ptr->mRecord_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMonitoring::NDN__ArrayOfRecord::NDN__ArrayOfRecord()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__ArrayOfRecord::~NDN__ArrayOfRecord()
{
}

NSMonitoring::NDN__ArrayOfRecord::NDN__ArrayOfRecord( const NSMonitoring::NDN__ArrayOfRecord& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__ArrayOfRecord&  NSMonitoring::NDN__ArrayOfRecord::operator=( const NSMonitoring::NDN__ArrayOfRecord& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN__ArrayOfTableContent::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSMonitoring::NDN__TableContent > mTableContent;
    bool mTableContent_nil;
};

NSMonitoring::NDN__ArrayOfTableContent::PrivateDPtr::PrivateDPtr()
    : mTableContent_nil(true)
{
}


void NSMonitoring::NDN__ArrayOfTableContent::setTableContent( const QList< NSMonitoring::NDN__TableContent >& arg_tableContent )
{
    d_ptr->mTableContent_nil = false;// converter_complextype.cpp:352
    d_ptr->mTableContent = arg_tableContent;
}

QList< NSMonitoring::NDN__TableContent > NSMonitoring::NDN__ArrayOfTableContent::tableContent() const
{
    return d_ptr->mTableContent;
}

bool NSMonitoring::NDN__ArrayOfTableContent::hasValueForTableContent() const
{
    return d_ptr->mTableContent_nil == false;
}

KDSoapValue NSMonitoring::NDN__ArrayOfTableContent::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfTableContent"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mTableContent.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueTableContent(d_ptr->mTableContent.at(i).serialize(QString::fromLatin1("TableContent")));// elementargumentserializer.cpp:102
        _valueTableContent.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTableContent.setQualified(true);
        _valueTableContent.setNillable(true);
        args.append(_valueTableContent);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN__ArrayOfTableContent::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("TableContent")) {// converter_complextype.cpp:483
            NSMonitoring::NDN__TableContent mTableContentTemp;// converter_complextype.cpp:541
            mTableContentTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mTableContent.append(mTableContentTemp);// converter_complextype.cpp:549
            d_ptr->mTableContent_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSMonitoring::NDN__ArrayOfTableContent::NDN__ArrayOfTableContent()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__ArrayOfTableContent::~NDN__ArrayOfTableContent()
{
}

NSMonitoring::NDN__ArrayOfTableContent::NDN__ArrayOfTableContent( const NSMonitoring::NDN__ArrayOfTableContent& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__ArrayOfTableContent&  NSMonitoring::NDN__ArrayOfTableContent::operator=( const NSMonitoring::NDN__ArrayOfTableContent& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN__Column::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
    QString mTypeName;
    bool mTypeName_nil;
    KDSoapValue mValue;
    bool mValue_nil;
};

NSMonitoring::NDN__Column::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mTypeName_nil(true), mValue_nil(true)
{
}


void NSMonitoring::NDN__Column::setName( const QString& arg_name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:352
    d_ptr->mName = arg_name;
}

QString NSMonitoring::NDN__Column::name() const
{
    return d_ptr->mName;
}

bool NSMonitoring::NDN__Column::hasValueForName() const
{
    return d_ptr->mName_nil == false;
}

void NSMonitoring::NDN__Column::setTypeName( const QString& arg_typeName )
{
    d_ptr->mTypeName_nil = false;// converter_complextype.cpp:352
    d_ptr->mTypeName = arg_typeName;
}

QString NSMonitoring::NDN__Column::typeName() const
{
    return d_ptr->mTypeName;
}

bool NSMonitoring::NDN__Column::hasValueForTypeName() const
{
    return d_ptr->mTypeName_nil == false;
}

void NSMonitoring::NDN__Column::setValue( const KDSoapValue& arg_value )
{
    d_ptr->mValue_nil = false;// converter_complextype.cpp:352
    d_ptr->mValue = arg_value;
}

KDSoapValue NSMonitoring::NDN__Column::value() const
{
    return d_ptr->mValue;
}

bool NSMonitoring::NDN__Column::hasValueForValue() const
{
    return d_ptr->mValue_nil == false;
}

KDSoapValue NSMonitoring::NDN__Column::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Column"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName = KDSoapValue(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        args.append(_valueName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mTypeName_nil) {
        KDSoapValue _valueTypeName = KDSoapValue(QString::fromLatin1("TypeName"), QVariant::fromValue(d_ptr->mTypeName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueTypeName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTypeName.setQualified(true);
        _valueTypeName.setNillable(true);
        args.append(_valueTypeName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mValue.isNull()) {
        args.append(d_ptr->mValue);// elementargumentserializer.cpp:82
    }
    return mainValue;
}

void NSMonitoring::NDN__Column::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Name")) {// converter_complextype.cpp:483
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("TypeName")) {// converter_complextype.cpp:483
            d_ptr->mTypeName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mTypeName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Value")) {// converter_complextype.cpp:483
            d_ptr->mValue = val;// converter_complextype.cpp:494
            d_ptr->mValue_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN__Column::NDN__Column()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__Column::~NDN__Column()
{
}

NSMonitoring::NDN__Column::NDN__Column( const NSMonitoring::NDN__Column& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__Column&  NSMonitoring::NDN__Column::operator=( const NSMonitoring::NDN__Column& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN__Entity::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::NDN__ArrayOfTableContent mTables;
    bool mTables_nil;
};

NSMonitoring::NDN__Entity::PrivateDPtr::PrivateDPtr()
    : mTables_nil(true)
{
}


void NSMonitoring::NDN__Entity::setTables( const NSMonitoring::NDN__ArrayOfTableContent& arg_tables )
{
    d_ptr->mTables_nil = false;// converter_complextype.cpp:352
    d_ptr->mTables = arg_tables;
}

NSMonitoring::NDN__ArrayOfTableContent NSMonitoring::NDN__Entity::tables() const
{
    return d_ptr->mTables;
}

bool NSMonitoring::NDN__Entity::hasValueForTables() const
{
    return d_ptr->mTables_nil == false;
}

KDSoapValue NSMonitoring::NDN__Entity::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Entity"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mTables_nil) {
        KDSoapValue _valueTables(d_ptr->mTables.serialize(QString::fromLatin1("Tables")));// elementargumentserializer.cpp:102
        _valueTables.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTables.setQualified(true);
        _valueTables.setNillable(true);
        args.append(_valueTables);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN__Entity::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Tables")) {// converter_complextype.cpp:483
            d_ptr->mTables.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mTables_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN__Entity::NDN__Entity()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__Entity::~NDN__Entity()
{
}

NSMonitoring::NDN__Entity::NDN__Entity( const NSMonitoring::NDN__Entity& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__Entity&  NSMonitoring::NDN__Entity::operator=( const NSMonitoring::NDN__Entity& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMonitoring::NDN__MovementType::NDN__MovementType( const Type &type )
{
    mType = type;
}

void NSMonitoring::NDN__MovementType::setType( Type type )
{
    mType = type;
}

NSMonitoring::NDN__MovementType::Type NSMonitoring::NDN__MovementType::type() const
{
    return mType;
}

NSMonitoring::NDN__MovementType::operator Type() const
{
    return mType;
}

KDSoapValue NSMonitoring::NDN__MovementType::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSMonitoring::NDN__MovementType::AB:
            return KDSoapValue(valueName, "AB", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::ABS:
            return KDSoapValue(valueName, "ABS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::BET:
            return KDSoapValue(valueName, "BET", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::BETS:
            return KDSoapValue(valueName, "BETS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::SVISZ:
            return KDSoapValue(valueName, "SVISZ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::SVISZS:
            return KDSoapValue(valueName, "SVISZS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::KIT:
            return KDSoapValue(valueName, "KIT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::KITS:
            return KDSoapValue(valueName, "KITS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::LELTT:
            return KDSoapValue(valueName, "LELTT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::LELTH:
            return KDSoapValue(valueName, "LELTH", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::EGYT:
            return KDSoapValue(valueName, "EGYT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::EGYJ:
            return KDSoapValue(valueName, "EGYJ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::ASZLA:
            return KDSoapValue(valueName, "ASZLA", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::ASZLAS:
            return KDSoapValue(valueName, "ASZLAS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::NY:
            return KDSoapValue(valueName, "NY", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::NYS:
            return KDSoapValue(valueName, "NYS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::KSZLA:
            return KDSoapValue(valueName, "KSZLA", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::KSZLAS:
            return KDSoapValue(valueName, "KSZLAS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSMonitoring::NDN__MovementType::VVISZ:
            return KDSoapValue(valueName, "VVISZ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSMonitoring::NDN__MovementType::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AB", NSMonitoring::NDN__MovementType::AB },
    { "ABS", NSMonitoring::NDN__MovementType::ABS },
    { "BET", NSMonitoring::NDN__MovementType::BET },
    { "BETS", NSMonitoring::NDN__MovementType::BETS },
    { "SVISZ", NSMonitoring::NDN__MovementType::SVISZ },
    { "SVISZS", NSMonitoring::NDN__MovementType::SVISZS },
    { "KIT", NSMonitoring::NDN__MovementType::KIT },
    { "KITS", NSMonitoring::NDN__MovementType::KITS },
    { "LELTT", NSMonitoring::NDN__MovementType::LELTT },
    { "LELTH", NSMonitoring::NDN__MovementType::LELTH },
    { "EGYT", NSMonitoring::NDN__MovementType::EGYT },
    { "EGYJ", NSMonitoring::NDN__MovementType::EGYJ },
    { "ASZLA", NSMonitoring::NDN__MovementType::ASZLA },
    { "ASZLAS", NSMonitoring::NDN__MovementType::ASZLAS },
    { "NY", NSMonitoring::NDN__MovementType::NY },
    { "NYS", NSMonitoring::NDN__MovementType::NYS },
    { "KSZLA", NSMonitoring::NDN__MovementType::KSZLA },
    { "KSZLAS", NSMonitoring::NDN__MovementType::KSZLAS },
    { "VVISZ", NSMonitoring::NDN__MovementType::VVISZ }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__MovementType'.", qPrintable(str) );
}

NSMonitoring::NDN__MovementType::NDN__MovementType()
    : mType(Type(0))
{
}

NSMonitoring::NDN__MovementType::~NDN__MovementType()
{
}


class NSMonitoring::NDN__Record::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::NDN__ArrayOfColumn mColumns;
    bool mColumns_nil;
};

NSMonitoring::NDN__Record::PrivateDPtr::PrivateDPtr()
    : mColumns_nil(true)
{
}


void NSMonitoring::NDN__Record::setColumns( const NSMonitoring::NDN__ArrayOfColumn& arg_columns )
{
    d_ptr->mColumns_nil = false;// converter_complextype.cpp:352
    d_ptr->mColumns = arg_columns;
}

NSMonitoring::NDN__ArrayOfColumn NSMonitoring::NDN__Record::columns() const
{
    return d_ptr->mColumns;
}

bool NSMonitoring::NDN__Record::hasValueForColumns() const
{
    return d_ptr->mColumns_nil == false;
}

KDSoapValue NSMonitoring::NDN__Record::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Record"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mColumns_nil) {
        KDSoapValue _valueColumns(d_ptr->mColumns.serialize(QString::fromLatin1("Columns")));// elementargumentserializer.cpp:102
        _valueColumns.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueColumns.setQualified(true);
        _valueColumns.setNillable(true);
        args.append(_valueColumns);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN__Record::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Columns")) {// converter_complextype.cpp:483
            d_ptr->mColumns.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mColumns_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN__Record::NDN__Record()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__Record::~NDN__Record()
{
}

NSMonitoring::NDN__Record::NDN__Record( const NSMonitoring::NDN__Record& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__Record&  NSMonitoring::NDN__Record::operator=( const NSMonitoring::NDN__Record& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::NDN__TableContent::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::NDN__ArrayOfRecord mRecords;
    bool mRecords_nil;
    QString mTableName;
    bool mTableName_nil;
};

NSMonitoring::NDN__TableContent::PrivateDPtr::PrivateDPtr()
    : mRecords_nil(true), mTableName_nil(true)
{
}


void NSMonitoring::NDN__TableContent::setRecords( const NSMonitoring::NDN__ArrayOfRecord& arg_records )
{
    d_ptr->mRecords_nil = false;// converter_complextype.cpp:352
    d_ptr->mRecords = arg_records;
}

NSMonitoring::NDN__ArrayOfRecord NSMonitoring::NDN__TableContent::records() const
{
    return d_ptr->mRecords;
}

bool NSMonitoring::NDN__TableContent::hasValueForRecords() const
{
    return d_ptr->mRecords_nil == false;
}

void NSMonitoring::NDN__TableContent::setTableName( const QString& arg_tableName )
{
    d_ptr->mTableName_nil = false;// converter_complextype.cpp:352
    d_ptr->mTableName = arg_tableName;
}

QString NSMonitoring::NDN__TableContent::tableName() const
{
    return d_ptr->mTableName;
}

bool NSMonitoring::NDN__TableContent::hasValueForTableName() const
{
    return d_ptr->mTableName_nil == false;
}

KDSoapValue NSMonitoring::NDN__TableContent::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("TableContent"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mRecords_nil) {
        KDSoapValue _valueRecords(d_ptr->mRecords.serialize(QString::fromLatin1("Records")));// elementargumentserializer.cpp:102
        _valueRecords.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueRecords.setQualified(true);
        _valueRecords.setNillable(true);
        args.append(_valueRecords);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mTableName_nil) {
        KDSoapValue _valueTableName = KDSoapValue(QString::fromLatin1("TableName"), QVariant::fromValue(d_ptr->mTableName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueTableName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTableName.setQualified(true);
        _valueTableName.setNillable(true);
        args.append(_valueTableName);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSMonitoring::NDN__TableContent::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Records")) {// converter_complextype.cpp:483
            d_ptr->mRecords.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mRecords_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("TableName")) {// converter_complextype.cpp:483
            d_ptr->mTableName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mTableName_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSMonitoring::NDN__TableContent::NDN__TableContent()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::NDN__TableContent::~NDN__TableContent()
{
}

NSMonitoring::NDN__TableContent::NDN__TableContent( const NSMonitoring::NDN__TableContent& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::NDN__TableContent&  NSMonitoring::NDN__TableContent::operator=( const NSMonitoring::NDN__TableContent& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMonitoring::GetDocumentJob::GetDocumentJob( NSMonitoring::Monitoring* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMonitoring::GetDocumentJob::setParameters( const NSMonitoring::NDN_COMM__GetDocument& arg0 )
{
    mParameters = arg0;
}

NSMonitoring::NDN_COMM__GetDocument NSMonitoring::GetDocumentJob::parameters() const
{
    return mParameters;
}

void NSMonitoring::GetDocumentJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetDocument");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDocument(mParameters.serialize(QString::fromLatin1("GetDocument")));// elementargumentserializer.cpp:102
    _valueGetDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetDocument.setQualified(true);
    message = _valueGetDocument;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDocument"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMonitoring::NDN_COMM__GetDocumentResponse NSMonitoring::GetDocumentJob::resultParameters() const
{
    return mResultParameters;
}

void NSMonitoring::GetDocumentJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMonitoring::GetOpeningStockJob::GetOpeningStockJob( NSMonitoring::Monitoring* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMonitoring::GetOpeningStockJob::setParameters( const NSMonitoring::NDN_COMM__GetOpeningStock& arg0 )
{
    mParameters = arg0;
}

NSMonitoring::NDN_COMM__GetOpeningStock NSMonitoring::GetOpeningStockJob::parameters() const
{
    return mParameters;
}

void NSMonitoring::GetOpeningStockJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetOpeningStock(mParameters.serialize(QString::fromLatin1("GetOpeningStock")));// elementargumentserializer.cpp:102
    _valueGetOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetOpeningStock.setQualified(true);
    message = _valueGetOpeningStock;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetOpeningStock"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMonitoring::NDN_COMM__GetOpeningStockResponse NSMonitoring::GetOpeningStockJob::resultParameters() const
{
    return mResultParameters;
}

void NSMonitoring::GetOpeningStockJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSMonitoring::WaitJob::WaitJob( NSMonitoring::Monitoring* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMonitoring::WaitJob::setParameters( const NSMonitoring::NDN_COMM__Wait& arg0 )
{
    mParameters = arg0;
}

NSMonitoring::NDN_COMM__Wait NSMonitoring::WaitJob::parameters() const
{
    return mParameters;
}

void NSMonitoring::WaitJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/Wait");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueWait(mParameters.serialize(QString::fromLatin1("Wait")));// elementargumentserializer.cpp:102
    _valueWait.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueWait.setQualified(true);
    message = _valueWait;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("Wait"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMonitoring::NDN_COMM__WaitResponse NSMonitoring::WaitJob::resultParameters() const
{
    return mResultParameters;
}

void NSMonitoring::WaitJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class NSMonitoring::Monitoring::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

NSMonitoring::Monitoring::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


NSMonitoring::Monitoring::Monitoring( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

NSMonitoring::Monitoring::~Monitoring()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void NSMonitoring::Monitoring::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void NSMonitoring::Monitoring::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

QString NSMonitoring::Monitoring::endPoint() const
{
    return d_ptr->m_endPoint;
}

void NSMonitoring::Monitoring::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

KDSoapClientInterface::SoapVersion NSMonitoring::Monitoring::soapVersion() const
{
    return clientInterface()->soapVersion();
}

int NSMonitoring::Monitoring::lastErrorCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toInt();
    return 0;
}

QString NSMonitoring::Monitoring::lastFaultCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toString();
    return QString();
}

QString NSMonitoring::Monitoring::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *NSMonitoring::Monitoring::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://adatkuldes-teszt.nemzetidohany.gov.hu:8444/ndc/Monitoring.svc");
        const QString messageNamespace = QString::fromLatin1("http://tempuri.org/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *NSMonitoring::Monitoring::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const Monitoring*>( this )->clientInterface() );
}

NSMonitoring::NDN_COMM__GetDocumentResponse NSMonitoring::Monitoring::getDocument( const NSMonitoring::NDN_COMM__GetDocument& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetDocument");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDocument(parameters.serialize(QString::fromLatin1("GetDocument")));// elementargumentserializer.cpp:102
    _valueGetDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetDocument.setQualified(true);
    message = _valueGetDocument;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDocument"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMonitoring::NDN_COMM__GetDocumentResponse();
    NSMonitoring::NDN_COMM__GetDocumentResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMonitoring::Monitoring::asyncGetDocument( const NSMonitoring::NDN_COMM__GetDocument& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetDocument");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDocument(parameters.serialize(QString::fromLatin1("GetDocument")));// elementargumentserializer.cpp:102
    _valueGetDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetDocument.setQualified(true);
    message = _valueGetDocument;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDocument"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDocumentFinished(KDSoapPendingCallWatcher*)));
}

void NSMonitoring::Monitoring::_kd_slotGetDocumentFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDocumentError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getDocument"), reply);
    } else {
        NSMonitoring::NDN_COMM__GetDocumentResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getDocumentDone( ret );
    }
    watcher->deleteLater();
}

NSMonitoring::NDN_COMM__GetOpeningStockResponse NSMonitoring::Monitoring::getOpeningStock( const NSMonitoring::NDN_COMM__GetOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetOpeningStock(parameters.serialize(QString::fromLatin1("GetOpeningStock")));// elementargumentserializer.cpp:102
    _valueGetOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetOpeningStock.setQualified(true);
    message = _valueGetOpeningStock;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetOpeningStock"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMonitoring::NDN_COMM__GetOpeningStockResponse();
    NSMonitoring::NDN_COMM__GetOpeningStockResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMonitoring::Monitoring::asyncGetOpeningStock( const NSMonitoring::NDN_COMM__GetOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetOpeningStock(parameters.serialize(QString::fromLatin1("GetOpeningStock")));// elementargumentserializer.cpp:102
    _valueGetOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetOpeningStock.setQualified(true);
    message = _valueGetOpeningStock;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetOpeningStock"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetOpeningStockFinished(KDSoapPendingCallWatcher*)));
}

void NSMonitoring::Monitoring::_kd_slotGetOpeningStockFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getOpeningStockError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("getOpeningStock"), reply);
    } else {
        NSMonitoring::NDN_COMM__GetOpeningStockResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT getOpeningStockDone( ret );
    }
    watcher->deleteLater();
}

NSMonitoring::NDN_COMM__WaitResponse NSMonitoring::Monitoring::wait( const NSMonitoring::NDN_COMM__Wait& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/Wait");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueWait(parameters.serialize(QString::fromLatin1("Wait")));// elementargumentserializer.cpp:102
    _valueWait.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueWait.setQualified(true);
    message = _valueWait;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("Wait"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMonitoring::NDN_COMM__WaitResponse();
    NSMonitoring::NDN_COMM__WaitResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSMonitoring::Monitoring::asyncWait( const NSMonitoring::NDN_COMM__Wait& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/Wait");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueWait(parameters.serialize(QString::fromLatin1("Wait")));// elementargumentserializer.cpp:102
    _valueWait.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueWait.setQualified(true);
    message = _valueWait;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("Wait"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotWaitFinished(KDSoapPendingCallWatcher*)));
}

void NSMonitoring::Monitoring::_kd_slotWaitFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT waitError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("wait"), reply);
    } else {
        NSMonitoring::NDN_COMM__WaitResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT waitDone( ret );
    }
    watcher->deleteLater();
}


