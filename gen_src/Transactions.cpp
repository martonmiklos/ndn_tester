// This file is generated by KDAB's kdwsdl2cpp from Transactions.svc?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/

#include "Transactions.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

class NSTransactions::NDN_COMM__CreateOpeningStock::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    NSTransactions::NDN__OpeningStock mDocument;
    bool mDocument_nil;
};

NSTransactions::NDN_COMM__CreateOpeningStock::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mDocument_nil(true)
{
}


void NSTransactions::NDN_COMM__CreateOpeningStock::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSTransactions::NDN_COMM__CreateOpeningStock::shopId() const
{
    return d_ptr->mShopId;
}

bool NSTransactions::NDN_COMM__CreateOpeningStock::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSTransactions::NDN_COMM__CreateOpeningStock::setDocument( const NSTransactions::NDN__OpeningStock& arg_document )
{
    d_ptr->mDocument_nil = false;// converter_complextype.cpp:352
    d_ptr->mDocument = arg_document;
}

NSTransactions::NDN__OpeningStock NSTransactions::NDN_COMM__CreateOpeningStock::document() const
{
    return d_ptr->mDocument;
}

bool NSTransactions::NDN_COMM__CreateOpeningStock::hasValueForDocument() const
{
    return d_ptr->mDocument_nil == false;
}

KDSoapValue NSTransactions::NDN_COMM__CreateOpeningStock::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateOpeningStock"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mDocument_nil) {
        KDSoapValue _valueDocument(d_ptr->mDocument.serialize(QString::fromLatin1("document")));// elementargumentserializer.cpp:102
        _valueDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueDocument.setQualified(true);
        _valueDocument.setNillable(true);
        args.append(_valueDocument);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN_COMM__CreateOpeningStock::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("document")) {// converter_complextype.cpp:483
            d_ptr->mDocument.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mDocument_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN_COMM__CreateOpeningStock::NDN_COMM__CreateOpeningStock()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN_COMM__CreateOpeningStock::~NDN_COMM__CreateOpeningStock()
{
}

NSTransactions::NDN_COMM__CreateOpeningStock::NDN_COMM__CreateOpeningStock( const NSTransactions::NDN_COMM__CreateOpeningStock& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN_COMM__CreateOpeningStock&  NSTransactions::NDN_COMM__CreateOpeningStock::operator=( const NSTransactions::NDN_COMM__CreateOpeningStock& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN_COMM__CreateOpeningStockResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::NDN__TransactionResponse mCreateOpeningStockResult;
    bool mCreateOpeningStockResult_nil;
};

NSTransactions::NDN_COMM__CreateOpeningStockResponse::PrivateDPtr::PrivateDPtr()
    : mCreateOpeningStockResult_nil(true)
{
}


void NSTransactions::NDN_COMM__CreateOpeningStockResponse::setCreateOpeningStockResult( const NSTransactions::NDN__TransactionResponse& arg_createOpeningStockResult )
{
    d_ptr->mCreateOpeningStockResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mCreateOpeningStockResult = arg_createOpeningStockResult;
}

NSTransactions::NDN__TransactionResponse NSTransactions::NDN_COMM__CreateOpeningStockResponse::createOpeningStockResult() const
{
    return d_ptr->mCreateOpeningStockResult;
}

bool NSTransactions::NDN_COMM__CreateOpeningStockResponse::hasValueForCreateOpeningStockResult() const
{
    return d_ptr->mCreateOpeningStockResult_nil == false;
}

KDSoapValue NSTransactions::NDN_COMM__CreateOpeningStockResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateOpeningStockResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCreateOpeningStockResult_nil) {
        KDSoapValue _valueCreateOpeningStockResult(d_ptr->mCreateOpeningStockResult.serialize(QString::fromLatin1("CreateOpeningStockResult")));// elementargumentserializer.cpp:102
        _valueCreateOpeningStockResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreateOpeningStockResult.setQualified(true);
        _valueCreateOpeningStockResult.setNillable(true);
        args.append(_valueCreateOpeningStockResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN_COMM__CreateOpeningStockResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CreateOpeningStockResult")) {// converter_complextype.cpp:483
            d_ptr->mCreateOpeningStockResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mCreateOpeningStockResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN_COMM__CreateOpeningStockResponse::NDN_COMM__CreateOpeningStockResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN_COMM__CreateOpeningStockResponse::~NDN_COMM__CreateOpeningStockResponse()
{
}

NSTransactions::NDN_COMM__CreateOpeningStockResponse::NDN_COMM__CreateOpeningStockResponse( const NSTransactions::NDN_COMM__CreateOpeningStockResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN_COMM__CreateOpeningStockResponse&  NSTransactions::NDN_COMM__CreateOpeningStockResponse::operator=( const NSTransactions::NDN_COMM__CreateOpeningStockResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN_COMM__CreateSalesTransaction::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    NSTransactions::NDN__ArrayOfSalesDocument mDocuments;
    bool mDocuments_nil;
};

NSTransactions::NDN_COMM__CreateSalesTransaction::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mDocuments_nil(true)
{
}


void NSTransactions::NDN_COMM__CreateSalesTransaction::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSTransactions::NDN_COMM__CreateSalesTransaction::shopId() const
{
    return d_ptr->mShopId;
}

bool NSTransactions::NDN_COMM__CreateSalesTransaction::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSTransactions::NDN_COMM__CreateSalesTransaction::setDocuments( const NSTransactions::NDN__ArrayOfSalesDocument& arg_documents )
{
    d_ptr->mDocuments_nil = false;// converter_complextype.cpp:352
    d_ptr->mDocuments = arg_documents;
}

NSTransactions::NDN__ArrayOfSalesDocument NSTransactions::NDN_COMM__CreateSalesTransaction::documents() const
{
    return d_ptr->mDocuments;
}

bool NSTransactions::NDN_COMM__CreateSalesTransaction::hasValueForDocuments() const
{
    return d_ptr->mDocuments_nil == false;
}

KDSoapValue NSTransactions::NDN_COMM__CreateSalesTransaction::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateSalesTransaction"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mDocuments_nil) {
        KDSoapValue _valueDocuments(d_ptr->mDocuments.serialize(QString::fromLatin1("documents")));// elementargumentserializer.cpp:102
        _valueDocuments.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueDocuments.setQualified(true);
        _valueDocuments.setNillable(true);
        args.append(_valueDocuments);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN_COMM__CreateSalesTransaction::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("documents")) {// converter_complextype.cpp:483
            d_ptr->mDocuments.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mDocuments_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN_COMM__CreateSalesTransaction::NDN_COMM__CreateSalesTransaction()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN_COMM__CreateSalesTransaction::~NDN_COMM__CreateSalesTransaction()
{
}

NSTransactions::NDN_COMM__CreateSalesTransaction::NDN_COMM__CreateSalesTransaction( const NSTransactions::NDN_COMM__CreateSalesTransaction& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN_COMM__CreateSalesTransaction&  NSTransactions::NDN_COMM__CreateSalesTransaction::operator=( const NSTransactions::NDN_COMM__CreateSalesTransaction& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN_COMM__CreateSalesTransactionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::NDN__TransactionResponse mCreateSalesTransactionResult;
    bool mCreateSalesTransactionResult_nil;
};

NSTransactions::NDN_COMM__CreateSalesTransactionResponse::PrivateDPtr::PrivateDPtr()
    : mCreateSalesTransactionResult_nil(true)
{
}


void NSTransactions::NDN_COMM__CreateSalesTransactionResponse::setCreateSalesTransactionResult( const NSTransactions::NDN__TransactionResponse& arg_createSalesTransactionResult )
{
    d_ptr->mCreateSalesTransactionResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mCreateSalesTransactionResult = arg_createSalesTransactionResult;
}

NSTransactions::NDN__TransactionResponse NSTransactions::NDN_COMM__CreateSalesTransactionResponse::createSalesTransactionResult() const
{
    return d_ptr->mCreateSalesTransactionResult;
}

bool NSTransactions::NDN_COMM__CreateSalesTransactionResponse::hasValueForCreateSalesTransactionResult() const
{
    return d_ptr->mCreateSalesTransactionResult_nil == false;
}

KDSoapValue NSTransactions::NDN_COMM__CreateSalesTransactionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateSalesTransactionResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCreateSalesTransactionResult_nil) {
        KDSoapValue _valueCreateSalesTransactionResult(d_ptr->mCreateSalesTransactionResult.serialize(QString::fromLatin1("CreateSalesTransactionResult")));// elementargumentserializer.cpp:102
        _valueCreateSalesTransactionResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreateSalesTransactionResult.setQualified(true);
        _valueCreateSalesTransactionResult.setNillable(true);
        args.append(_valueCreateSalesTransactionResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN_COMM__CreateSalesTransactionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CreateSalesTransactionResult")) {// converter_complextype.cpp:483
            d_ptr->mCreateSalesTransactionResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mCreateSalesTransactionResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN_COMM__CreateSalesTransactionResponse::NDN_COMM__CreateSalesTransactionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN_COMM__CreateSalesTransactionResponse::~NDN_COMM__CreateSalesTransactionResponse()
{
}

NSTransactions::NDN_COMM__CreateSalesTransactionResponse::NDN_COMM__CreateSalesTransactionResponse( const NSTransactions::NDN_COMM__CreateSalesTransactionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN_COMM__CreateSalesTransactionResponse&  NSTransactions::NDN_COMM__CreateSalesTransactionResponse::operator=( const NSTransactions::NDN_COMM__CreateSalesTransactionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN_COMM__CreateStockTransaction::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    NSTransactions::NDN__ArrayOfStockDocument mDocuments;
    bool mDocuments_nil;
};

NSTransactions::NDN_COMM__CreateStockTransaction::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mDocuments_nil(true)
{
}


void NSTransactions::NDN_COMM__CreateStockTransaction::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSTransactions::NDN_COMM__CreateStockTransaction::shopId() const
{
    return d_ptr->mShopId;
}

bool NSTransactions::NDN_COMM__CreateStockTransaction::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSTransactions::NDN_COMM__CreateStockTransaction::setDocuments( const NSTransactions::NDN__ArrayOfStockDocument& arg_documents )
{
    d_ptr->mDocuments_nil = false;// converter_complextype.cpp:352
    d_ptr->mDocuments = arg_documents;
}

NSTransactions::NDN__ArrayOfStockDocument NSTransactions::NDN_COMM__CreateStockTransaction::documents() const
{
    return d_ptr->mDocuments;
}

bool NSTransactions::NDN_COMM__CreateStockTransaction::hasValueForDocuments() const
{
    return d_ptr->mDocuments_nil == false;
}

KDSoapValue NSTransactions::NDN_COMM__CreateStockTransaction::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateStockTransaction"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mDocuments_nil) {
        KDSoapValue _valueDocuments(d_ptr->mDocuments.serialize(QString::fromLatin1("documents")));// elementargumentserializer.cpp:102
        _valueDocuments.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueDocuments.setQualified(true);
        _valueDocuments.setNillable(true);
        args.append(_valueDocuments);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN_COMM__CreateStockTransaction::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("shopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("documents")) {// converter_complextype.cpp:483
            d_ptr->mDocuments.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mDocuments_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN_COMM__CreateStockTransaction::NDN_COMM__CreateStockTransaction()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN_COMM__CreateStockTransaction::~NDN_COMM__CreateStockTransaction()
{
}

NSTransactions::NDN_COMM__CreateStockTransaction::NDN_COMM__CreateStockTransaction( const NSTransactions::NDN_COMM__CreateStockTransaction& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN_COMM__CreateStockTransaction&  NSTransactions::NDN_COMM__CreateStockTransaction::operator=( const NSTransactions::NDN_COMM__CreateStockTransaction& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN_COMM__CreateStockTransactionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::NDN__TransactionResponse mCreateStockTransactionResult;
    bool mCreateStockTransactionResult_nil;
};

NSTransactions::NDN_COMM__CreateStockTransactionResponse::PrivateDPtr::PrivateDPtr()
    : mCreateStockTransactionResult_nil(true)
{
}


void NSTransactions::NDN_COMM__CreateStockTransactionResponse::setCreateStockTransactionResult( const NSTransactions::NDN__TransactionResponse& arg_createStockTransactionResult )
{
    d_ptr->mCreateStockTransactionResult_nil = false;// converter_complextype.cpp:352
    d_ptr->mCreateStockTransactionResult = arg_createStockTransactionResult;
}

NSTransactions::NDN__TransactionResponse NSTransactions::NDN_COMM__CreateStockTransactionResponse::createStockTransactionResult() const
{
    return d_ptr->mCreateStockTransactionResult;
}

bool NSTransactions::NDN_COMM__CreateStockTransactionResponse::hasValueForCreateStockTransactionResult() const
{
    return d_ptr->mCreateStockTransactionResult_nil == false;
}

KDSoapValue NSTransactions::NDN_COMM__CreateStockTransactionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("CreateStockTransactionResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCreateStockTransactionResult_nil) {
        KDSoapValue _valueCreateStockTransactionResult(d_ptr->mCreateStockTransactionResult.serialize(QString::fromLatin1("CreateStockTransactionResult")));// elementargumentserializer.cpp:102
        _valueCreateStockTransactionResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreateStockTransactionResult.setQualified(true);
        _valueCreateStockTransactionResult.setNillable(true);
        args.append(_valueCreateStockTransactionResult);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN_COMM__CreateStockTransactionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CreateStockTransactionResult")) {// converter_complextype.cpp:483
            d_ptr->mCreateStockTransactionResult.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mCreateStockTransactionResult_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN_COMM__CreateStockTransactionResponse::NDN_COMM__CreateStockTransactionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN_COMM__CreateStockTransactionResponse::~NDN_COMM__CreateStockTransactionResponse()
{
}

NSTransactions::NDN_COMM__CreateStockTransactionResponse::NDN_COMM__CreateStockTransactionResponse( const NSTransactions::NDN_COMM__CreateStockTransactionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN_COMM__CreateStockTransactionResponse&  NSTransactions::NDN_COMM__CreateStockTransactionResponse::operator=( const NSTransactions::NDN_COMM__CreateStockTransactionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfDocumentVatBreakDown::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__DocumentVatBreakDown > mDocumentVatBreakDown;
    bool mDocumentVatBreakDown_nil;
};

NSTransactions::NDN__ArrayOfDocumentVatBreakDown::PrivateDPtr::PrivateDPtr()
    : mDocumentVatBreakDown_nil(true)
{
}


void NSTransactions::NDN__ArrayOfDocumentVatBreakDown::setDocumentVatBreakDown( const QList< NSTransactions::NDN__DocumentVatBreakDown >& arg_documentVatBreakDown )
{
    d_ptr->mDocumentVatBreakDown_nil = false;// converter_complextype.cpp:352
    d_ptr->mDocumentVatBreakDown = arg_documentVatBreakDown;
}

QList< NSTransactions::NDN__DocumentVatBreakDown > NSTransactions::NDN__ArrayOfDocumentVatBreakDown::documentVatBreakDown() const
{
    return d_ptr->mDocumentVatBreakDown;
}

bool NSTransactions::NDN__ArrayOfDocumentVatBreakDown::hasValueForDocumentVatBreakDown() const
{
    return d_ptr->mDocumentVatBreakDown_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfDocumentVatBreakDown::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfDocumentVatBreakDown"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mDocumentVatBreakDown.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueDocumentVatBreakDown(d_ptr->mDocumentVatBreakDown.at(i).serialize(QString::fromLatin1("DocumentVatBreakDown")));// elementargumentserializer.cpp:102
        _valueDocumentVatBreakDown.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDocumentVatBreakDown.setQualified(true);
        _valueDocumentVatBreakDown.setNillable(true);
        args.append(_valueDocumentVatBreakDown);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfDocumentVatBreakDown::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DocumentVatBreakDown")) {// converter_complextype.cpp:483
            NSTransactions::NDN__DocumentVatBreakDown mDocumentVatBreakDownTemp;// converter_complextype.cpp:541
            mDocumentVatBreakDownTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mDocumentVatBreakDown.append(mDocumentVatBreakDownTemp);// converter_complextype.cpp:549
            d_ptr->mDocumentVatBreakDown_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfDocumentVatBreakDown::NDN__ArrayOfDocumentVatBreakDown()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfDocumentVatBreakDown::~NDN__ArrayOfDocumentVatBreakDown()
{
}

NSTransactions::NDN__ArrayOfDocumentVatBreakDown::NDN__ArrayOfDocumentVatBreakDown( const NSTransactions::NDN__ArrayOfDocumentVatBreakDown& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfDocumentVatBreakDown&  NSTransactions::NDN__ArrayOfDocumentVatBreakDown::operator=( const NSTransactions::NDN__ArrayOfDocumentVatBreakDown& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfOpeningStockLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__OpeningStockLine > mOpeningStockLine;
    bool mOpeningStockLine_nil;
};

NSTransactions::NDN__ArrayOfOpeningStockLine::PrivateDPtr::PrivateDPtr()
    : mOpeningStockLine_nil(true)
{
}


void NSTransactions::NDN__ArrayOfOpeningStockLine::setOpeningStockLine( const QList< NSTransactions::NDN__OpeningStockLine >& arg_openingStockLine )
{
    d_ptr->mOpeningStockLine_nil = false;// converter_complextype.cpp:352
    d_ptr->mOpeningStockLine = arg_openingStockLine;
}

QList< NSTransactions::NDN__OpeningStockLine > NSTransactions::NDN__ArrayOfOpeningStockLine::openingStockLine() const
{
    return d_ptr->mOpeningStockLine;
}

bool NSTransactions::NDN__ArrayOfOpeningStockLine::hasValueForOpeningStockLine() const
{
    return d_ptr->mOpeningStockLine_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfOpeningStockLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfOpeningStockLine"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mOpeningStockLine.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueOpeningStockLine(d_ptr->mOpeningStockLine.at(i).serialize(QString::fromLatin1("OpeningStockLine")));// elementargumentserializer.cpp:102
        _valueOpeningStockLine.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueOpeningStockLine.setQualified(true);
        _valueOpeningStockLine.setNillable(true);
        args.append(_valueOpeningStockLine);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfOpeningStockLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("OpeningStockLine")) {// converter_complextype.cpp:483
            NSTransactions::NDN__OpeningStockLine mOpeningStockLineTemp;// converter_complextype.cpp:541
            mOpeningStockLineTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mOpeningStockLine.append(mOpeningStockLineTemp);// converter_complextype.cpp:549
            d_ptr->mOpeningStockLine_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfOpeningStockLine::NDN__ArrayOfOpeningStockLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfOpeningStockLine::~NDN__ArrayOfOpeningStockLine()
{
}

NSTransactions::NDN__ArrayOfOpeningStockLine::NDN__ArrayOfOpeningStockLine( const NSTransactions::NDN__ArrayOfOpeningStockLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfOpeningStockLine&  NSTransactions::NDN__ArrayOfOpeningStockLine::operator=( const NSTransactions::NDN__ArrayOfOpeningStockLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfResponseCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__ResponseCode > mResponseCode;
    bool mResponseCode_nil;
};

NSTransactions::NDN__ArrayOfResponseCode::PrivateDPtr::PrivateDPtr()
    : mResponseCode_nil(true)
{
}


void NSTransactions::NDN__ArrayOfResponseCode::setResponseCode( const QList< NSTransactions::NDN__ResponseCode >& arg_responseCode )
{
    d_ptr->mResponseCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mResponseCode = arg_responseCode;
}

QList< NSTransactions::NDN__ResponseCode > NSTransactions::NDN__ArrayOfResponseCode::responseCode() const
{
    return d_ptr->mResponseCode;
}

bool NSTransactions::NDN__ArrayOfResponseCode::hasValueForResponseCode() const
{
    return d_ptr->mResponseCode_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfResponseCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfResponseCode"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mResponseCode.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueResponseCode(d_ptr->mResponseCode.at(i).serialize(QString::fromLatin1("ResponseCode")));// elementargumentserializer.cpp:102
        _valueResponseCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueResponseCode.setQualified(true);
        _valueResponseCode.setNillable(true);
        args.append(_valueResponseCode);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfResponseCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("ResponseCode")) {// converter_complextype.cpp:483
            NSTransactions::NDN__ResponseCode mResponseCodeTemp;// converter_complextype.cpp:541
            mResponseCodeTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mResponseCode.append(mResponseCodeTemp);// converter_complextype.cpp:549
            d_ptr->mResponseCode_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfResponseCode::NDN__ArrayOfResponseCode()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfResponseCode::~NDN__ArrayOfResponseCode()
{
}

NSTransactions::NDN__ArrayOfResponseCode::NDN__ArrayOfResponseCode( const NSTransactions::NDN__ArrayOfResponseCode& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfResponseCode&  NSTransactions::NDN__ArrayOfResponseCode::operator=( const NSTransactions::NDN__ArrayOfResponseCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfSalesDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__SalesDocument > mSalesDocument;
    bool mSalesDocument_nil;
};

NSTransactions::NDN__ArrayOfSalesDocument::PrivateDPtr::PrivateDPtr()
    : mSalesDocument_nil(true)
{
}


void NSTransactions::NDN__ArrayOfSalesDocument::setSalesDocument( const QList< NSTransactions::NDN__SalesDocument >& arg_salesDocument )
{
    d_ptr->mSalesDocument_nil = false;// converter_complextype.cpp:352
    d_ptr->mSalesDocument = arg_salesDocument;
}

QList< NSTransactions::NDN__SalesDocument > NSTransactions::NDN__ArrayOfSalesDocument::salesDocument() const
{
    return d_ptr->mSalesDocument;
}

bool NSTransactions::NDN__ArrayOfSalesDocument::hasValueForSalesDocument() const
{
    return d_ptr->mSalesDocument_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfSalesDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfSalesDocument"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mSalesDocument.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueSalesDocument(d_ptr->mSalesDocument.at(i).serialize(QString::fromLatin1("SalesDocument")));// elementargumentserializer.cpp:102
        _valueSalesDocument.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueSalesDocument.setQualified(true);
        _valueSalesDocument.setNillable(true);
        args.append(_valueSalesDocument);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfSalesDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SalesDocument")) {// converter_complextype.cpp:483
            NSTransactions::NDN__SalesDocument mSalesDocumentTemp;// converter_complextype.cpp:541
            mSalesDocumentTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mSalesDocument.append(mSalesDocumentTemp);// converter_complextype.cpp:549
            d_ptr->mSalesDocument_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfSalesDocument::NDN__ArrayOfSalesDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfSalesDocument::~NDN__ArrayOfSalesDocument()
{
}

NSTransactions::NDN__ArrayOfSalesDocument::NDN__ArrayOfSalesDocument( const NSTransactions::NDN__ArrayOfSalesDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfSalesDocument&  NSTransactions::NDN__ArrayOfSalesDocument::operator=( const NSTransactions::NDN__ArrayOfSalesDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfSalesDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__SalesDocumentLine > mSalesDocumentLine;
    bool mSalesDocumentLine_nil;
};

NSTransactions::NDN__ArrayOfSalesDocumentLine::PrivateDPtr::PrivateDPtr()
    : mSalesDocumentLine_nil(true)
{
}


void NSTransactions::NDN__ArrayOfSalesDocumentLine::setSalesDocumentLine( const QList< NSTransactions::NDN__SalesDocumentLine >& arg_salesDocumentLine )
{
    d_ptr->mSalesDocumentLine_nil = false;// converter_complextype.cpp:352
    d_ptr->mSalesDocumentLine = arg_salesDocumentLine;
}

QList< NSTransactions::NDN__SalesDocumentLine > NSTransactions::NDN__ArrayOfSalesDocumentLine::salesDocumentLine() const
{
    return d_ptr->mSalesDocumentLine;
}

bool NSTransactions::NDN__ArrayOfSalesDocumentLine::hasValueForSalesDocumentLine() const
{
    return d_ptr->mSalesDocumentLine_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfSalesDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfSalesDocumentLine"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mSalesDocumentLine.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueSalesDocumentLine(d_ptr->mSalesDocumentLine.at(i).serialize(QString::fromLatin1("SalesDocumentLine")));// elementargumentserializer.cpp:102
        _valueSalesDocumentLine.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueSalesDocumentLine.setQualified(true);
        _valueSalesDocumentLine.setNillable(true);
        args.append(_valueSalesDocumentLine);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfSalesDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("SalesDocumentLine")) {// converter_complextype.cpp:483
            NSTransactions::NDN__SalesDocumentLine mSalesDocumentLineTemp;// converter_complextype.cpp:541
            mSalesDocumentLineTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mSalesDocumentLine.append(mSalesDocumentLineTemp);// converter_complextype.cpp:549
            d_ptr->mSalesDocumentLine_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfSalesDocumentLine::NDN__ArrayOfSalesDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfSalesDocumentLine::~NDN__ArrayOfSalesDocumentLine()
{
}

NSTransactions::NDN__ArrayOfSalesDocumentLine::NDN__ArrayOfSalesDocumentLine( const NSTransactions::NDN__ArrayOfSalesDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfSalesDocumentLine&  NSTransactions::NDN__ArrayOfSalesDocumentLine::operator=( const NSTransactions::NDN__ArrayOfSalesDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfStockDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__StockDocument > mStockDocument;
    bool mStockDocument_nil;
};

NSTransactions::NDN__ArrayOfStockDocument::PrivateDPtr::PrivateDPtr()
    : mStockDocument_nil(true)
{
}


void NSTransactions::NDN__ArrayOfStockDocument::setStockDocument( const QList< NSTransactions::NDN__StockDocument >& arg_stockDocument )
{
    d_ptr->mStockDocument_nil = false;// converter_complextype.cpp:352
    d_ptr->mStockDocument = arg_stockDocument;
}

QList< NSTransactions::NDN__StockDocument > NSTransactions::NDN__ArrayOfStockDocument::stockDocument() const
{
    return d_ptr->mStockDocument;
}

bool NSTransactions::NDN__ArrayOfStockDocument::hasValueForStockDocument() const
{
    return d_ptr->mStockDocument_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfStockDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfStockDocument"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mStockDocument.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueStockDocument(d_ptr->mStockDocument.at(i).serialize(QString::fromLatin1("StockDocument")));// elementargumentserializer.cpp:102
        _valueStockDocument.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStockDocument.setQualified(true);
        _valueStockDocument.setNillable(true);
        args.append(_valueStockDocument);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfStockDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("StockDocument")) {// converter_complextype.cpp:483
            NSTransactions::NDN__StockDocument mStockDocumentTemp;// converter_complextype.cpp:541
            mStockDocumentTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mStockDocument.append(mStockDocumentTemp);// converter_complextype.cpp:549
            d_ptr->mStockDocument_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfStockDocument::NDN__ArrayOfStockDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfStockDocument::~NDN__ArrayOfStockDocument()
{
}

NSTransactions::NDN__ArrayOfStockDocument::NDN__ArrayOfStockDocument( const NSTransactions::NDN__ArrayOfStockDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfStockDocument&  NSTransactions::NDN__ArrayOfStockDocument::operator=( const NSTransactions::NDN__ArrayOfStockDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__ArrayOfStockDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList< NSTransactions::NDN__StockDocumentLine > mStockDocumentLine;
    bool mStockDocumentLine_nil;
};

NSTransactions::NDN__ArrayOfStockDocumentLine::PrivateDPtr::PrivateDPtr()
    : mStockDocumentLine_nil(true)
{
}


void NSTransactions::NDN__ArrayOfStockDocumentLine::setStockDocumentLine( const QList< NSTransactions::NDN__StockDocumentLine >& arg_stockDocumentLine )
{
    d_ptr->mStockDocumentLine_nil = false;// converter_complextype.cpp:352
    d_ptr->mStockDocumentLine = arg_stockDocumentLine;
}

QList< NSTransactions::NDN__StockDocumentLine > NSTransactions::NDN__ArrayOfStockDocumentLine::stockDocumentLine() const
{
    return d_ptr->mStockDocumentLine;
}

bool NSTransactions::NDN__ArrayOfStockDocumentLine::hasValueForStockDocumentLine() const
{
    return d_ptr->mStockDocumentLine_nil == false;
}

KDSoapValue NSTransactions::NDN__ArrayOfStockDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfStockDocumentLine"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    for (int i = 0; i < d_ptr->mStockDocumentLine.count(); ++i) {// converter_complextype.cpp:692
        KDSoapValue _valueStockDocumentLine(d_ptr->mStockDocumentLine.at(i).serialize(QString::fromLatin1("StockDocumentLine")));// elementargumentserializer.cpp:102
        _valueStockDocumentLine.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStockDocumentLine.setQualified(true);
        _valueStockDocumentLine.setNillable(true);
        args.append(_valueStockDocumentLine);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ArrayOfStockDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("StockDocumentLine")) {// converter_complextype.cpp:483
            NSTransactions::NDN__StockDocumentLine mStockDocumentLineTemp;// converter_complextype.cpp:541
            mStockDocumentLineTemp.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mStockDocumentLine.append(mStockDocumentLineTemp);// converter_complextype.cpp:549
            d_ptr->mStockDocumentLine_nil = false;// converter_complextype.cpp:551
        }
    }
}

NSTransactions::NDN__ArrayOfStockDocumentLine::NDN__ArrayOfStockDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ArrayOfStockDocumentLine::~NDN__ArrayOfStockDocumentLine()
{
}

NSTransactions::NDN__ArrayOfStockDocumentLine::NDN__ArrayOfStockDocumentLine( const NSTransactions::NDN__ArrayOfStockDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ArrayOfStockDocumentLine&  NSTransactions::NDN__ArrayOfStockDocumentLine::operator=( const NSTransactions::NDN__ArrayOfStockDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__DocumentVatBreakDown::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mNetAmount;
    bool mNetAmount_nil;
    float mVATAmount;
    bool mVATAmount_nil;
    NSTransactions::NDN__VATCode mVATCode;
    bool mVATCode_nil;
};

NSTransactions::NDN__DocumentVatBreakDown::PrivateDPtr::PrivateDPtr()
    : mNetAmount(0), mNetAmount_nil(true), mVATAmount(0), mVATAmount_nil(true), mVATCode_nil(true)
{
}


void NSTransactions::NDN__DocumentVatBreakDown::setNetAmount( float arg_netAmount )
{
    d_ptr->mNetAmount_nil = false;// converter_complextype.cpp:352
    d_ptr->mNetAmount = arg_netAmount;
}

float NSTransactions::NDN__DocumentVatBreakDown::netAmount() const
{
    return d_ptr->mNetAmount;
}

bool NSTransactions::NDN__DocumentVatBreakDown::hasValueForNetAmount() const
{
    return d_ptr->mNetAmount_nil == false;
}

void NSTransactions::NDN__DocumentVatBreakDown::setVATAmount( float arg_vATAmount )
{
    d_ptr->mVATAmount_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATAmount = arg_vATAmount;
}

float NSTransactions::NDN__DocumentVatBreakDown::vATAmount() const
{
    return d_ptr->mVATAmount;
}

bool NSTransactions::NDN__DocumentVatBreakDown::hasValueForVATAmount() const
{
    return d_ptr->mVATAmount_nil == false;
}

void NSTransactions::NDN__DocumentVatBreakDown::setVATCode( const NSTransactions::NDN__VATCode& arg_vATCode )
{
    d_ptr->mVATCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATCode = arg_vATCode;
}

NSTransactions::NDN__VATCode NSTransactions::NDN__DocumentVatBreakDown::vATCode() const
{
    return d_ptr->mVATCode;
}

bool NSTransactions::NDN__DocumentVatBreakDown::hasValueForVATCode() const
{
    return d_ptr->mVATCode_nil == false;
}

KDSoapValue NSTransactions::NDN__DocumentVatBreakDown::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("DocumentVatBreakDown"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mNetAmount_nil) {
        KDSoapValue _valueNetAmount = KDSoapValue(QString::fromLatin1("NetAmount"), QVariant::fromValue(d_ptr->mNetAmount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueNetAmount.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetAmount.setQualified(true);
        _valueNetAmount.setNillable(true);
        args.append(_valueNetAmount);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATAmount_nil) {
        KDSoapValue _valueVATAmount = KDSoapValue(QString::fromLatin1("VATAmount"), QVariant::fromValue(d_ptr->mVATAmount), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueVATAmount.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATAmount.setQualified(true);
        _valueVATAmount.setNillable(true);
        args.append(_valueVATAmount);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATCode_nil) {
        KDSoapValue _valueVATCode = d_ptr->mVATCode.serialize(QString::fromLatin1("VATCode"));// elementargumentserializer.cpp:108
        _valueVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATCode.setQualified(true);
        _valueVATCode.setNillable(true);
        args.append(_valueVATCode);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__DocumentVatBreakDown::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("NetAmount")) {// converter_complextype.cpp:483
            d_ptr->mNetAmount = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mNetAmount_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATAmount")) {// converter_complextype.cpp:483
            d_ptr->mVATAmount = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mVATAmount_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATCode")) {// converter_complextype.cpp:483
            d_ptr->mVATCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mVATCode_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__DocumentVatBreakDown::NDN__DocumentVatBreakDown()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__DocumentVatBreakDown::~NDN__DocumentVatBreakDown()
{
}

NSTransactions::NDN__DocumentVatBreakDown::NDN__DocumentVatBreakDown( const NSTransactions::NDN__DocumentVatBreakDown& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__DocumentVatBreakDown&  NSTransactions::NDN__DocumentVatBreakDown::operator=( const NSTransactions::NDN__DocumentVatBreakDown& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSTransactions::NDN__ExciseCategory::NDN__ExciseCategory( const Type &type )
{
    mType = type;
}

void NSTransactions::NDN__ExciseCategory::setType( Type type )
{
    mType = type;
}

NSTransactions::NDN__ExciseCategory::Type NSTransactions::NDN__ExciseCategory::type() const
{
    return mType;
}

NSTransactions::NDN__ExciseCategory::operator Type() const
{
    return mType;
}

KDSoapValue NSTransactions::NDN__ExciseCategory::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSTransactions::NDN__ExciseCategory::Tobacco:
            return KDSoapValue(valueName, "Tobacco", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));
        case NSTransactions::NDN__ExciseCategory::Alcohol:
            return KDSoapValue(valueName, "Alcohol", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));
        case NSTransactions::NDN__ExciseCategory::Other:
            return KDSoapValue(valueName, "Other", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ExciseCategory"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSTransactions::NDN__ExciseCategory::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "Tobacco", NSTransactions::NDN__ExciseCategory::Tobacco },
    { "Alcohol", NSTransactions::NDN__ExciseCategory::Alcohol },
    { "Other", NSTransactions::NDN__ExciseCategory::Other }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__ExciseCategory'.", qPrintable(str) );
}

NSTransactions::NDN__ExciseCategory::NDN__ExciseCategory()
    : mType(Type(0))
{
}

NSTransactions::NDN__ExciseCategory::~NDN__ExciseCategory()
{
}


NSTransactions::NDN__MovementType::NDN__MovementType( const Type &type )
{
    mType = type;
}

void NSTransactions::NDN__MovementType::setType( Type type )
{
    mType = type;
}

NSTransactions::NDN__MovementType::Type NSTransactions::NDN__MovementType::type() const
{
    return mType;
}

NSTransactions::NDN__MovementType::operator Type() const
{
    return mType;
}

KDSoapValue NSTransactions::NDN__MovementType::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSTransactions::NDN__MovementType::AB:
            return KDSoapValue(valueName, "AB", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::ABS:
            return KDSoapValue(valueName, "ABS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::BET:
            return KDSoapValue(valueName, "BET", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::BETS:
            return KDSoapValue(valueName, "BETS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::SVISZ:
            return KDSoapValue(valueName, "SVISZ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::SVISZS:
            return KDSoapValue(valueName, "SVISZS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::KIT:
            return KDSoapValue(valueName, "KIT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::KITS:
            return KDSoapValue(valueName, "KITS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::LELTT:
            return KDSoapValue(valueName, "LELTT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::LELTH:
            return KDSoapValue(valueName, "LELTH", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::EGYT:
            return KDSoapValue(valueName, "EGYT", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::EGYJ:
            return KDSoapValue(valueName, "EGYJ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::ASZLA:
            return KDSoapValue(valueName, "ASZLA", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::ASZLAS:
            return KDSoapValue(valueName, "ASZLAS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::NY:
            return KDSoapValue(valueName, "NY", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::NYS:
            return KDSoapValue(valueName, "NYS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::KSZLA:
            return KDSoapValue(valueName, "KSZLA", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::KSZLAS:
            return KDSoapValue(valueName, "KSZLAS", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        case NSTransactions::NDN__MovementType::VVISZ:
            return KDSoapValue(valueName, "VVISZ", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSTransactions::NDN__MovementType::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AB", NSTransactions::NDN__MovementType::AB },
    { "ABS", NSTransactions::NDN__MovementType::ABS },
    { "BET", NSTransactions::NDN__MovementType::BET },
    { "BETS", NSTransactions::NDN__MovementType::BETS },
    { "SVISZ", NSTransactions::NDN__MovementType::SVISZ },
    { "SVISZS", NSTransactions::NDN__MovementType::SVISZS },
    { "KIT", NSTransactions::NDN__MovementType::KIT },
    { "KITS", NSTransactions::NDN__MovementType::KITS },
    { "LELTT", NSTransactions::NDN__MovementType::LELTT },
    { "LELTH", NSTransactions::NDN__MovementType::LELTH },
    { "EGYT", NSTransactions::NDN__MovementType::EGYT },
    { "EGYJ", NSTransactions::NDN__MovementType::EGYJ },
    { "ASZLA", NSTransactions::NDN__MovementType::ASZLA },
    { "ASZLAS", NSTransactions::NDN__MovementType::ASZLAS },
    { "NY", NSTransactions::NDN__MovementType::NY },
    { "NYS", NSTransactions::NDN__MovementType::NYS },
    { "KSZLA", NSTransactions::NDN__MovementType::KSZLA },
    { "KSZLAS", NSTransactions::NDN__MovementType::KSZLAS },
    { "VVISZ", NSTransactions::NDN__MovementType::VVISZ }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__MovementType'.", qPrintable(str) );
}

NSTransactions::NDN__MovementType::NDN__MovementType()
    : mType(Type(0))
{
}

NSTransactions::NDN__MovementType::~NDN__MovementType()
{
}


class NSTransactions::NDN__OpeningStock::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    KDDateTime mCreatedAt;
    bool mCreatedAt_nil;
    NSTransactions::NDN__ArrayOfOpeningStockLine mLines;
    bool mLines_nil;
    QString mShopId;
    bool mShopId_nil;
};

NSTransactions::NDN__OpeningStock::PrivateDPtr::PrivateDPtr()
    : mCreatedAt_nil(true), mLines_nil(true), mShopId_nil(true)
{
}


void NSTransactions::NDN__OpeningStock::setCreatedAt( const KDDateTime& arg_createdAt )
{
    d_ptr->mCreatedAt_nil = false;// converter_complextype.cpp:352
    d_ptr->mCreatedAt = arg_createdAt;
}

KDDateTime NSTransactions::NDN__OpeningStock::createdAt() const
{
    return d_ptr->mCreatedAt;
}

bool NSTransactions::NDN__OpeningStock::hasValueForCreatedAt() const
{
    return d_ptr->mCreatedAt_nil == false;
}

void NSTransactions::NDN__OpeningStock::setLines( const NSTransactions::NDN__ArrayOfOpeningStockLine& arg_lines )
{
    d_ptr->mLines_nil = false;// converter_complextype.cpp:352
    d_ptr->mLines = arg_lines;
}

NSTransactions::NDN__ArrayOfOpeningStockLine NSTransactions::NDN__OpeningStock::lines() const
{
    return d_ptr->mLines;
}

bool NSTransactions::NDN__OpeningStock::hasValueForLines() const
{
    return d_ptr->mLines_nil == false;
}

void NSTransactions::NDN__OpeningStock::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSTransactions::NDN__OpeningStock::shopId() const
{
    return d_ptr->mShopId;
}

bool NSTransactions::NDN__OpeningStock::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

KDSoapValue NSTransactions::NDN__OpeningStock::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("OpeningStock"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCreatedAt_nil) {
        KDSoapValue _valueCreatedAt = KDSoapValue(QString::fromLatin1("CreatedAt"), d_ptr->mCreatedAt.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueCreatedAt.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCreatedAt.setQualified(true);
        _valueCreatedAt.setNillable(true);
        args.append(_valueCreatedAt);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(d_ptr->mLines.serialize(QString::fromLatin1("Lines")));// elementargumentserializer.cpp:102
        _valueLines.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLines.setQualified(true);
        _valueLines.setNillable(true);
        args.append(_valueLines);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("ShopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__OpeningStock::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CreatedAt")) {// converter_complextype.cpp:483
            d_ptr->mCreatedAt = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mCreatedAt_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Lines")) {// converter_complextype.cpp:483
            d_ptr->mLines.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mLines_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ShopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__OpeningStock::NDN__OpeningStock()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__OpeningStock::~NDN__OpeningStock()
{
}

NSTransactions::NDN__OpeningStock::NDN__OpeningStock( const NSTransactions::NDN__OpeningStock& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__OpeningStock&  NSTransactions::NDN__OpeningStock::operator=( const NSTransactions::NDN__OpeningStock& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__OpeningStockLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mLineNo;
    bool mLineNo_nil;
    QString mLocalProductCode;
    bool mLocalProductCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mProductName;
    bool mProductName_nil;
    float mQuantity;
    bool mQuantity_nil;
};

NSTransactions::NDN__OpeningStockLine::PrivateDPtr::PrivateDPtr()
    : mLineNo(0), mLineNo_nil(true), mLocalProductCode_nil(true), mProductCode_nil(true), mProductGroup(0), mProductGroup_nil(true), mProductName_nil(true), mQuantity(0), mQuantity_nil(true)
{
}


void NSTransactions::NDN__OpeningStockLine::setLineNo( int arg_lineNo )
{
    d_ptr->mLineNo_nil = false;// converter_complextype.cpp:352
    d_ptr->mLineNo = arg_lineNo;
}

int NSTransactions::NDN__OpeningStockLine::lineNo() const
{
    return d_ptr->mLineNo;
}

bool NSTransactions::NDN__OpeningStockLine::hasValueForLineNo() const
{
    return d_ptr->mLineNo_nil == false;
}

void NSTransactions::NDN__OpeningStockLine::setLocalProductCode( const QString& arg_localProductCode )
{
    d_ptr->mLocalProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalProductCode = arg_localProductCode;
}

QString NSTransactions::NDN__OpeningStockLine::localProductCode() const
{
    return d_ptr->mLocalProductCode;
}

bool NSTransactions::NDN__OpeningStockLine::hasValueForLocalProductCode() const
{
    return d_ptr->mLocalProductCode_nil == false;
}

void NSTransactions::NDN__OpeningStockLine::setProductCode( const QString& arg_productCode )
{
    d_ptr->mProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductCode = arg_productCode;
}

QString NSTransactions::NDN__OpeningStockLine::productCode() const
{
    return d_ptr->mProductCode;
}

bool NSTransactions::NDN__OpeningStockLine::hasValueForProductCode() const
{
    return d_ptr->mProductCode_nil == false;
}

void NSTransactions::NDN__OpeningStockLine::setProductGroup( int arg_productGroup )
{
    d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductGroup = arg_productGroup;
}

int NSTransactions::NDN__OpeningStockLine::productGroup() const
{
    return d_ptr->mProductGroup;
}

bool NSTransactions::NDN__OpeningStockLine::hasValueForProductGroup() const
{
    return d_ptr->mProductGroup_nil == false;
}

void NSTransactions::NDN__OpeningStockLine::setProductName( const QString& arg_productName )
{
    d_ptr->mProductName_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductName = arg_productName;
}

QString NSTransactions::NDN__OpeningStockLine::productName() const
{
    return d_ptr->mProductName;
}

bool NSTransactions::NDN__OpeningStockLine::hasValueForProductName() const
{
    return d_ptr->mProductName_nil == false;
}

void NSTransactions::NDN__OpeningStockLine::setQuantity( float arg_quantity )
{
    d_ptr->mQuantity_nil = false;// converter_complextype.cpp:352
    d_ptr->mQuantity = arg_quantity;
}

float NSTransactions::NDN__OpeningStockLine::quantity() const
{
    return d_ptr->mQuantity;
}

bool NSTransactions::NDN__OpeningStockLine::hasValueForQuantity() const
{
    return d_ptr->mQuantity_nil == false;
}

KDSoapValue NSTransactions::NDN__OpeningStockLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("OpeningStockLine"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo = KDSoapValue(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        _valueLineNo.setNillable(true);
        args.append(_valueLineNo);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalProductCode_nil) {
        KDSoapValue _valueLocalProductCode = KDSoapValue(QString::fromLatin1("LocalProductCode"), QVariant::fromValue(d_ptr->mLocalProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalProductCode.setQualified(true);
        _valueLocalProductCode.setNillable(true);
        args.append(_valueLocalProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode = KDSoapValue(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        args.append(_valueProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup = KDSoapValue(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        args.append(_valueProductGroup);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductName_nil) {
        KDSoapValue _valueProductName = KDSoapValue(QString::fromLatin1("ProductName"), QVariant::fromValue(d_ptr->mProductName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductName.setQualified(true);
        _valueProductName.setNillable(true);
        args.append(_valueProductName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mQuantity_nil) {
        KDSoapValue _valueQuantity = KDSoapValue(QString::fromLatin1("Quantity"), QVariant::fromValue(d_ptr->mQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueQuantity.setQualified(true);
        _valueQuantity.setNillable(true);
        args.append(_valueQuantity);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__OpeningStockLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("LineNo")) {// converter_complextype.cpp:483
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mLineNo_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalProductCode")) {// converter_complextype.cpp:483
            d_ptr->mLocalProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductCode")) {// converter_complextype.cpp:483
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:483
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductName")) {// converter_complextype.cpp:483
            d_ptr->mProductName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Quantity")) {// converter_complextype.cpp:483
            d_ptr->mQuantity = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mQuantity_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__OpeningStockLine::NDN__OpeningStockLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__OpeningStockLine::~NDN__OpeningStockLine()
{
}

NSTransactions::NDN__OpeningStockLine::NDN__OpeningStockLine( const NSTransactions::NDN__OpeningStockLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__OpeningStockLine&  NSTransactions::NDN__OpeningStockLine::operator=( const NSTransactions::NDN__OpeningStockLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__Partner::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCity;
    bool mCity_nil;
    QString mLocalPartnerCode;
    bool mLocalPartnerCode_nil;
    QString mName;
    bool mName_nil;
    QString mPostCode;
    bool mPostCode_nil;
    QString mStreet;
    bool mStreet_nil;
};

NSTransactions::NDN__Partner::PrivateDPtr::PrivateDPtr()
    : mCity_nil(true), mLocalPartnerCode_nil(true), mName_nil(true), mPostCode_nil(true), mStreet_nil(true)
{
}


void NSTransactions::NDN__Partner::setCity( const QString& arg_city )
{
    d_ptr->mCity_nil = false;// converter_complextype.cpp:352
    d_ptr->mCity = arg_city;
}

QString NSTransactions::NDN__Partner::city() const
{
    return d_ptr->mCity;
}

bool NSTransactions::NDN__Partner::hasValueForCity() const
{
    return d_ptr->mCity_nil == false;
}

void NSTransactions::NDN__Partner::setLocalPartnerCode( const QString& arg_localPartnerCode )
{
    d_ptr->mLocalPartnerCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalPartnerCode = arg_localPartnerCode;
}

QString NSTransactions::NDN__Partner::localPartnerCode() const
{
    return d_ptr->mLocalPartnerCode;
}

bool NSTransactions::NDN__Partner::hasValueForLocalPartnerCode() const
{
    return d_ptr->mLocalPartnerCode_nil == false;
}

void NSTransactions::NDN__Partner::setName( const QString& arg_name )
{
    d_ptr->mName_nil = false;// converter_complextype.cpp:352
    d_ptr->mName = arg_name;
}

QString NSTransactions::NDN__Partner::name() const
{
    return d_ptr->mName;
}

bool NSTransactions::NDN__Partner::hasValueForName() const
{
    return d_ptr->mName_nil == false;
}

void NSTransactions::NDN__Partner::setPostCode( const QString& arg_postCode )
{
    d_ptr->mPostCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mPostCode = arg_postCode;
}

QString NSTransactions::NDN__Partner::postCode() const
{
    return d_ptr->mPostCode;
}

bool NSTransactions::NDN__Partner::hasValueForPostCode() const
{
    return d_ptr->mPostCode_nil == false;
}

void NSTransactions::NDN__Partner::setStreet( const QString& arg_street )
{
    d_ptr->mStreet_nil = false;// converter_complextype.cpp:352
    d_ptr->mStreet = arg_street;
}

QString NSTransactions::NDN__Partner::street() const
{
    return d_ptr->mStreet;
}

bool NSTransactions::NDN__Partner::hasValueForStreet() const
{
    return d_ptr->mStreet_nil == false;
}

KDSoapValue NSTransactions::NDN__Partner::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Partner"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCity_nil) {
        KDSoapValue _valueCity = KDSoapValue(QString::fromLatin1("City"), QVariant::fromValue(d_ptr->mCity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCity.setQualified(true);
        _valueCity.setNillable(true);
        args.append(_valueCity);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalPartnerCode_nil) {
        KDSoapValue _valueLocalPartnerCode = KDSoapValue(QString::fromLatin1("LocalPartnerCode"), QVariant::fromValue(d_ptr->mLocalPartnerCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalPartnerCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalPartnerCode.setQualified(true);
        _valueLocalPartnerCode.setNillable(true);
        args.append(_valueLocalPartnerCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName = KDSoapValue(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        args.append(_valueName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPostCode_nil) {
        KDSoapValue _valuePostCode = KDSoapValue(QString::fromLatin1("PostCode"), QVariant::fromValue(d_ptr->mPostCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valuePostCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePostCode.setQualified(true);
        _valuePostCode.setNillable(true);
        args.append(_valuePostCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mStreet_nil) {
        KDSoapValue _valueStreet = KDSoapValue(QString::fromLatin1("Street"), QVariant::fromValue(d_ptr->mStreet), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueStreet.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStreet.setQualified(true);
        _valueStreet.setNillable(true);
        args.append(_valueStreet);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__Partner::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("City")) {// converter_complextype.cpp:483
            d_ptr->mCity = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCity_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalPartnerCode")) {// converter_complextype.cpp:483
            d_ptr->mLocalPartnerCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalPartnerCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Name")) {// converter_complextype.cpp:483
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PostCode")) {// converter_complextype.cpp:483
            d_ptr->mPostCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mPostCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Street")) {// converter_complextype.cpp:483
            d_ptr->mStreet = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mStreet_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__Partner::NDN__Partner()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__Partner::~NDN__Partner()
{
}

NSTransactions::NDN__Partner::NDN__Partner( const NSTransactions::NDN__Partner& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__Partner&  NSTransactions::NDN__Partner::operator=( const NSTransactions::NDN__Partner& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSTransactions::NDN__PriceLevelType::NDN__PriceLevelType( const Type &type )
{
    mType = type;
}

void NSTransactions::NDN__PriceLevelType::setType( Type type )
{
    mType = type;
}

NSTransactions::NDN__PriceLevelType::Type NSTransactions::NDN__PriceLevelType::type() const
{
    return mType;
}

NSTransactions::NDN__PriceLevelType::operator Type() const
{
    return mType;
}

KDSoapValue NSTransactions::NDN__PriceLevelType::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSTransactions::NDN__PriceLevelType::A:
            return KDSoapValue(valueName, "A", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("PriceLevelType"));
        case NSTransactions::NDN__PriceLevelType::Z:
            return KDSoapValue(valueName, "Z", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("PriceLevelType"));
        case NSTransactions::NDN__PriceLevelType::N:
            return KDSoapValue(valueName, "N", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("PriceLevelType"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSTransactions::NDN__PriceLevelType::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[3] = {
    { "A", NSTransactions::NDN__PriceLevelType::A },
    { "Z", NSTransactions::NDN__PriceLevelType::Z },
    { "N", NSTransactions::NDN__PriceLevelType::N }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 3; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__PriceLevelType'.", qPrintable(str) );
}

NSTransactions::NDN__PriceLevelType::NDN__PriceLevelType()
    : mType(Type(0))
{
}

NSTransactions::NDN__PriceLevelType::~NDN__PriceLevelType()
{
}


NSTransactions::NDN__ReasonCode_ReasonCodeEnum::NDN__ReasonCode_ReasonCodeEnum( const Type &type )
{
    mType = type;
}

void NSTransactions::NDN__ReasonCode_ReasonCodeEnum::setType( Type type )
{
    mType = type;
}

NSTransactions::NDN__ReasonCode_ReasonCodeEnum::Type NSTransactions::NDN__ReasonCode_ReasonCodeEnum::type() const
{
    return mType;
}

NSTransactions::NDN__ReasonCode_ReasonCodeEnum::operator Type() const
{
    return mType;
}

KDSoapValue NSTransactions::NDN__ReasonCode_ReasonCodeEnum::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSTransactions::NDN__ReasonCode_ReasonCodeEnum::Scrapping:
            return KDSoapValue(valueName, "Scrapping", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSTransactions::NDN__ReasonCode_ReasonCodeEnum::Usage:
            return KDSoapValue(valueName, "Usage", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSTransactions::NDN__ReasonCode_ReasonCodeEnum::OtherLoss:
            return KDSoapValue(valueName, "OtherLoss", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSTransactions::NDN__ReasonCode_ReasonCodeEnum::InventoryCorrection:
            return KDSoapValue(valueName, "InventoryCorrection", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        case NSTransactions::NDN__ReasonCode_ReasonCodeEnum::OtherGain:
            return KDSoapValue(valueName, "OtherGain", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ReasonCode.ReasonCodeEnum"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSTransactions::NDN__ReasonCode_ReasonCodeEnum::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[5] = {
    { "Scrapping", NSTransactions::NDN__ReasonCode_ReasonCodeEnum::Scrapping },
    { "Usage", NSTransactions::NDN__ReasonCode_ReasonCodeEnum::Usage },
    { "OtherLoss", NSTransactions::NDN__ReasonCode_ReasonCodeEnum::OtherLoss },
    { "InventoryCorrection", NSTransactions::NDN__ReasonCode_ReasonCodeEnum::InventoryCorrection },
    { "OtherGain", NSTransactions::NDN__ReasonCode_ReasonCodeEnum::OtherGain }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 5; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__ReasonCode_ReasonCodeEnum'.", qPrintable(str) );
}

NSTransactions::NDN__ReasonCode_ReasonCodeEnum::NDN__ReasonCode_ReasonCodeEnum()
    : mType(Type(0))
{
}

NSTransactions::NDN__ReasonCode_ReasonCodeEnum::~NDN__ReasonCode_ReasonCodeEnum()
{
}


class NSTransactions::NDN__ResponseCode::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCode;
    bool mCode_nil;
    QString mKey;
    bool mKey_nil;
    QString mLocalId;
    bool mLocalId_nil;
    QString mMessage;
    bool mMessage_nil;
};

NSTransactions::NDN__ResponseCode::PrivateDPtr::PrivateDPtr()
    : mCode_nil(true), mKey_nil(true), mLocalId_nil(true), mMessage_nil(true)
{
}


void NSTransactions::NDN__ResponseCode::setCode( const QString& arg_code )
{
    d_ptr->mCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mCode = arg_code;
}

QString NSTransactions::NDN__ResponseCode::code() const
{
    return d_ptr->mCode;
}

bool NSTransactions::NDN__ResponseCode::hasValueForCode() const
{
    return d_ptr->mCode_nil == false;
}

void NSTransactions::NDN__ResponseCode::setKey( const QString& arg_key )
{
    d_ptr->mKey_nil = false;// converter_complextype.cpp:352
    d_ptr->mKey = arg_key;
}

QString NSTransactions::NDN__ResponseCode::key() const
{
    return d_ptr->mKey;
}

bool NSTransactions::NDN__ResponseCode::hasValueForKey() const
{
    return d_ptr->mKey_nil == false;
}

void NSTransactions::NDN__ResponseCode::setLocalId( const QString& arg_localId )
{
    d_ptr->mLocalId_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalId = arg_localId;
}

QString NSTransactions::NDN__ResponseCode::localId() const
{
    return d_ptr->mLocalId;
}

bool NSTransactions::NDN__ResponseCode::hasValueForLocalId() const
{
    return d_ptr->mLocalId_nil == false;
}

void NSTransactions::NDN__ResponseCode::setMessage( const QString& arg_message )
{
    d_ptr->mMessage_nil = false;// converter_complextype.cpp:352
    d_ptr->mMessage = arg_message;
}

QString NSTransactions::NDN__ResponseCode::message() const
{
    return d_ptr->mMessage;
}

bool NSTransactions::NDN__ResponseCode::hasValueForMessage() const
{
    return d_ptr->mMessage_nil == false;
}

KDSoapValue NSTransactions::NDN__ResponseCode::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ResponseCode"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCode_nil) {
        KDSoapValue _valueCode = KDSoapValue(QString::fromLatin1("Code"), QVariant::fromValue(d_ptr->mCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCode.setQualified(true);
        _valueCode.setNillable(true);
        args.append(_valueCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mKey_nil) {
        KDSoapValue _valueKey = KDSoapValue(QString::fromLatin1("Key"), QVariant::fromValue(d_ptr->mKey), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueKey.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueKey.setQualified(true);
        _valueKey.setNillable(true);
        args.append(_valueKey);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalId_nil) {
        KDSoapValue _valueLocalId = KDSoapValue(QString::fromLatin1("LocalId"), QVariant::fromValue(d_ptr->mLocalId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalId.setQualified(true);
        _valueLocalId.setNillable(true);
        args.append(_valueLocalId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mMessage_nil) {
        KDSoapValue _valueMessage = KDSoapValue(QString::fromLatin1("Message"), QVariant::fromValue(d_ptr->mMessage), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueMessage.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMessage.setQualified(true);
        _valueMessage.setNillable(true);
        args.append(_valueMessage);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__ResponseCode::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Code")) {// converter_complextype.cpp:483
            d_ptr->mCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Key")) {// converter_complextype.cpp:483
            d_ptr->mKey = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mKey_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalId")) {// converter_complextype.cpp:483
            d_ptr->mLocalId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Message")) {// converter_complextype.cpp:483
            d_ptr->mMessage = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mMessage_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__ResponseCode::NDN__ResponseCode()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__ResponseCode::~NDN__ResponseCode()
{
}

NSTransactions::NDN__ResponseCode::NDN__ResponseCode( const NSTransactions::NDN__ResponseCode& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__ResponseCode&  NSTransactions::NDN__ResponseCode::operator=( const NSTransactions::NDN__ResponseCode& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__SalesDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mCashRegId;
    bool mCashRegId_nil;
    QString mComment;
    bool mComment_nil;
    KDDateTime mCreatedAt;
    bool mCreatedAt_nil;
    KDDateTime mDocumentDate;
    bool mDocumentDate_nil;
    KDDateTime mDueDate;
    bool mDueDate_nil;
    float mGross;
    bool mGross_nil;
    KDDateTime mIssuedOnDate;
    bool mIssuedOnDate_nil;
    NSTransactions::NDN__ArrayOfSalesDocumentLine mLines;
    bool mLines_nil;
    QString mLocalDocumentId;
    bool mLocalDocumentId_nil;
    NSTransactions::NDN__MovementType mMovementType;
    bool mMovementType_nil;
    NSTransactions::NDN__Partner mPartner;
    bool mPartner_nil;
    QString mReference;
    bool mReference_nil;
    QString mShopId;
    bool mShopId_nil;
    QString mStornoReference;
    bool mStornoReference_nil;
    float mVAT;
    bool mVAT_nil;
    NSTransactions::NDN__ArrayOfDocumentVatBreakDown mVATBreakDown;
    bool mVATBreakDown_nil;
};

NSTransactions::NDN__SalesDocument::PrivateDPtr::PrivateDPtr()
    : mCashRegId_nil(true), mComment_nil(true), mCreatedAt_nil(true), mDocumentDate_nil(true), mDueDate_nil(true), mGross(0), mGross_nil(true), mIssuedOnDate_nil(true), mLines_nil(true), mLocalDocumentId_nil(true), mMovementType_nil(true), mPartner_nil(true), mReference_nil(true), mShopId_nil(true), mStornoReference_nil(true), mVAT(0), mVAT_nil(true), mVATBreakDown_nil(true)
{
}


void NSTransactions::NDN__SalesDocument::setCashRegId( const QString& arg_cashRegId )
{
    d_ptr->mCashRegId_nil = false;// converter_complextype.cpp:352
    d_ptr->mCashRegId = arg_cashRegId;
}

QString NSTransactions::NDN__SalesDocument::cashRegId() const
{
    return d_ptr->mCashRegId;
}

bool NSTransactions::NDN__SalesDocument::hasValueForCashRegId() const
{
    return d_ptr->mCashRegId_nil == false;
}

void NSTransactions::NDN__SalesDocument::setComment( const QString& arg_comment )
{
    d_ptr->mComment_nil = false;// converter_complextype.cpp:352
    d_ptr->mComment = arg_comment;
}

QString NSTransactions::NDN__SalesDocument::comment() const
{
    return d_ptr->mComment;
}

bool NSTransactions::NDN__SalesDocument::hasValueForComment() const
{
    return d_ptr->mComment_nil == false;
}

void NSTransactions::NDN__SalesDocument::setCreatedAt( const KDDateTime& arg_createdAt )
{
    d_ptr->mCreatedAt_nil = false;// converter_complextype.cpp:352
    d_ptr->mCreatedAt = arg_createdAt;
}

KDDateTime NSTransactions::NDN__SalesDocument::createdAt() const
{
    return d_ptr->mCreatedAt;
}

bool NSTransactions::NDN__SalesDocument::hasValueForCreatedAt() const
{
    return d_ptr->mCreatedAt_nil == false;
}

void NSTransactions::NDN__SalesDocument::setDocumentDate( const KDDateTime& arg_documentDate )
{
    d_ptr->mDocumentDate_nil = false;// converter_complextype.cpp:352
    d_ptr->mDocumentDate = arg_documentDate;
}

KDDateTime NSTransactions::NDN__SalesDocument::documentDate() const
{
    return d_ptr->mDocumentDate;
}

bool NSTransactions::NDN__SalesDocument::hasValueForDocumentDate() const
{
    return d_ptr->mDocumentDate_nil == false;
}

void NSTransactions::NDN__SalesDocument::setDueDate( const KDDateTime& arg_dueDate )
{
    d_ptr->mDueDate_nil = false;// converter_complextype.cpp:352
    d_ptr->mDueDate = arg_dueDate;
}

KDDateTime NSTransactions::NDN__SalesDocument::dueDate() const
{
    return d_ptr->mDueDate;
}

bool NSTransactions::NDN__SalesDocument::hasValueForDueDate() const
{
    return d_ptr->mDueDate_nil == false;
}

void NSTransactions::NDN__SalesDocument::setGross( float arg_gross )
{
    d_ptr->mGross_nil = false;// converter_complextype.cpp:352
    d_ptr->mGross = arg_gross;
}

float NSTransactions::NDN__SalesDocument::gross() const
{
    return d_ptr->mGross;
}

bool NSTransactions::NDN__SalesDocument::hasValueForGross() const
{
    return d_ptr->mGross_nil == false;
}

void NSTransactions::NDN__SalesDocument::setIssuedOnDate( const KDDateTime& arg_issuedOnDate )
{
    d_ptr->mIssuedOnDate_nil = false;// converter_complextype.cpp:352
    d_ptr->mIssuedOnDate = arg_issuedOnDate;
}

KDDateTime NSTransactions::NDN__SalesDocument::issuedOnDate() const
{
    return d_ptr->mIssuedOnDate;
}

bool NSTransactions::NDN__SalesDocument::hasValueForIssuedOnDate() const
{
    return d_ptr->mIssuedOnDate_nil == false;
}

void NSTransactions::NDN__SalesDocument::setLines( const NSTransactions::NDN__ArrayOfSalesDocumentLine& arg_lines )
{
    d_ptr->mLines_nil = false;// converter_complextype.cpp:352
    d_ptr->mLines = arg_lines;
}

NSTransactions::NDN__ArrayOfSalesDocumentLine NSTransactions::NDN__SalesDocument::lines() const
{
    return d_ptr->mLines;
}

bool NSTransactions::NDN__SalesDocument::hasValueForLines() const
{
    return d_ptr->mLines_nil == false;
}

void NSTransactions::NDN__SalesDocument::setLocalDocumentId( const QString& arg_localDocumentId )
{
    d_ptr->mLocalDocumentId_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalDocumentId = arg_localDocumentId;
}

QString NSTransactions::NDN__SalesDocument::localDocumentId() const
{
    return d_ptr->mLocalDocumentId;
}

bool NSTransactions::NDN__SalesDocument::hasValueForLocalDocumentId() const
{
    return d_ptr->mLocalDocumentId_nil == false;
}

void NSTransactions::NDN__SalesDocument::setMovementType( const NSTransactions::NDN__MovementType& arg_movementType )
{
    d_ptr->mMovementType_nil = false;// converter_complextype.cpp:352
    d_ptr->mMovementType = arg_movementType;
}

NSTransactions::NDN__MovementType NSTransactions::NDN__SalesDocument::movementType() const
{
    return d_ptr->mMovementType;
}

bool NSTransactions::NDN__SalesDocument::hasValueForMovementType() const
{
    return d_ptr->mMovementType_nil == false;
}

void NSTransactions::NDN__SalesDocument::setPartner( const NSTransactions::NDN__Partner& arg_partner )
{
    d_ptr->mPartner_nil = false;// converter_complextype.cpp:352
    d_ptr->mPartner = arg_partner;
}

NSTransactions::NDN__Partner NSTransactions::NDN__SalesDocument::partner() const
{
    return d_ptr->mPartner;
}

bool NSTransactions::NDN__SalesDocument::hasValueForPartner() const
{
    return d_ptr->mPartner_nil == false;
}

void NSTransactions::NDN__SalesDocument::setReference( const QString& arg_reference )
{
    d_ptr->mReference_nil = false;// converter_complextype.cpp:352
    d_ptr->mReference = arg_reference;
}

QString NSTransactions::NDN__SalesDocument::reference() const
{
    return d_ptr->mReference;
}

bool NSTransactions::NDN__SalesDocument::hasValueForReference() const
{
    return d_ptr->mReference_nil == false;
}

void NSTransactions::NDN__SalesDocument::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId_nil = false;// converter_complextype.cpp:352
    d_ptr->mShopId = arg_shopId;
}

QString NSTransactions::NDN__SalesDocument::shopId() const
{
    return d_ptr->mShopId;
}

bool NSTransactions::NDN__SalesDocument::hasValueForShopId() const
{
    return d_ptr->mShopId_nil == false;
}

void NSTransactions::NDN__SalesDocument::setStornoReference( const QString& arg_stornoReference )
{
    d_ptr->mStornoReference_nil = false;// converter_complextype.cpp:352
    d_ptr->mStornoReference = arg_stornoReference;
}

QString NSTransactions::NDN__SalesDocument::stornoReference() const
{
    return d_ptr->mStornoReference;
}

bool NSTransactions::NDN__SalesDocument::hasValueForStornoReference() const
{
    return d_ptr->mStornoReference_nil == false;
}

void NSTransactions::NDN__SalesDocument::setVAT( float arg_vAT )
{
    d_ptr->mVAT_nil = false;// converter_complextype.cpp:352
    d_ptr->mVAT = arg_vAT;
}

float NSTransactions::NDN__SalesDocument::vAT() const
{
    return d_ptr->mVAT;
}

bool NSTransactions::NDN__SalesDocument::hasValueForVAT() const
{
    return d_ptr->mVAT_nil == false;
}

void NSTransactions::NDN__SalesDocument::setVATBreakDown( const NSTransactions::NDN__ArrayOfDocumentVatBreakDown& arg_vATBreakDown )
{
    d_ptr->mVATBreakDown_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATBreakDown = arg_vATBreakDown;
}

NSTransactions::NDN__ArrayOfDocumentVatBreakDown NSTransactions::NDN__SalesDocument::vATBreakDown() const
{
    return d_ptr->mVATBreakDown;
}

bool NSTransactions::NDN__SalesDocument::hasValueForVATBreakDown() const
{
    return d_ptr->mVATBreakDown_nil == false;
}

KDSoapValue NSTransactions::NDN__SalesDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("SalesDocument"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCashRegId_nil) {
        KDSoapValue _valueCashRegId = KDSoapValue(QString::fromLatin1("CashRegId"), QVariant::fromValue(d_ptr->mCashRegId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueCashRegId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCashRegId.setQualified(true);
        _valueCashRegId.setNillable(true);
        args.append(_valueCashRegId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mComment_nil) {
        KDSoapValue _valueComment = KDSoapValue(QString::fromLatin1("Comment"), QVariant::fromValue(d_ptr->mComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueComment.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueComment.setQualified(true);
        _valueComment.setNillable(true);
        args.append(_valueComment);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mCreatedAt_nil) {
        KDSoapValue _valueCreatedAt = KDSoapValue(QString::fromLatin1("CreatedAt"), d_ptr->mCreatedAt.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueCreatedAt.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCreatedAt.setQualified(true);
        _valueCreatedAt.setNillable(true);
        args.append(_valueCreatedAt);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mDocumentDate_nil) {
        KDSoapValue _valueDocumentDate = KDSoapValue(QString::fromLatin1("DocumentDate"), d_ptr->mDocumentDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueDocumentDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDocumentDate.setQualified(true);
        _valueDocumentDate.setNillable(true);
        args.append(_valueDocumentDate);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mDueDate_nil) {
        KDSoapValue _valueDueDate = KDSoapValue(QString::fromLatin1("DueDate"), d_ptr->mDueDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueDueDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDueDate.setQualified(true);
        _valueDueDate.setNillable(true);
        args.append(_valueDueDate);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGross_nil) {
        KDSoapValue _valueGross = KDSoapValue(QString::fromLatin1("Gross"), QVariant::fromValue(d_ptr->mGross), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGross.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGross.setQualified(true);
        _valueGross.setNillable(true);
        args.append(_valueGross);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mIssuedOnDate_nil) {
        KDSoapValue _valueIssuedOnDate = KDSoapValue(QString::fromLatin1("IssuedOnDate"), d_ptr->mIssuedOnDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
        _valueIssuedOnDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueIssuedOnDate.setQualified(true);
        _valueIssuedOnDate.setNillable(true);
        args.append(_valueIssuedOnDate);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(d_ptr->mLines.serialize(QString::fromLatin1("Lines")));// elementargumentserializer.cpp:102
        _valueLines.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLines.setQualified(true);
        _valueLines.setNillable(true);
        args.append(_valueLines);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalDocumentId_nil) {
        KDSoapValue _valueLocalDocumentId = KDSoapValue(QString::fromLatin1("LocalDocumentId"), QVariant::fromValue(d_ptr->mLocalDocumentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalDocumentId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalDocumentId.setQualified(true);
        _valueLocalDocumentId.setNillable(true);
        args.append(_valueLocalDocumentId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mMovementType_nil) {
        KDSoapValue _valueMovementType = d_ptr->mMovementType.serialize(QString::fromLatin1("MovementType"));// elementargumentserializer.cpp:108
        _valueMovementType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueMovementType.setQualified(true);
        _valueMovementType.setNillable(true);
        args.append(_valueMovementType);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPartner_nil) {
        KDSoapValue _valuePartner(d_ptr->mPartner.serialize(QString::fromLatin1("Partner")));// elementargumentserializer.cpp:102
        _valuePartner.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePartner.setQualified(true);
        _valuePartner.setNillable(true);
        args.append(_valuePartner);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mReference_nil) {
        KDSoapValue _valueReference = KDSoapValue(QString::fromLatin1("Reference"), QVariant::fromValue(d_ptr->mReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReference.setQualified(true);
        _valueReference.setNillable(true);
        args.append(_valueReference);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("ShopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        args.append(_valueShopId);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mStornoReference_nil) {
        KDSoapValue _valueStornoReference = KDSoapValue(QString::fromLatin1("StornoReference"), QVariant::fromValue(d_ptr->mStornoReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueStornoReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStornoReference.setQualified(true);
        _valueStornoReference.setNillable(true);
        args.append(_valueStornoReference);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVAT_nil) {
        KDSoapValue _valueVAT = KDSoapValue(QString::fromLatin1("VAT"), QVariant::fromValue(d_ptr->mVAT), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueVAT.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVAT.setQualified(true);
        _valueVAT.setNillable(true);
        args.append(_valueVAT);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATBreakDown_nil) {
        KDSoapValue _valueVATBreakDown(d_ptr->mVATBreakDown.serialize(QString::fromLatin1("VATBreakDown")));// elementargumentserializer.cpp:102
        _valueVATBreakDown.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATBreakDown.setQualified(true);
        _valueVATBreakDown.setNillable(true);
        args.append(_valueVATBreakDown);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__SalesDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CashRegId")) {// converter_complextype.cpp:483
            d_ptr->mCashRegId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mCashRegId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Comment")) {// converter_complextype.cpp:483
            d_ptr->mComment = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mComment_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("CreatedAt")) {// converter_complextype.cpp:483
            d_ptr->mCreatedAt = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mCreatedAt_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("DocumentDate")) {// converter_complextype.cpp:483
            d_ptr->mDocumentDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mDocumentDate_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("DueDate")) {// converter_complextype.cpp:483
            d_ptr->mDueDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mDueDate_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Gross")) {// converter_complextype.cpp:483
            d_ptr->mGross = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGross_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("IssuedOnDate")) {// converter_complextype.cpp:483
            d_ptr->mIssuedOnDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
            d_ptr->mIssuedOnDate_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Lines")) {// converter_complextype.cpp:483
            d_ptr->mLines.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mLines_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalDocumentId")) {// converter_complextype.cpp:483
            d_ptr->mLocalDocumentId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalDocumentId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("MovementType")) {// converter_complextype.cpp:483
            d_ptr->mMovementType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mMovementType_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Partner")) {// converter_complextype.cpp:483
            d_ptr->mPartner.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mPartner_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Reference")) {// converter_complextype.cpp:483
            d_ptr->mReference = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mReference_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ShopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mShopId_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("StornoReference")) {// converter_complextype.cpp:483
            d_ptr->mStornoReference = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mStornoReference_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VAT")) {// converter_complextype.cpp:483
            d_ptr->mVAT = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mVAT_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATBreakDown")) {// converter_complextype.cpp:483
            d_ptr->mVATBreakDown.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mVATBreakDown_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__SalesDocument::NDN__SalesDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__SalesDocument::~NDN__SalesDocument()
{
}

NSTransactions::NDN__SalesDocument::NDN__SalesDocument( const NSTransactions::NDN__SalesDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__SalesDocument&  NSTransactions::NDN__SalesDocument::operator=( const NSTransactions::NDN__SalesDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__SalesDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mDiscountValue;
    bool mDiscountValue_nil;
    NSTransactions::NDN__ExciseCategory mExciseCategory;
    bool mExciseCategory_nil;
    float mGrossConsumerPrice;
    bool mGrossConsumerPrice_nil;
    float mGrossLineTotal;
    bool mGrossLineTotal_nil;
    float mGrossUnitPrice;
    bool mGrossUnitPrice_nil;
    int mLineNo;
    bool mLineNo_nil;
    QString mLocalProductCode;
    bool mLocalProductCode_nil;
    float mNetListPrice;
    bool mNetListPrice_nil;
    float mNetUnitPrice;
    bool mNetUnitPrice_nil;
    float mPackagingQuantity;
    bool mPackagingQuantity_nil;
    QString mPackagingUnitOfMeasure;
    bool mPackagingUnitOfMeasure_nil;
    NSTransactions::NDN__PriceLevelType mPriceLevelType;
    bool mPriceLevelType_nil;
    QString mProductBarCode;
    bool mProductBarCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mProductName;
    bool mProductName_nil;
    float mProductStockPrice;
    bool mProductStockPrice_nil;
    float mQuantity;
    bool mQuantity_nil;
    QString mUnitOfMeasure;
    bool mUnitOfMeasure_nil;
    NSTransactions::NDN__VATCode mVATCode;
    bool mVATCode_nil;
    float mVATLineTotal;
    bool mVATLineTotal_nil;
    float mVATPercent;
    bool mVATPercent_nil;
};

NSTransactions::NDN__SalesDocumentLine::PrivateDPtr::PrivateDPtr()
    : mDiscountValue(0), mDiscountValue_nil(true), mExciseCategory_nil(true), mGrossConsumerPrice(0), mGrossConsumerPrice_nil(true), mGrossLineTotal(0), mGrossLineTotal_nil(true), mGrossUnitPrice(0), mGrossUnitPrice_nil(true), mLineNo(0), mLineNo_nil(true), mLocalProductCode_nil(true), mNetListPrice(0), mNetListPrice_nil(true), mNetUnitPrice(0), mNetUnitPrice_nil(true), mPackagingQuantity(0), mPackagingQuantity_nil(true), mPackagingUnitOfMeasure_nil(true), mPriceLevelType_nil(true), mProductBarCode_nil(true), mProductCode_nil(true), mProductGroup(0), mProductGroup_nil(true), mProductName_nil(true), mProductStockPrice(0), mProductStockPrice_nil(true), mQuantity(0), mQuantity_nil(true), mUnitOfMeasure_nil(true), mVATCode_nil(true), mVATLineTotal(0), mVATLineTotal_nil(true), mVATPercent(0), mVATPercent_nil(true)
{
}


void NSTransactions::NDN__SalesDocumentLine::setDiscountValue( float arg_discountValue )
{
    d_ptr->mDiscountValue_nil = false;// converter_complextype.cpp:352
    d_ptr->mDiscountValue = arg_discountValue;
}

float NSTransactions::NDN__SalesDocumentLine::discountValue() const
{
    return d_ptr->mDiscountValue;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForDiscountValue() const
{
    return d_ptr->mDiscountValue_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setExciseCategory( const NSTransactions::NDN__ExciseCategory& arg_exciseCategory )
{
    d_ptr->mExciseCategory_nil = false;// converter_complextype.cpp:352
    d_ptr->mExciseCategory = arg_exciseCategory;
}

NSTransactions::NDN__ExciseCategory NSTransactions::NDN__SalesDocumentLine::exciseCategory() const
{
    return d_ptr->mExciseCategory;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForExciseCategory() const
{
    return d_ptr->mExciseCategory_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setGrossConsumerPrice( float arg_grossConsumerPrice )
{
    d_ptr->mGrossConsumerPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mGrossConsumerPrice = arg_grossConsumerPrice;
}

float NSTransactions::NDN__SalesDocumentLine::grossConsumerPrice() const
{
    return d_ptr->mGrossConsumerPrice;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForGrossConsumerPrice() const
{
    return d_ptr->mGrossConsumerPrice_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setGrossLineTotal( float arg_grossLineTotal )
{
    d_ptr->mGrossLineTotal_nil = false;// converter_complextype.cpp:352
    d_ptr->mGrossLineTotal = arg_grossLineTotal;
}

float NSTransactions::NDN__SalesDocumentLine::grossLineTotal() const
{
    return d_ptr->mGrossLineTotal;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForGrossLineTotal() const
{
    return d_ptr->mGrossLineTotal_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setGrossUnitPrice( float arg_grossUnitPrice )
{
    d_ptr->mGrossUnitPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mGrossUnitPrice = arg_grossUnitPrice;
}

float NSTransactions::NDN__SalesDocumentLine::grossUnitPrice() const
{
    return d_ptr->mGrossUnitPrice;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForGrossUnitPrice() const
{
    return d_ptr->mGrossUnitPrice_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setLineNo( int arg_lineNo )
{
    d_ptr->mLineNo_nil = false;// converter_complextype.cpp:352
    d_ptr->mLineNo = arg_lineNo;
}

int NSTransactions::NDN__SalesDocumentLine::lineNo() const
{
    return d_ptr->mLineNo;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForLineNo() const
{
    return d_ptr->mLineNo_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setLocalProductCode( const QString& arg_localProductCode )
{
    d_ptr->mLocalProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalProductCode = arg_localProductCode;
}

QString NSTransactions::NDN__SalesDocumentLine::localProductCode() const
{
    return d_ptr->mLocalProductCode;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForLocalProductCode() const
{
    return d_ptr->mLocalProductCode_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setNetListPrice( float arg_netListPrice )
{
    d_ptr->mNetListPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mNetListPrice = arg_netListPrice;
}

float NSTransactions::NDN__SalesDocumentLine::netListPrice() const
{
    return d_ptr->mNetListPrice;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForNetListPrice() const
{
    return d_ptr->mNetListPrice_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setNetUnitPrice( float arg_netUnitPrice )
{
    d_ptr->mNetUnitPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mNetUnitPrice = arg_netUnitPrice;
}

float NSTransactions::NDN__SalesDocumentLine::netUnitPrice() const
{
    return d_ptr->mNetUnitPrice;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForNetUnitPrice() const
{
    return d_ptr->mNetUnitPrice_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setPackagingQuantity( float arg_packagingQuantity )
{
    d_ptr->mPackagingQuantity_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingQuantity = arg_packagingQuantity;
}

float NSTransactions::NDN__SalesDocumentLine::packagingQuantity() const
{
    return d_ptr->mPackagingQuantity;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForPackagingQuantity() const
{
    return d_ptr->mPackagingQuantity_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setPackagingUnitOfMeasure( const QString& arg_packagingUnitOfMeasure )
{
    d_ptr->mPackagingUnitOfMeasure_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingUnitOfMeasure = arg_packagingUnitOfMeasure;
}

QString NSTransactions::NDN__SalesDocumentLine::packagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForPackagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setPriceLevelType( const NSTransactions::NDN__PriceLevelType& arg_priceLevelType )
{
    d_ptr->mPriceLevelType_nil = false;// converter_complextype.cpp:352
    d_ptr->mPriceLevelType = arg_priceLevelType;
}

NSTransactions::NDN__PriceLevelType NSTransactions::NDN__SalesDocumentLine::priceLevelType() const
{
    return d_ptr->mPriceLevelType;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForPriceLevelType() const
{
    return d_ptr->mPriceLevelType_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setProductBarCode( const QString& arg_productBarCode )
{
    d_ptr->mProductBarCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductBarCode = arg_productBarCode;
}

QString NSTransactions::NDN__SalesDocumentLine::productBarCode() const
{
    return d_ptr->mProductBarCode;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForProductBarCode() const
{
    return d_ptr->mProductBarCode_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setProductCode( const QString& arg_productCode )
{
    d_ptr->mProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductCode = arg_productCode;
}

QString NSTransactions::NDN__SalesDocumentLine::productCode() const
{
    return d_ptr->mProductCode;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForProductCode() const
{
    return d_ptr->mProductCode_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setProductGroup( int arg_productGroup )
{
    d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductGroup = arg_productGroup;
}

int NSTransactions::NDN__SalesDocumentLine::productGroup() const
{
    return d_ptr->mProductGroup;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForProductGroup() const
{
    return d_ptr->mProductGroup_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setProductName( const QString& arg_productName )
{
    d_ptr->mProductName_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductName = arg_productName;
}

QString NSTransactions::NDN__SalesDocumentLine::productName() const
{
    return d_ptr->mProductName;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForProductName() const
{
    return d_ptr->mProductName_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setProductStockPrice( float arg_productStockPrice )
{
    d_ptr->mProductStockPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductStockPrice = arg_productStockPrice;
}

float NSTransactions::NDN__SalesDocumentLine::productStockPrice() const
{
    return d_ptr->mProductStockPrice;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForProductStockPrice() const
{
    return d_ptr->mProductStockPrice_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setQuantity( float arg_quantity )
{
    d_ptr->mQuantity_nil = false;// converter_complextype.cpp:352
    d_ptr->mQuantity = arg_quantity;
}

float NSTransactions::NDN__SalesDocumentLine::quantity() const
{
    return d_ptr->mQuantity;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForQuantity() const
{
    return d_ptr->mQuantity_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setUnitOfMeasure( const QString& arg_unitOfMeasure )
{
    d_ptr->mUnitOfMeasure_nil = false;// converter_complextype.cpp:352
    d_ptr->mUnitOfMeasure = arg_unitOfMeasure;
}

QString NSTransactions::NDN__SalesDocumentLine::unitOfMeasure() const
{
    return d_ptr->mUnitOfMeasure;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForUnitOfMeasure() const
{
    return d_ptr->mUnitOfMeasure_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setVATCode( const NSTransactions::NDN__VATCode& arg_vATCode )
{
    d_ptr->mVATCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATCode = arg_vATCode;
}

NSTransactions::NDN__VATCode NSTransactions::NDN__SalesDocumentLine::vATCode() const
{
    return d_ptr->mVATCode;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForVATCode() const
{
    return d_ptr->mVATCode_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setVATLineTotal( float arg_vATLineTotal )
{
    d_ptr->mVATLineTotal_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATLineTotal = arg_vATLineTotal;
}

float NSTransactions::NDN__SalesDocumentLine::vATLineTotal() const
{
    return d_ptr->mVATLineTotal;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForVATLineTotal() const
{
    return d_ptr->mVATLineTotal_nil == false;
}

void NSTransactions::NDN__SalesDocumentLine::setVATPercent( float arg_vATPercent )
{
    d_ptr->mVATPercent_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATPercent = arg_vATPercent;
}

float NSTransactions::NDN__SalesDocumentLine::vATPercent() const
{
    return d_ptr->mVATPercent;
}

bool NSTransactions::NDN__SalesDocumentLine::hasValueForVATPercent() const
{
    return d_ptr->mVATPercent_nil == false;
}

KDSoapValue NSTransactions::NDN__SalesDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("SalesDocumentLine"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mDiscountValue_nil) {
        KDSoapValue _valueDiscountValue = KDSoapValue(QString::fromLatin1("DiscountValue"), QVariant::fromValue(d_ptr->mDiscountValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueDiscountValue.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDiscountValue.setQualified(true);
        _valueDiscountValue.setNillable(true);
        args.append(_valueDiscountValue);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mExciseCategory_nil) {
        KDSoapValue _valueExciseCategory = d_ptr->mExciseCategory.serialize(QString::fromLatin1("ExciseCategory"));// elementargumentserializer.cpp:108
        _valueExciseCategory.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueExciseCategory.setQualified(true);
        _valueExciseCategory.setNillable(true);
        args.append(_valueExciseCategory);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGrossConsumerPrice_nil) {
        KDSoapValue _valueGrossConsumerPrice = KDSoapValue(QString::fromLatin1("GrossConsumerPrice"), QVariant::fromValue(d_ptr->mGrossConsumerPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGrossConsumerPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossConsumerPrice.setQualified(true);
        _valueGrossConsumerPrice.setNillable(true);
        args.append(_valueGrossConsumerPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGrossLineTotal_nil) {
        KDSoapValue _valueGrossLineTotal = KDSoapValue(QString::fromLatin1("GrossLineTotal"), QVariant::fromValue(d_ptr->mGrossLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGrossLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossLineTotal.setQualified(true);
        _valueGrossLineTotal.setNillable(true);
        args.append(_valueGrossLineTotal);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGrossUnitPrice_nil) {
        KDSoapValue _valueGrossUnitPrice = KDSoapValue(QString::fromLatin1("GrossUnitPrice"), QVariant::fromValue(d_ptr->mGrossUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGrossUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossUnitPrice.setQualified(true);
        _valueGrossUnitPrice.setNillable(true);
        args.append(_valueGrossUnitPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo = KDSoapValue(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        _valueLineNo.setNillable(true);
        args.append(_valueLineNo);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalProductCode_nil) {
        KDSoapValue _valueLocalProductCode = KDSoapValue(QString::fromLatin1("LocalProductCode"), QVariant::fromValue(d_ptr->mLocalProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalProductCode.setQualified(true);
        _valueLocalProductCode.setNillable(true);
        args.append(_valueLocalProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mNetListPrice_nil) {
        KDSoapValue _valueNetListPrice = KDSoapValue(QString::fromLatin1("NetListPrice"), QVariant::fromValue(d_ptr->mNetListPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueNetListPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetListPrice.setQualified(true);
        _valueNetListPrice.setNillable(true);
        args.append(_valueNetListPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mNetUnitPrice_nil) {
        KDSoapValue _valueNetUnitPrice = KDSoapValue(QString::fromLatin1("NetUnitPrice"), QVariant::fromValue(d_ptr->mNetUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueNetUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetUnitPrice.setQualified(true);
        _valueNetUnitPrice.setNillable(true);
        args.append(_valueNetUnitPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingQuantity_nil) {
        KDSoapValue _valuePackagingQuantity = KDSoapValue(QString::fromLatin1("PackagingQuantity"), QVariant::fromValue(d_ptr->mPackagingQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valuePackagingQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingQuantity.setQualified(true);
        _valuePackagingQuantity.setNillable(true);
        args.append(_valuePackagingQuantity);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingUnitOfMeasure_nil) {
        KDSoapValue _valuePackagingUnitOfMeasure = KDSoapValue(QString::fromLatin1("PackagingUnitOfMeasure"), QVariant::fromValue(d_ptr->mPackagingUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valuePackagingUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitOfMeasure.setQualified(true);
        _valuePackagingUnitOfMeasure.setNillable(true);
        args.append(_valuePackagingUnitOfMeasure);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPriceLevelType_nil) {
        KDSoapValue _valuePriceLevelType = d_ptr->mPriceLevelType.serialize(QString::fromLatin1("PriceLevelType"));// elementargumentserializer.cpp:108
        _valuePriceLevelType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePriceLevelType.setQualified(true);
        _valuePriceLevelType.setNillable(true);
        args.append(_valuePriceLevelType);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductBarCode_nil) {
        KDSoapValue _valueProductBarCode = KDSoapValue(QString::fromLatin1("ProductBarCode"), QVariant::fromValue(d_ptr->mProductBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductBarCode.setQualified(true);
        _valueProductBarCode.setNillable(true);
        args.append(_valueProductBarCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode = KDSoapValue(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        args.append(_valueProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup = KDSoapValue(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        args.append(_valueProductGroup);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductName_nil) {
        KDSoapValue _valueProductName = KDSoapValue(QString::fromLatin1("ProductName"), QVariant::fromValue(d_ptr->mProductName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductName.setQualified(true);
        _valueProductName.setNillable(true);
        args.append(_valueProductName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductStockPrice_nil) {
        KDSoapValue _valueProductStockPrice = KDSoapValue(QString::fromLatin1("ProductStockPrice"), QVariant::fromValue(d_ptr->mProductStockPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueProductStockPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductStockPrice.setQualified(true);
        _valueProductStockPrice.setNillable(true);
        args.append(_valueProductStockPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mQuantity_nil) {
        KDSoapValue _valueQuantity = KDSoapValue(QString::fromLatin1("Quantity"), QVariant::fromValue(d_ptr->mQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueQuantity.setQualified(true);
        _valueQuantity.setNillable(true);
        args.append(_valueQuantity);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mUnitOfMeasure_nil) {
        KDSoapValue _valueUnitOfMeasure = KDSoapValue(QString::fromLatin1("UnitOfMeasure"), QVariant::fromValue(d_ptr->mUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueUnitOfMeasure.setQualified(true);
        _valueUnitOfMeasure.setNillable(true);
        args.append(_valueUnitOfMeasure);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATCode_nil) {
        KDSoapValue _valueVATCode = d_ptr->mVATCode.serialize(QString::fromLatin1("VATCode"));// elementargumentserializer.cpp:108
        _valueVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATCode.setQualified(true);
        _valueVATCode.setNillable(true);
        args.append(_valueVATCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATLineTotal_nil) {
        KDSoapValue _valueVATLineTotal = KDSoapValue(QString::fromLatin1("VATLineTotal"), QVariant::fromValue(d_ptr->mVATLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueVATLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATLineTotal.setQualified(true);
        _valueVATLineTotal.setNillable(true);
        args.append(_valueVATLineTotal);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATPercent_nil) {
        KDSoapValue _valueVATPercent = KDSoapValue(QString::fromLatin1("VATPercent"), QVariant::fromValue(d_ptr->mVATPercent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueVATPercent.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATPercent.setQualified(true);
        _valueVATPercent.setNillable(true);
        args.append(_valueVATPercent);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__SalesDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DiscountValue")) {// converter_complextype.cpp:483
            d_ptr->mDiscountValue = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mDiscountValue_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ExciseCategory")) {// converter_complextype.cpp:483
            d_ptr->mExciseCategory.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mExciseCategory_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("GrossConsumerPrice")) {// converter_complextype.cpp:483
            d_ptr->mGrossConsumerPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGrossConsumerPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("GrossLineTotal")) {// converter_complextype.cpp:483
            d_ptr->mGrossLineTotal = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGrossLineTotal_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("GrossUnitPrice")) {// converter_complextype.cpp:483
            d_ptr->mGrossUnitPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGrossUnitPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LineNo")) {// converter_complextype.cpp:483
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mLineNo_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalProductCode")) {// converter_complextype.cpp:483
            d_ptr->mLocalProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("NetListPrice")) {// converter_complextype.cpp:483
            d_ptr->mNetListPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mNetListPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("NetUnitPrice")) {// converter_complextype.cpp:483
            d_ptr->mNetUnitPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mNetUnitPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingQuantity")) {// converter_complextype.cpp:483
            d_ptr->mPackagingQuantity = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mPackagingQuantity_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingUnitOfMeasure")) {// converter_complextype.cpp:483
            d_ptr->mPackagingUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mPackagingUnitOfMeasure_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PriceLevelType")) {// converter_complextype.cpp:483
            d_ptr->mPriceLevelType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mPriceLevelType_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductBarCode")) {// converter_complextype.cpp:483
            d_ptr->mProductBarCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductBarCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductCode")) {// converter_complextype.cpp:483
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:483
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductName")) {// converter_complextype.cpp:483
            d_ptr->mProductName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductStockPrice")) {// converter_complextype.cpp:483
            d_ptr->mProductStockPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mProductStockPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Quantity")) {// converter_complextype.cpp:483
            d_ptr->mQuantity = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mQuantity_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("UnitOfMeasure")) {// converter_complextype.cpp:483
            d_ptr->mUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mUnitOfMeasure_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATCode")) {// converter_complextype.cpp:483
            d_ptr->mVATCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mVATCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATLineTotal")) {// converter_complextype.cpp:483
            d_ptr->mVATLineTotal = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mVATLineTotal_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATPercent")) {// converter_complextype.cpp:483
            d_ptr->mVATPercent = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mVATPercent_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__SalesDocumentLine::NDN__SalesDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__SalesDocumentLine::~NDN__SalesDocumentLine()
{
}

NSTransactions::NDN__SalesDocumentLine::NDN__SalesDocumentLine( const NSTransactions::NDN__SalesDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__SalesDocumentLine&  NSTransactions::NDN__SalesDocumentLine::operator=( const NSTransactions::NDN__SalesDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__StockDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mComment;
    bool mComment_nil;
    KDDateTime mCreatedAt;
    KDDateTime mDocumentDate;
    float mGross;
    KDDateTime mIssuedOnDate;
    NSTransactions::NDN__ArrayOfStockDocumentLine mLines;
    bool mLines_nil;
    QString mLocalDocumentId;
    NSTransactions::NDN__MovementType mMovementType;
    NSTransactions::NDN__Partner mPartner;
    bool mPartner_nil;
    QString mReason;
    bool mReason_nil;
    NSTransactions::NDN__ReasonCode_ReasonCodeEnum mReasonCode;
    bool mReasonCode_nil;
    QString mReference;
    bool mReference_nil;
    QString mShopId;
    QString mStornoReference;
    bool mStornoReference_nil;
    float mVAT;
    NSTransactions::NDN__ArrayOfDocumentVatBreakDown mVATBreakDown;
    bool mVATBreakDown_nil;
};

NSTransactions::NDN__StockDocument::PrivateDPtr::PrivateDPtr()
    : mComment_nil(true), mGross(0), mLines_nil(true), mPartner_nil(true), mReason_nil(true), mReasonCode_nil(true), mReference_nil(true), mStornoReference_nil(true), mVAT(0), mVATBreakDown_nil(true)
{
}


void NSTransactions::NDN__StockDocument::setComment( const QString& arg_comment )
{
    d_ptr->mComment_nil = false;// converter_complextype.cpp:352
    d_ptr->mComment = arg_comment;
}

QString NSTransactions::NDN__StockDocument::comment() const
{
    return d_ptr->mComment;
}

bool NSTransactions::NDN__StockDocument::hasValueForComment() const
{
    return d_ptr->mComment_nil == false;
}

void NSTransactions::NDN__StockDocument::setCreatedAt( const KDDateTime& arg_createdAt )
{
    d_ptr->mCreatedAt = arg_createdAt;
}

KDDateTime NSTransactions::NDN__StockDocument::createdAt() const
{
    return d_ptr->mCreatedAt;
}

void NSTransactions::NDN__StockDocument::setDocumentDate( const KDDateTime& arg_documentDate )
{
    d_ptr->mDocumentDate = arg_documentDate;
}

KDDateTime NSTransactions::NDN__StockDocument::documentDate() const
{
    return d_ptr->mDocumentDate;
}

void NSTransactions::NDN__StockDocument::setGross( float arg_gross )
{
    d_ptr->mGross = arg_gross;
}

float NSTransactions::NDN__StockDocument::gross() const
{
    return d_ptr->mGross;
}

void NSTransactions::NDN__StockDocument::setIssuedOnDate( const KDDateTime& arg_issuedOnDate )
{
    d_ptr->mIssuedOnDate = arg_issuedOnDate;
}

KDDateTime NSTransactions::NDN__StockDocument::issuedOnDate() const
{
    return d_ptr->mIssuedOnDate;
}

void NSTransactions::NDN__StockDocument::setLines( const NSTransactions::NDN__ArrayOfStockDocumentLine& arg_lines )
{
    d_ptr->mLines_nil = false;// converter_complextype.cpp:352
    d_ptr->mLines = arg_lines;
}

NSTransactions::NDN__ArrayOfStockDocumentLine NSTransactions::NDN__StockDocument::lines() const
{
    return d_ptr->mLines;
}

bool NSTransactions::NDN__StockDocument::hasValueForLines() const
{
    return d_ptr->mLines_nil == false;
}

void NSTransactions::NDN__StockDocument::setLocalDocumentId( const QString& arg_localDocumentId )
{
    d_ptr->mLocalDocumentId = arg_localDocumentId;
}

QString NSTransactions::NDN__StockDocument::localDocumentId() const
{
    return d_ptr->mLocalDocumentId;
}

void NSTransactions::NDN__StockDocument::setMovementType( const NSTransactions::NDN__MovementType& arg_movementType )
{
    d_ptr->mMovementType = arg_movementType;
}

NSTransactions::NDN__MovementType NSTransactions::NDN__StockDocument::movementType() const
{
    return d_ptr->mMovementType;
}

void NSTransactions::NDN__StockDocument::setPartner( const NSTransactions::NDN__Partner& arg_partner )
{
    d_ptr->mPartner_nil = false;// converter_complextype.cpp:352
    d_ptr->mPartner = arg_partner;
}

NSTransactions::NDN__Partner NSTransactions::NDN__StockDocument::partner() const
{
    return d_ptr->mPartner;
}

bool NSTransactions::NDN__StockDocument::hasValueForPartner() const
{
    return d_ptr->mPartner_nil == false;
}

void NSTransactions::NDN__StockDocument::setReason( const QString& arg_reason )
{
    d_ptr->mReason_nil = false;// converter_complextype.cpp:352
    d_ptr->mReason = arg_reason;
}

QString NSTransactions::NDN__StockDocument::reason() const
{
    return d_ptr->mReason;
}

bool NSTransactions::NDN__StockDocument::hasValueForReason() const
{
    return d_ptr->mReason_nil == false;
}

void NSTransactions::NDN__StockDocument::setReasonCode( const NSTransactions::NDN__ReasonCode_ReasonCodeEnum& arg_reasonCode )
{
    d_ptr->mReasonCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mReasonCode = arg_reasonCode;
}

NSTransactions::NDN__ReasonCode_ReasonCodeEnum NSTransactions::NDN__StockDocument::reasonCode() const
{
    return d_ptr->mReasonCode;
}

bool NSTransactions::NDN__StockDocument::hasValueForReasonCode() const
{
    return d_ptr->mReasonCode_nil == false;
}

void NSTransactions::NDN__StockDocument::setReference( const QString& arg_reference )
{
    d_ptr->mReference_nil = false;// converter_complextype.cpp:352
    d_ptr->mReference = arg_reference;
}

QString NSTransactions::NDN__StockDocument::reference() const
{
    return d_ptr->mReference;
}

bool NSTransactions::NDN__StockDocument::hasValueForReference() const
{
    return d_ptr->mReference_nil == false;
}

void NSTransactions::NDN__StockDocument::setShopId( const QString& arg_shopId )
{
    d_ptr->mShopId = arg_shopId;
}

QString NSTransactions::NDN__StockDocument::shopId() const
{
    return d_ptr->mShopId;
}

void NSTransactions::NDN__StockDocument::setStornoReference( const QString& arg_stornoReference )
{
    d_ptr->mStornoReference_nil = false;// converter_complextype.cpp:352
    d_ptr->mStornoReference = arg_stornoReference;
}

QString NSTransactions::NDN__StockDocument::stornoReference() const
{
    return d_ptr->mStornoReference;
}

bool NSTransactions::NDN__StockDocument::hasValueForStornoReference() const
{
    return d_ptr->mStornoReference_nil == false;
}

void NSTransactions::NDN__StockDocument::setVAT( float arg_vAT )
{
    d_ptr->mVAT = arg_vAT;
}

float NSTransactions::NDN__StockDocument::vAT() const
{
    return d_ptr->mVAT;
}

void NSTransactions::NDN__StockDocument::setVATBreakDown( const NSTransactions::NDN__ArrayOfDocumentVatBreakDown& arg_vATBreakDown )
{
    d_ptr->mVATBreakDown_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATBreakDown = arg_vATBreakDown;
}

NSTransactions::NDN__ArrayOfDocumentVatBreakDown NSTransactions::NDN__StockDocument::vATBreakDown() const
{
    return d_ptr->mVATBreakDown;
}

bool NSTransactions::NDN__StockDocument::hasValueForVATBreakDown() const
{
    return d_ptr->mVATBreakDown_nil == false;
}

KDSoapValue NSTransactions::NDN__StockDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("StockDocument"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mComment_nil) {
        KDSoapValue _valueComment = KDSoapValue(QString::fromLatin1("Comment"), QVariant::fromValue(d_ptr->mComment), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueComment.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueComment.setQualified(true);
        _valueComment.setNillable(true);
        args.append(_valueComment);// elementargumentserializer.cpp:120
    }
    KDSoapValue _valueCreatedAt = KDSoapValue(QString::fromLatin1("CreatedAt"), d_ptr->mCreatedAt.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
    _valueCreatedAt.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueCreatedAt.setQualified(true);
    _valueCreatedAt.setNillable(true);
    args.append(_valueCreatedAt);// elementargumentserializer.cpp:120
    KDSoapValue _valueDocumentDate = KDSoapValue(QString::fromLatin1("DocumentDate"), d_ptr->mDocumentDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
    _valueDocumentDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueDocumentDate.setQualified(true);
    _valueDocumentDate.setNillable(true);
    args.append(_valueDocumentDate);// elementargumentserializer.cpp:120
    KDSoapValue _valueGross = KDSoapValue(QString::fromLatin1("Gross"), QVariant::fromValue(d_ptr->mGross), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
    _valueGross.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueGross.setQualified(true);
    _valueGross.setNillable(true);
    args.append(_valueGross);// elementargumentserializer.cpp:120
    KDSoapValue _valueIssuedOnDate = KDSoapValue(QString::fromLatin1("IssuedOnDate"), d_ptr->mIssuedOnDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// elementargumentserializer.cpp:106
    _valueIssuedOnDate.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueIssuedOnDate.setQualified(true);
    _valueIssuedOnDate.setNillable(true);
    args.append(_valueIssuedOnDate);// elementargumentserializer.cpp:120
    if (!d_ptr->mLines_nil) {
        KDSoapValue _valueLines(d_ptr->mLines.serialize(QString::fromLatin1("Lines")));// elementargumentserializer.cpp:102
        _valueLines.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLines.setQualified(true);
        _valueLines.setNillable(true);
        args.append(_valueLines);// elementargumentserializer.cpp:120
    }
    KDSoapValue _valueLocalDocumentId = KDSoapValue(QString::fromLatin1("LocalDocumentId"), QVariant::fromValue(d_ptr->mLocalDocumentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
    _valueLocalDocumentId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueLocalDocumentId.setQualified(true);
    _valueLocalDocumentId.setNillable(true);
    args.append(_valueLocalDocumentId);// elementargumentserializer.cpp:120
    KDSoapValue _valueMovementType = d_ptr->mMovementType.serialize(QString::fromLatin1("MovementType"));// elementargumentserializer.cpp:108
    _valueMovementType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueMovementType.setQualified(true);
    _valueMovementType.setNillable(true);
    args.append(_valueMovementType);// elementargumentserializer.cpp:120
    if (!d_ptr->mPartner_nil) {
        KDSoapValue _valuePartner(d_ptr->mPartner.serialize(QString::fromLatin1("Partner")));// elementargumentserializer.cpp:102
        _valuePartner.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePartner.setQualified(true);
        _valuePartner.setNillable(true);
        args.append(_valuePartner);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mReason_nil) {
        KDSoapValue _valueReason = KDSoapValue(QString::fromLatin1("Reason"), QVariant::fromValue(d_ptr->mReason), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueReason.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReason.setQualified(true);
        _valueReason.setNillable(true);
        args.append(_valueReason);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mReasonCode_nil) {
        KDSoapValue _valueReasonCode = d_ptr->mReasonCode.serialize(QString::fromLatin1("ReasonCode"));// elementargumentserializer.cpp:108
        _valueReasonCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReasonCode.setQualified(true);
        _valueReasonCode.setNillable(true);
        args.append(_valueReasonCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mReference_nil) {
        KDSoapValue _valueReference = KDSoapValue(QString::fromLatin1("Reference"), QVariant::fromValue(d_ptr->mReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueReference.setQualified(true);
        _valueReference.setNillable(true);
        args.append(_valueReference);// elementargumentserializer.cpp:120
    }
    KDSoapValue _valueShopId = KDSoapValue(QString::fromLatin1("ShopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
    _valueShopId.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueShopId.setQualified(true);
    _valueShopId.setNillable(true);
    args.append(_valueShopId);// elementargumentserializer.cpp:120
    if (!d_ptr->mStornoReference_nil) {
        KDSoapValue _valueStornoReference = KDSoapValue(QString::fromLatin1("StornoReference"), QVariant::fromValue(d_ptr->mStornoReference), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueStornoReference.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueStornoReference.setQualified(true);
        _valueStornoReference.setNillable(true);
        args.append(_valueStornoReference);// elementargumentserializer.cpp:120
    }
    KDSoapValue _valueVAT = KDSoapValue(QString::fromLatin1("VAT"), QVariant::fromValue(d_ptr->mVAT), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
    _valueVAT.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
    _valueVAT.setQualified(true);
    _valueVAT.setNillable(true);
    args.append(_valueVAT);// elementargumentserializer.cpp:120
    if (!d_ptr->mVATBreakDown_nil) {
        KDSoapValue _valueVATBreakDown(d_ptr->mVATBreakDown.serialize(QString::fromLatin1("VATBreakDown")));// elementargumentserializer.cpp:102
        _valueVATBreakDown.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATBreakDown.setQualified(true);
        _valueVATBreakDown.setNillable(true);
        args.append(_valueVATBreakDown);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__StockDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("Comment")) {// converter_complextype.cpp:483
            d_ptr->mComment = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mComment_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("CreatedAt")) {// converter_complextype.cpp:483
            d_ptr->mCreatedAt = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("DocumentDate")) {// converter_complextype.cpp:483
            d_ptr->mDocumentDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("Gross")) {// converter_complextype.cpp:483
            d_ptr->mGross = val.value().value<float>();// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("IssuedOnDate")) {// converter_complextype.cpp:483
            d_ptr->mIssuedOnDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("Lines")) {// converter_complextype.cpp:483
            d_ptr->mLines.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mLines_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalDocumentId")) {// converter_complextype.cpp:483
            d_ptr->mLocalDocumentId = val.value().value<QString>();// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("MovementType")) {// converter_complextype.cpp:483
            d_ptr->mMovementType.deserialize(val);// converter_complextype.cpp:500
        }
        else if (_name == QLatin1String("Partner")) {// converter_complextype.cpp:483
            d_ptr->mPartner.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mPartner_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Reason")) {// converter_complextype.cpp:483
            d_ptr->mReason = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mReason_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ReasonCode")) {// converter_complextype.cpp:483
            d_ptr->mReasonCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mReasonCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Reference")) {// converter_complextype.cpp:483
            d_ptr->mReference = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mReference_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ShopId")) {// converter_complextype.cpp:483
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("StornoReference")) {// converter_complextype.cpp:483
            d_ptr->mStornoReference = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mStornoReference_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VAT")) {// converter_complextype.cpp:483
            d_ptr->mVAT = val.value().value<float>();// converter_complextype.cpp:496
        }
        else if (_name == QLatin1String("VATBreakDown")) {// converter_complextype.cpp:483
            d_ptr->mVATBreakDown.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mVATBreakDown_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__StockDocument::NDN__StockDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__StockDocument::~NDN__StockDocument()
{
}

NSTransactions::NDN__StockDocument::NDN__StockDocument( const NSTransactions::NDN__StockDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__StockDocument&  NSTransactions::NDN__StockDocument::operator=( const NSTransactions::NDN__StockDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__StockDocumentLine::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    float mDiscountValue;
    bool mDiscountValue_nil;
    NSTransactions::NDN__ExciseCategory mExciseCategory;
    bool mExciseCategory_nil;
    float mGrossConsumerPrice;
    bool mGrossConsumerPrice_nil;
    float mGrossLineTotal;
    bool mGrossLineTotal_nil;
    float mGrossUnitPrice;
    bool mGrossUnitPrice_nil;
    int mLineNo;
    bool mLineNo_nil;
    QString mLocalProductCode;
    bool mLocalProductCode_nil;
    float mNetListPrice;
    bool mNetListPrice_nil;
    float mNetUnitPrice;
    bool mNetUnitPrice_nil;
    float mPackagingQuantity;
    bool mPackagingQuantity_nil;
    QString mPackagingUnitOfMeasure;
    bool mPackagingUnitOfMeasure_nil;
    NSTransactions::NDN__PriceLevelType mPriceLevelType;
    bool mPriceLevelType_nil;
    QString mProductBarCode;
    bool mProductBarCode_nil;
    QString mProductCode;
    bool mProductCode_nil;
    int mProductGroup;
    bool mProductGroup_nil;
    QString mProductName;
    bool mProductName_nil;
    float mProductStockPrice;
    bool mProductStockPrice_nil;
    float mQuantity;
    bool mQuantity_nil;
    QString mUnitOfMeasure;
    bool mUnitOfMeasure_nil;
    NSTransactions::NDN__VATCode mVATCode;
    bool mVATCode_nil;
    float mVATLineTotal;
    bool mVATLineTotal_nil;
    float mVATPercent;
    bool mVATPercent_nil;
};

NSTransactions::NDN__StockDocumentLine::PrivateDPtr::PrivateDPtr()
    : mDiscountValue(0), mDiscountValue_nil(true), mExciseCategory_nil(true), mGrossConsumerPrice(0), mGrossConsumerPrice_nil(true), mGrossLineTotal(0), mGrossLineTotal_nil(true), mGrossUnitPrice(0), mGrossUnitPrice_nil(true), mLineNo(0), mLineNo_nil(true), mLocalProductCode_nil(true), mNetListPrice(0), mNetListPrice_nil(true), mNetUnitPrice(0), mNetUnitPrice_nil(true), mPackagingQuantity(0), mPackagingQuantity_nil(true), mPackagingUnitOfMeasure_nil(true), mPriceLevelType_nil(true), mProductBarCode_nil(true), mProductCode_nil(true), mProductGroup(0), mProductGroup_nil(true), mProductName_nil(true), mProductStockPrice(0), mProductStockPrice_nil(true), mQuantity(0), mQuantity_nil(true), mUnitOfMeasure_nil(true), mVATCode_nil(true), mVATLineTotal(0), mVATLineTotal_nil(true), mVATPercent(0), mVATPercent_nil(true)
{
}


void NSTransactions::NDN__StockDocumentLine::setDiscountValue( float arg_discountValue )
{
    d_ptr->mDiscountValue_nil = false;// converter_complextype.cpp:352
    d_ptr->mDiscountValue = arg_discountValue;
}

float NSTransactions::NDN__StockDocumentLine::discountValue() const
{
    return d_ptr->mDiscountValue;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForDiscountValue() const
{
    return d_ptr->mDiscountValue_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setExciseCategory( const NSTransactions::NDN__ExciseCategory& arg_exciseCategory )
{
    d_ptr->mExciseCategory_nil = false;// converter_complextype.cpp:352
    d_ptr->mExciseCategory = arg_exciseCategory;
}

NSTransactions::NDN__ExciseCategory NSTransactions::NDN__StockDocumentLine::exciseCategory() const
{
    return d_ptr->mExciseCategory;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForExciseCategory() const
{
    return d_ptr->mExciseCategory_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setGrossConsumerPrice( float arg_grossConsumerPrice )
{
    d_ptr->mGrossConsumerPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mGrossConsumerPrice = arg_grossConsumerPrice;
}

float NSTransactions::NDN__StockDocumentLine::grossConsumerPrice() const
{
    return d_ptr->mGrossConsumerPrice;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForGrossConsumerPrice() const
{
    return d_ptr->mGrossConsumerPrice_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setGrossLineTotal( float arg_grossLineTotal )
{
    d_ptr->mGrossLineTotal_nil = false;// converter_complextype.cpp:352
    d_ptr->mGrossLineTotal = arg_grossLineTotal;
}

float NSTransactions::NDN__StockDocumentLine::grossLineTotal() const
{
    return d_ptr->mGrossLineTotal;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForGrossLineTotal() const
{
    return d_ptr->mGrossLineTotal_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setGrossUnitPrice( float arg_grossUnitPrice )
{
    d_ptr->mGrossUnitPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mGrossUnitPrice = arg_grossUnitPrice;
}

float NSTransactions::NDN__StockDocumentLine::grossUnitPrice() const
{
    return d_ptr->mGrossUnitPrice;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForGrossUnitPrice() const
{
    return d_ptr->mGrossUnitPrice_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setLineNo( int arg_lineNo )
{
    d_ptr->mLineNo_nil = false;// converter_complextype.cpp:352
    d_ptr->mLineNo = arg_lineNo;
}

int NSTransactions::NDN__StockDocumentLine::lineNo() const
{
    return d_ptr->mLineNo;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForLineNo() const
{
    return d_ptr->mLineNo_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setLocalProductCode( const QString& arg_localProductCode )
{
    d_ptr->mLocalProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mLocalProductCode = arg_localProductCode;
}

QString NSTransactions::NDN__StockDocumentLine::localProductCode() const
{
    return d_ptr->mLocalProductCode;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForLocalProductCode() const
{
    return d_ptr->mLocalProductCode_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setNetListPrice( float arg_netListPrice )
{
    d_ptr->mNetListPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mNetListPrice = arg_netListPrice;
}

float NSTransactions::NDN__StockDocumentLine::netListPrice() const
{
    return d_ptr->mNetListPrice;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForNetListPrice() const
{
    return d_ptr->mNetListPrice_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setNetUnitPrice( float arg_netUnitPrice )
{
    d_ptr->mNetUnitPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mNetUnitPrice = arg_netUnitPrice;
}

float NSTransactions::NDN__StockDocumentLine::netUnitPrice() const
{
    return d_ptr->mNetUnitPrice;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForNetUnitPrice() const
{
    return d_ptr->mNetUnitPrice_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setPackagingQuantity( float arg_packagingQuantity )
{
    d_ptr->mPackagingQuantity_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingQuantity = arg_packagingQuantity;
}

float NSTransactions::NDN__StockDocumentLine::packagingQuantity() const
{
    return d_ptr->mPackagingQuantity;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForPackagingQuantity() const
{
    return d_ptr->mPackagingQuantity_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setPackagingUnitOfMeasure( const QString& arg_packagingUnitOfMeasure )
{
    d_ptr->mPackagingUnitOfMeasure_nil = false;// converter_complextype.cpp:352
    d_ptr->mPackagingUnitOfMeasure = arg_packagingUnitOfMeasure;
}

QString NSTransactions::NDN__StockDocumentLine::packagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForPackagingUnitOfMeasure() const
{
    return d_ptr->mPackagingUnitOfMeasure_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setPriceLevelType( const NSTransactions::NDN__PriceLevelType& arg_priceLevelType )
{
    d_ptr->mPriceLevelType_nil = false;// converter_complextype.cpp:352
    d_ptr->mPriceLevelType = arg_priceLevelType;
}

NSTransactions::NDN__PriceLevelType NSTransactions::NDN__StockDocumentLine::priceLevelType() const
{
    return d_ptr->mPriceLevelType;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForPriceLevelType() const
{
    return d_ptr->mPriceLevelType_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setProductBarCode( const QString& arg_productBarCode )
{
    d_ptr->mProductBarCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductBarCode = arg_productBarCode;
}

QString NSTransactions::NDN__StockDocumentLine::productBarCode() const
{
    return d_ptr->mProductBarCode;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForProductBarCode() const
{
    return d_ptr->mProductBarCode_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setProductCode( const QString& arg_productCode )
{
    d_ptr->mProductCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductCode = arg_productCode;
}

QString NSTransactions::NDN__StockDocumentLine::productCode() const
{
    return d_ptr->mProductCode;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForProductCode() const
{
    return d_ptr->mProductCode_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setProductGroup( int arg_productGroup )
{
    d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductGroup = arg_productGroup;
}

int NSTransactions::NDN__StockDocumentLine::productGroup() const
{
    return d_ptr->mProductGroup;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForProductGroup() const
{
    return d_ptr->mProductGroup_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setProductName( const QString& arg_productName )
{
    d_ptr->mProductName_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductName = arg_productName;
}

QString NSTransactions::NDN__StockDocumentLine::productName() const
{
    return d_ptr->mProductName;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForProductName() const
{
    return d_ptr->mProductName_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setProductStockPrice( float arg_productStockPrice )
{
    d_ptr->mProductStockPrice_nil = false;// converter_complextype.cpp:352
    d_ptr->mProductStockPrice = arg_productStockPrice;
}

float NSTransactions::NDN__StockDocumentLine::productStockPrice() const
{
    return d_ptr->mProductStockPrice;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForProductStockPrice() const
{
    return d_ptr->mProductStockPrice_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setQuantity( float arg_quantity )
{
    d_ptr->mQuantity_nil = false;// converter_complextype.cpp:352
    d_ptr->mQuantity = arg_quantity;
}

float NSTransactions::NDN__StockDocumentLine::quantity() const
{
    return d_ptr->mQuantity;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForQuantity() const
{
    return d_ptr->mQuantity_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setUnitOfMeasure( const QString& arg_unitOfMeasure )
{
    d_ptr->mUnitOfMeasure_nil = false;// converter_complextype.cpp:352
    d_ptr->mUnitOfMeasure = arg_unitOfMeasure;
}

QString NSTransactions::NDN__StockDocumentLine::unitOfMeasure() const
{
    return d_ptr->mUnitOfMeasure;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForUnitOfMeasure() const
{
    return d_ptr->mUnitOfMeasure_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setVATCode( const NSTransactions::NDN__VATCode& arg_vATCode )
{
    d_ptr->mVATCode_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATCode = arg_vATCode;
}

NSTransactions::NDN__VATCode NSTransactions::NDN__StockDocumentLine::vATCode() const
{
    return d_ptr->mVATCode;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForVATCode() const
{
    return d_ptr->mVATCode_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setVATLineTotal( float arg_vATLineTotal )
{
    d_ptr->mVATLineTotal_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATLineTotal = arg_vATLineTotal;
}

float NSTransactions::NDN__StockDocumentLine::vATLineTotal() const
{
    return d_ptr->mVATLineTotal;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForVATLineTotal() const
{
    return d_ptr->mVATLineTotal_nil == false;
}

void NSTransactions::NDN__StockDocumentLine::setVATPercent( float arg_vATPercent )
{
    d_ptr->mVATPercent_nil = false;// converter_complextype.cpp:352
    d_ptr->mVATPercent = arg_vATPercent;
}

float NSTransactions::NDN__StockDocumentLine::vATPercent() const
{
    return d_ptr->mVATPercent;
}

bool NSTransactions::NDN__StockDocumentLine::hasValueForVATPercent() const
{
    return d_ptr->mVATPercent_nil == false;
}

KDSoapValue NSTransactions::NDN__StockDocumentLine::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("StockDocumentLine"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mDiscountValue_nil) {
        KDSoapValue _valueDiscountValue = KDSoapValue(QString::fromLatin1("DiscountValue"), QVariant::fromValue(d_ptr->mDiscountValue), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueDiscountValue.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueDiscountValue.setQualified(true);
        _valueDiscountValue.setNillable(true);
        args.append(_valueDiscountValue);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mExciseCategory_nil) {
        KDSoapValue _valueExciseCategory = d_ptr->mExciseCategory.serialize(QString::fromLatin1("ExciseCategory"));// elementargumentserializer.cpp:108
        _valueExciseCategory.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueExciseCategory.setQualified(true);
        _valueExciseCategory.setNillable(true);
        args.append(_valueExciseCategory);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGrossConsumerPrice_nil) {
        KDSoapValue _valueGrossConsumerPrice = KDSoapValue(QString::fromLatin1("GrossConsumerPrice"), QVariant::fromValue(d_ptr->mGrossConsumerPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGrossConsumerPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossConsumerPrice.setQualified(true);
        _valueGrossConsumerPrice.setNillable(true);
        args.append(_valueGrossConsumerPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGrossLineTotal_nil) {
        KDSoapValue _valueGrossLineTotal = KDSoapValue(QString::fromLatin1("GrossLineTotal"), QVariant::fromValue(d_ptr->mGrossLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGrossLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossLineTotal.setQualified(true);
        _valueGrossLineTotal.setNillable(true);
        args.append(_valueGrossLineTotal);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mGrossUnitPrice_nil) {
        KDSoapValue _valueGrossUnitPrice = KDSoapValue(QString::fromLatin1("GrossUnitPrice"), QVariant::fromValue(d_ptr->mGrossUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueGrossUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueGrossUnitPrice.setQualified(true);
        _valueGrossUnitPrice.setNillable(true);
        args.append(_valueGrossUnitPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLineNo_nil) {
        KDSoapValue _valueLineNo = KDSoapValue(QString::fromLatin1("LineNo"), QVariant::fromValue(d_ptr->mLineNo), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueLineNo.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLineNo.setQualified(true);
        _valueLineNo.setNillable(true);
        args.append(_valueLineNo);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mLocalProductCode_nil) {
        KDSoapValue _valueLocalProductCode = KDSoapValue(QString::fromLatin1("LocalProductCode"), QVariant::fromValue(d_ptr->mLocalProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueLocalProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueLocalProductCode.setQualified(true);
        _valueLocalProductCode.setNillable(true);
        args.append(_valueLocalProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mNetListPrice_nil) {
        KDSoapValue _valueNetListPrice = KDSoapValue(QString::fromLatin1("NetListPrice"), QVariant::fromValue(d_ptr->mNetListPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueNetListPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetListPrice.setQualified(true);
        _valueNetListPrice.setNillable(true);
        args.append(_valueNetListPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mNetUnitPrice_nil) {
        KDSoapValue _valueNetUnitPrice = KDSoapValue(QString::fromLatin1("NetUnitPrice"), QVariant::fromValue(d_ptr->mNetUnitPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueNetUnitPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueNetUnitPrice.setQualified(true);
        _valueNetUnitPrice.setNillable(true);
        args.append(_valueNetUnitPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingQuantity_nil) {
        KDSoapValue _valuePackagingQuantity = KDSoapValue(QString::fromLatin1("PackagingQuantity"), QVariant::fromValue(d_ptr->mPackagingQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valuePackagingQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingQuantity.setQualified(true);
        _valuePackagingQuantity.setNillable(true);
        args.append(_valuePackagingQuantity);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPackagingUnitOfMeasure_nil) {
        KDSoapValue _valuePackagingUnitOfMeasure = KDSoapValue(QString::fromLatin1("PackagingUnitOfMeasure"), QVariant::fromValue(d_ptr->mPackagingUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valuePackagingUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePackagingUnitOfMeasure.setQualified(true);
        _valuePackagingUnitOfMeasure.setNillable(true);
        args.append(_valuePackagingUnitOfMeasure);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mPriceLevelType_nil) {
        KDSoapValue _valuePriceLevelType = d_ptr->mPriceLevelType.serialize(QString::fromLatin1("PriceLevelType"));// elementargumentserializer.cpp:108
        _valuePriceLevelType.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valuePriceLevelType.setQualified(true);
        _valuePriceLevelType.setNillable(true);
        args.append(_valuePriceLevelType);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductBarCode_nil) {
        KDSoapValue _valueProductBarCode = KDSoapValue(QString::fromLatin1("ProductBarCode"), QVariant::fromValue(d_ptr->mProductBarCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductBarCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductBarCode.setQualified(true);
        _valueProductBarCode.setNillable(true);
        args.append(_valueProductBarCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductCode_nil) {
        KDSoapValue _valueProductCode = KDSoapValue(QString::fromLatin1("ProductCode"), QVariant::fromValue(d_ptr->mProductCode), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductCode.setQualified(true);
        _valueProductCode.setNillable(true);
        args.append(_valueProductCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductGroup_nil) {
        KDSoapValue _valueProductGroup = KDSoapValue(QString::fromLatin1("ProductGroup"), QVariant::fromValue(d_ptr->mProductGroup), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueProductGroup.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductGroup.setQualified(true);
        _valueProductGroup.setNillable(true);
        args.append(_valueProductGroup);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductName_nil) {
        KDSoapValue _valueProductName = KDSoapValue(QString::fromLatin1("ProductName"), QVariant::fromValue(d_ptr->mProductName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueProductName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductName.setQualified(true);
        _valueProductName.setNillable(true);
        args.append(_valueProductName);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mProductStockPrice_nil) {
        KDSoapValue _valueProductStockPrice = KDSoapValue(QString::fromLatin1("ProductStockPrice"), QVariant::fromValue(d_ptr->mProductStockPrice), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueProductStockPrice.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueProductStockPrice.setQualified(true);
        _valueProductStockPrice.setNillable(true);
        args.append(_valueProductStockPrice);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mQuantity_nil) {
        KDSoapValue _valueQuantity = KDSoapValue(QString::fromLatin1("Quantity"), QVariant::fromValue(d_ptr->mQuantity), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueQuantity.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueQuantity.setQualified(true);
        _valueQuantity.setNillable(true);
        args.append(_valueQuantity);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mUnitOfMeasure_nil) {
        KDSoapValue _valueUnitOfMeasure = KDSoapValue(QString::fromLatin1("UnitOfMeasure"), QVariant::fromValue(d_ptr->mUnitOfMeasure), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// elementargumentserializer.cpp:106
        _valueUnitOfMeasure.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueUnitOfMeasure.setQualified(true);
        _valueUnitOfMeasure.setNillable(true);
        args.append(_valueUnitOfMeasure);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATCode_nil) {
        KDSoapValue _valueVATCode = d_ptr->mVATCode.serialize(QString::fromLatin1("VATCode"));// elementargumentserializer.cpp:108
        _valueVATCode.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATCode.setQualified(true);
        _valueVATCode.setNillable(true);
        args.append(_valueVATCode);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATLineTotal_nil) {
        KDSoapValue _valueVATLineTotal = KDSoapValue(QString::fromLatin1("VATLineTotal"), QVariant::fromValue(d_ptr->mVATLineTotal), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueVATLineTotal.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATLineTotal.setQualified(true);
        _valueVATLineTotal.setNillable(true);
        args.append(_valueVATLineTotal);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mVATPercent_nil) {
        KDSoapValue _valueVATPercent = KDSoapValue(QString::fromLatin1("VATPercent"), QVariant::fromValue(d_ptr->mVATPercent), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("decimal"));// elementargumentserializer.cpp:106
        _valueVATPercent.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueVATPercent.setQualified(true);
        _valueVATPercent.setNillable(true);
        args.append(_valueVATPercent);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__StockDocumentLine::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("DiscountValue")) {// converter_complextype.cpp:483
            d_ptr->mDiscountValue = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mDiscountValue_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ExciseCategory")) {// converter_complextype.cpp:483
            d_ptr->mExciseCategory.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mExciseCategory_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("GrossConsumerPrice")) {// converter_complextype.cpp:483
            d_ptr->mGrossConsumerPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGrossConsumerPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("GrossLineTotal")) {// converter_complextype.cpp:483
            d_ptr->mGrossLineTotal = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGrossLineTotal_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("GrossUnitPrice")) {// converter_complextype.cpp:483
            d_ptr->mGrossUnitPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mGrossUnitPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LineNo")) {// converter_complextype.cpp:483
            d_ptr->mLineNo = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mLineNo_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("LocalProductCode")) {// converter_complextype.cpp:483
            d_ptr->mLocalProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mLocalProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("NetListPrice")) {// converter_complextype.cpp:483
            d_ptr->mNetListPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mNetListPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("NetUnitPrice")) {// converter_complextype.cpp:483
            d_ptr->mNetUnitPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mNetUnitPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingQuantity")) {// converter_complextype.cpp:483
            d_ptr->mPackagingQuantity = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mPackagingQuantity_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PackagingUnitOfMeasure")) {// converter_complextype.cpp:483
            d_ptr->mPackagingUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mPackagingUnitOfMeasure_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("PriceLevelType")) {// converter_complextype.cpp:483
            d_ptr->mPriceLevelType.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mPriceLevelType_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductBarCode")) {// converter_complextype.cpp:483
            d_ptr->mProductBarCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductBarCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductCode")) {// converter_complextype.cpp:483
            d_ptr->mProductCode = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductGroup")) {// converter_complextype.cpp:483
            d_ptr->mProductGroup = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mProductGroup_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductName")) {// converter_complextype.cpp:483
            d_ptr->mProductName = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mProductName_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ProductStockPrice")) {// converter_complextype.cpp:483
            d_ptr->mProductStockPrice = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mProductStockPrice_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Quantity")) {// converter_complextype.cpp:483
            d_ptr->mQuantity = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mQuantity_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("UnitOfMeasure")) {// converter_complextype.cpp:483
            d_ptr->mUnitOfMeasure = val.value().value<QString>();// converter_complextype.cpp:496
            d_ptr->mUnitOfMeasure_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATCode")) {// converter_complextype.cpp:483
            d_ptr->mVATCode.deserialize(val);// converter_complextype.cpp:500
            d_ptr->mVATCode_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATLineTotal")) {// converter_complextype.cpp:483
            d_ptr->mVATLineTotal = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mVATLineTotal_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("VATPercent")) {// converter_complextype.cpp:483
            d_ptr->mVATPercent = val.value().value<float>();// converter_complextype.cpp:496
            d_ptr->mVATPercent_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__StockDocumentLine::NDN__StockDocumentLine()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__StockDocumentLine::~NDN__StockDocumentLine()
{
}

NSTransactions::NDN__StockDocumentLine::NDN__StockDocumentLine( const NSTransactions::NDN__StockDocumentLine& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__StockDocumentLine&  NSTransactions::NDN__StockDocumentLine::operator=( const NSTransactions::NDN__StockDocumentLine& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__TransactionCallConfig::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mBatchSize;
    bool mBatchSize_nil;
    int mFrequency;
    bool mFrequency_nil;
    int mOffset;
    bool mOffset_nil;
};

NSTransactions::NDN__TransactionCallConfig::PrivateDPtr::PrivateDPtr()
    : mBatchSize(0), mBatchSize_nil(true), mFrequency(0), mFrequency_nil(true), mOffset(0), mOffset_nil(true)
{
}


void NSTransactions::NDN__TransactionCallConfig::setBatchSize( int arg_batchSize )
{
    d_ptr->mBatchSize_nil = false;// converter_complextype.cpp:352
    d_ptr->mBatchSize = arg_batchSize;
}

int NSTransactions::NDN__TransactionCallConfig::batchSize() const
{
    return d_ptr->mBatchSize;
}

bool NSTransactions::NDN__TransactionCallConfig::hasValueForBatchSize() const
{
    return d_ptr->mBatchSize_nil == false;
}

void NSTransactions::NDN__TransactionCallConfig::setFrequency( int arg_frequency )
{
    d_ptr->mFrequency_nil = false;// converter_complextype.cpp:352
    d_ptr->mFrequency = arg_frequency;
}

int NSTransactions::NDN__TransactionCallConfig::frequency() const
{
    return d_ptr->mFrequency;
}

bool NSTransactions::NDN__TransactionCallConfig::hasValueForFrequency() const
{
    return d_ptr->mFrequency_nil == false;
}

void NSTransactions::NDN__TransactionCallConfig::setOffset( int arg_offset )
{
    d_ptr->mOffset_nil = false;// converter_complextype.cpp:352
    d_ptr->mOffset = arg_offset;
}

int NSTransactions::NDN__TransactionCallConfig::offset() const
{
    return d_ptr->mOffset;
}

bool NSTransactions::NDN__TransactionCallConfig::hasValueForOffset() const
{
    return d_ptr->mOffset_nil == false;
}

KDSoapValue NSTransactions::NDN__TransactionCallConfig::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("TransactionCallConfig"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mBatchSize_nil) {
        KDSoapValue _valueBatchSize = KDSoapValue(QString::fromLatin1("BatchSize"), QVariant::fromValue(d_ptr->mBatchSize), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueBatchSize.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueBatchSize.setQualified(true);
        args.append(_valueBatchSize);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mFrequency_nil) {
        KDSoapValue _valueFrequency = KDSoapValue(QString::fromLatin1("Frequency"), QVariant::fromValue(d_ptr->mFrequency), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueFrequency.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueFrequency.setQualified(true);
        args.append(_valueFrequency);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mOffset_nil) {
        KDSoapValue _valueOffset = KDSoapValue(QString::fromLatin1("Offset"), QVariant::fromValue(d_ptr->mOffset), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// elementargumentserializer.cpp:106
        _valueOffset.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueOffset.setQualified(true);
        args.append(_valueOffset);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__TransactionCallConfig::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("BatchSize")) {// converter_complextype.cpp:483
            d_ptr->mBatchSize = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mBatchSize_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Frequency")) {// converter_complextype.cpp:483
            d_ptr->mFrequency = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mFrequency_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("Offset")) {// converter_complextype.cpp:483
            d_ptr->mOffset = val.value().value<int>();// converter_complextype.cpp:496
            d_ptr->mOffset_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__TransactionCallConfig::NDN__TransactionCallConfig()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__TransactionCallConfig::~NDN__TransactionCallConfig()
{
}

NSTransactions::NDN__TransactionCallConfig::NDN__TransactionCallConfig( const NSTransactions::NDN__TransactionCallConfig& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__TransactionCallConfig&  NSTransactions::NDN__TransactionCallConfig::operator=( const NSTransactions::NDN__TransactionCallConfig& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSTransactions::NDN__TransactionResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSTransactions::NDN__TransactionCallConfig mCurrentConfig;
    bool mCurrentConfig_nil;
    NSTransactions::NDN__ArrayOfResponseCode mResponseCodes;
    bool mResponseCodes_nil;
};

NSTransactions::NDN__TransactionResponse::PrivateDPtr::PrivateDPtr()
    : mCurrentConfig_nil(true), mResponseCodes_nil(true)
{
}


void NSTransactions::NDN__TransactionResponse::setCurrentConfig( const NSTransactions::NDN__TransactionCallConfig& arg_currentConfig )
{
    d_ptr->mCurrentConfig_nil = false;// converter_complextype.cpp:352
    d_ptr->mCurrentConfig = arg_currentConfig;
}

NSTransactions::NDN__TransactionCallConfig NSTransactions::NDN__TransactionResponse::currentConfig() const
{
    return d_ptr->mCurrentConfig;
}

bool NSTransactions::NDN__TransactionResponse::hasValueForCurrentConfig() const
{
    return d_ptr->mCurrentConfig_nil == false;
}

void NSTransactions::NDN__TransactionResponse::setResponseCodes( const NSTransactions::NDN__ArrayOfResponseCode& arg_responseCodes )
{
    d_ptr->mResponseCodes_nil = false;// converter_complextype.cpp:352
    d_ptr->mResponseCodes = arg_responseCodes;
}

NSTransactions::NDN__ArrayOfResponseCode NSTransactions::NDN__TransactionResponse::responseCodes() const
{
    return d_ptr->mResponseCodes;
}

bool NSTransactions::NDN__TransactionResponse::hasValueForResponseCodes() const
{
    return d_ptr->mResponseCodes_nil == false;
}

KDSoapValue NSTransactions::NDN__TransactionResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("TransactionResponse"));// converter_complextype.cpp:606
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:627
    mainValue.setQualified(true);// converter_complextype.cpp:629
    if (!d_ptr->mCurrentConfig_nil) {
        KDSoapValue _valueCurrentConfig(d_ptr->mCurrentConfig.serialize(QString::fromLatin1("CurrentConfig")));// elementargumentserializer.cpp:102
        _valueCurrentConfig.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueCurrentConfig.setQualified(true);
        _valueCurrentConfig.setNillable(true);
        args.append(_valueCurrentConfig);// elementargumentserializer.cpp:120
    }
    if (!d_ptr->mResponseCodes_nil) {
        KDSoapValue _valueResponseCodes(d_ptr->mResponseCodes.serialize(QString::fromLatin1("ResponseCodes")));// elementargumentserializer.cpp:102
        _valueResponseCodes.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueResponseCodes.setQualified(true);
        _valueResponseCodes.setNillable(true);
        args.append(_valueResponseCodes);// elementargumentserializer.cpp:120
    }
    return mainValue;
}

void NSTransactions::NDN__TransactionResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:623
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString _name = val.name();
        if (_name == QLatin1String("CurrentConfig")) {// converter_complextype.cpp:483
            d_ptr->mCurrentConfig.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mCurrentConfig_nil = false;// converter_complextype.cpp:503
        }
        else if (_name == QLatin1String("ResponseCodes")) {// converter_complextype.cpp:483
            d_ptr->mResponseCodes.deserialize(val);// converter_complextype.cpp:498
            d_ptr->mResponseCodes_nil = false;// converter_complextype.cpp:503
        }
    }
}

NSTransactions::NDN__TransactionResponse::NDN__TransactionResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSTransactions::NDN__TransactionResponse::~NDN__TransactionResponse()
{
}

NSTransactions::NDN__TransactionResponse::NDN__TransactionResponse( const NSTransactions::NDN__TransactionResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSTransactions::NDN__TransactionResponse&  NSTransactions::NDN__TransactionResponse::operator=( const NSTransactions::NDN__TransactionResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSTransactions::NDN__VATCode::NDN__VATCode( const Type &type )
{
    mType = type;
}

void NSTransactions::NDN__VATCode::setType( Type type )
{
    mType = type;
}

NSTransactions::NDN__VATCode::Type NSTransactions::NDN__VATCode::type() const
{
    return mType;
}

NSTransactions::NDN__VATCode::operator Type() const
{
    return mType;
}

KDSoapValue NSTransactions::NDN__VATCode::serialize( const QString& valueName ) const
{
    switch ( mType ) {
        case NSTransactions::NDN__VATCode::A:
            return KDSoapValue(valueName, "A", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::B:
            return KDSoapValue(valueName, "B", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::C:
            return KDSoapValue(valueName, "C", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::D:
            return KDSoapValue(valueName, "D", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::E:
            return KDSoapValue(valueName, "E", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::F:
            return KDSoapValue(valueName, "F", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::G:
            return KDSoapValue(valueName, "G", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::H:
            return KDSoapValue(valueName, "H", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::I:
            return KDSoapValue(valueName, "I", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::J:
            return KDSoapValue(valueName, "J", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        case NSTransactions::NDN__VATCode::K:
            return KDSoapValue(valueName, "K", QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("VATCode"));
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return KDSoapValue();
}

void NSTransactions::NDN__VATCode::deserialize( const KDSoapValue& mainValue )
{
    static const struct { const char* name; Type value; } s_values[11] = {
    { "A", NSTransactions::NDN__VATCode::A },
    { "B", NSTransactions::NDN__VATCode::B },
    { "C", NSTransactions::NDN__VATCode::C },
    { "D", NSTransactions::NDN__VATCode::D },
    { "E", NSTransactions::NDN__VATCode::E },
    { "F", NSTransactions::NDN__VATCode::F },
    { "G", NSTransactions::NDN__VATCode::G },
    { "H", NSTransactions::NDN__VATCode::H },
    { "I", NSTransactions::NDN__VATCode::I },
    { "J", NSTransactions::NDN__VATCode::J },
    { "K", NSTransactions::NDN__VATCode::K }
    };
    const QString str = mainValue.value().toString();
    for ( int i = 0; i < 11; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to 'NDN__VATCode'.", qPrintable(str) );
}

NSTransactions::NDN__VATCode::NDN__VATCode()
    : mType(Type(0))
{
}

NSTransactions::NDN__VATCode::~NDN__VATCode()
{
}


NSTransactions::CreateOpeningStockJob::CreateOpeningStockJob( NSTransactions::Transactions* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSTransactions::CreateOpeningStockJob::setParameters( const NSTransactions::NDN_COMM__CreateOpeningStock& arg0 )
{
    mParameters = arg0;
}

NSTransactions::NDN_COMM__CreateOpeningStock NSTransactions::CreateOpeningStockJob::parameters() const
{
    return mParameters;
}

void NSTransactions::CreateOpeningStockJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateOpeningStock(mParameters.serialize(QString::fromLatin1("CreateOpeningStock")));// elementargumentserializer.cpp:102
    _valueCreateOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateOpeningStock.setQualified(true);
    message = _valueCreateOpeningStock;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateOpeningStock"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSTransactions::NDN_COMM__CreateOpeningStockResponse NSTransactions::CreateOpeningStockJob::resultParameters() const
{
    return mResultParameters;
}

void NSTransactions::CreateOpeningStockJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSTransactions::CreateSalesTransactionJob::CreateSalesTransactionJob( NSTransactions::Transactions* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSTransactions::CreateSalesTransactionJob::setParameters( const NSTransactions::NDN_COMM__CreateSalesTransaction& arg0 )
{
    mParameters = arg0;
}

NSTransactions::NDN_COMM__CreateSalesTransaction NSTransactions::CreateSalesTransactionJob::parameters() const
{
    return mParameters;
}

void NSTransactions::CreateSalesTransactionJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateSalesTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateSalesTransaction(mParameters.serialize(QString::fromLatin1("CreateSalesTransaction")));// elementargumentserializer.cpp:102
    _valueCreateSalesTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateSalesTransaction.setQualified(true);
    message = _valueCreateSalesTransaction;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateSalesTransaction"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSTransactions::NDN_COMM__CreateSalesTransactionResponse NSTransactions::CreateSalesTransactionJob::resultParameters() const
{
    return mResultParameters;
}

void NSTransactions::CreateSalesTransactionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


NSTransactions::CreateStockTransactionJob::CreateStockTransactionJob( NSTransactions::Transactions* service, QObject* _parent )
    : KDSoapJob(_parent), mService(service), mParameters(), mResultParameters()
{
}

void NSTransactions::CreateStockTransactionJob::setParameters( const NSTransactions::NDN_COMM__CreateStockTransaction& arg0 )
{
    mParameters = arg0;
}

NSTransactions::NDN_COMM__CreateStockTransaction NSTransactions::CreateStockTransactionJob::parameters() const
{
    return mParameters;
}

void NSTransactions::CreateStockTransactionJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateStockTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStockTransaction(mParameters.serialize(QString::fromLatin1("CreateStockTransaction")));// elementargumentserializer.cpp:102
    _valueCreateStockTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateStockTransaction.setQualified(true);
    message = _valueCreateStockTransaction;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("CreateStockTransaction"), message, action, requestHeaders());
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSTransactions::NDN_COMM__CreateStockTransactionResponse NSTransactions::CreateStockTransactionJob::resultParameters() const
{
    return mResultParameters;
}

void NSTransactions::CreateStockTransactionJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    KDSoapMessage _reply = watcher->returnMessage();
    if (!_reply.isFault()) {// converter_clientstub.cpp:444
        mResultParameters.deserialize(_reply);// converter_clientstub.cpp:632
    }
    emitFinished(_reply, watcher->returnHeaders());
}


class NSTransactions::Transactions::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

NSTransactions::Transactions::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


NSTransactions::Transactions::Transactions( QObject* _parent )
    : QObject(_parent), d_ptr(new PrivateDPtr)
{
}

NSTransactions::Transactions::~Transactions()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void NSTransactions::Transactions::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void NSTransactions::Transactions::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

QString NSTransactions::Transactions::endPoint() const
{
    return d_ptr->m_endPoint;
}

void NSTransactions::Transactions::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

KDSoapClientInterface::SoapVersion NSTransactions::Transactions::soapVersion() const
{
    return clientInterface()->soapVersion();
}

int NSTransactions::Transactions::lastErrorCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toInt();
    return 0;
}

QString NSTransactions::Transactions::lastFaultCode() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.childValues().child(QLatin1String("faultcode")).value().toString();
    return QString();
}

QString NSTransactions::Transactions::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *NSTransactions::Transactions::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://adatkuldes-teszt.nemzetidohany.gov.hu:8444/ndc/Transactions.svc");
        const QString messageNamespace = QString::fromLatin1("http://tempuri.org/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *NSTransactions::Transactions::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const Transactions*>( this )->clientInterface() );
}

NSTransactions::NDN_COMM__CreateSalesTransactionResponse NSTransactions::Transactions::createSalesTransaction( const NSTransactions::NDN_COMM__CreateSalesTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateSalesTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateSalesTransaction(parameters.serialize(QString::fromLatin1("CreateSalesTransaction")));// elementargumentserializer.cpp:102
    _valueCreateSalesTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateSalesTransaction.setQualified(true);
    message = _valueCreateSalesTransaction;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateSalesTransaction"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSTransactions::NDN_COMM__CreateSalesTransactionResponse();
    NSTransactions::NDN_COMM__CreateSalesTransactionResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSTransactions::Transactions::asyncCreateSalesTransaction( const NSTransactions::NDN_COMM__CreateSalesTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateSalesTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateSalesTransaction(parameters.serialize(QString::fromLatin1("CreateSalesTransaction")));// elementargumentserializer.cpp:102
    _valueCreateSalesTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateSalesTransaction.setQualified(true);
    message = _valueCreateSalesTransaction;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateSalesTransaction"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateSalesTransactionFinished(KDSoapPendingCallWatcher*)));
}

void NSTransactions::Transactions::_kd_slotCreateSalesTransactionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createSalesTransactionError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("createSalesTransaction"), reply);
    } else {
        NSTransactions::NDN_COMM__CreateSalesTransactionResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT createSalesTransactionDone( ret );
    }
    watcher->deleteLater();
}

NSTransactions::NDN_COMM__CreateStockTransactionResponse NSTransactions::Transactions::createStockTransaction( const NSTransactions::NDN_COMM__CreateStockTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateStockTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStockTransaction(parameters.serialize(QString::fromLatin1("CreateStockTransaction")));// elementargumentserializer.cpp:102
    _valueCreateStockTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateStockTransaction.setQualified(true);
    message = _valueCreateStockTransaction;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateStockTransaction"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSTransactions::NDN_COMM__CreateStockTransactionResponse();
    NSTransactions::NDN_COMM__CreateStockTransactionResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSTransactions::Transactions::asyncCreateStockTransaction( const NSTransactions::NDN_COMM__CreateStockTransaction& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateStockTransaction");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateStockTransaction(parameters.serialize(QString::fromLatin1("CreateStockTransaction")));// elementargumentserializer.cpp:102
    _valueCreateStockTransaction.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateStockTransaction.setQualified(true);
    message = _valueCreateStockTransaction;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateStockTransaction"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateStockTransactionFinished(KDSoapPendingCallWatcher*)));
}

void NSTransactions::Transactions::_kd_slotCreateStockTransactionFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createStockTransactionError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("createStockTransaction"), reply);
    } else {
        NSTransactions::NDN_COMM__CreateStockTransactionResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT createStockTransactionDone( ret );
    }
    watcher->deleteLater();
}

NSTransactions::NDN_COMM__CreateOpeningStockResponse NSTransactions::Transactions::createOpeningStock( const NSTransactions::NDN_COMM__CreateOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateOpeningStock(parameters.serialize(QString::fromLatin1("CreateOpeningStock")));// elementargumentserializer.cpp:102
    _valueCreateOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateOpeningStock.setQualified(true);
    message = _valueCreateOpeningStock;// elementargumentserializer.cpp:120
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("CreateOpeningStock"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSTransactions::NDN_COMM__CreateOpeningStockResponse();
    NSTransactions::NDN_COMM__CreateOpeningStockResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:632
    return ret;// converter_clientstub.cpp:687
}

void NSTransactions::Transactions::asyncCreateOpeningStock( const NSTransactions::NDN_COMM__CreateOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/ITransactions/CreateOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueCreateOpeningStock(parameters.serialize(QString::fromLatin1("CreateOpeningStock")));// elementargumentserializer.cpp:102
    _valueCreateOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueCreateOpeningStock.setQualified(true);
    message = _valueCreateOpeningStock;// elementargumentserializer.cpp:120
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("CreateOpeningStock"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotCreateOpeningStockFinished(KDSoapPendingCallWatcher*)));
}

void NSTransactions::Transactions::_kd_slotCreateOpeningStockFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT createOpeningStockError(reply);// converter_clientstub.cpp:801
        Q_EMIT soapError(QLatin1String("createOpeningStock"), reply);
    } else {
        NSTransactions::NDN_COMM__CreateOpeningStockResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:632
        Q_EMIT createOpeningStockDone( ret );
    }
    watcher->deleteLater();
}


