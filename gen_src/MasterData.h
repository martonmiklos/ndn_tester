// This file is generated by KDAB's kdwsdl2cpp from MasterData.svc?wsdl.
// All changes you do to this file will be lost.
/*
    You may use and relicense this generated file without restriction.
*/
#ifndef MASTERDATA_H
#define MASTERDATA_H

#include <QtCore/QString>
#include <QSharedPointer>
#include <QtCore/QSharedData>
#include <KDSoapClient/KDDateTime.h>
#include <QtCore/QList>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

#undef daylight
#undef timezone
class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
namespace NSMasterData {
    class MasterData;
    class NDN__ArrayOfManufacturer;
    class NDN__ArrayOfProduct;
    class NDN__ArrayOfProductGroup;
    class NDN__ArrayOfProductPackagingUnit;
    class NDN__ArrayOfProductPrice;
    class NDN__ArrayOfReasonCode;
    class NDN__ArrayOfVATRate;
    class NDN__ExciseCategory;
    class NDN__Manufacturer;
    class NDN__MovementType;
    class NDN__PriceLevelType;
    class NDN__Product;
    class NDN__ProductGroup;
    class NDN__ProductPackagingUnit;
    class NDN__ProductPrice;
    class NDN__ReasonCode;
    class NDN__ReasonCode_ReasonCodeEnum;
    class NDN__VATCode;
    class NDN__VATRate;
    class NDN__VATType;
}


namespace NSMasterData {
    class NDN_COMM__GetCurrentVATRates
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetCurrentVATRates();
        ~NDN_COMM__GetCurrentVATRates();

    public:
        NDN_COMM__GetCurrentVATRates( const NDN_COMM__GetCurrentVATRates& );
        NDN_COMM__GetCurrentVATRates &operator=( const NDN_COMM__GetCurrentVATRates& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetCurrentVATRatesResponse
    {
    public:
        void setGetCurrentVATRatesResult( const NSMasterData::NDN__ArrayOfVATRate& arg_getCurrentVATRatesResult );
        NSMasterData::NDN__ArrayOfVATRate getCurrentVATRatesResult() const;
        bool hasValueForGetCurrentVATRatesResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetCurrentVATRatesResponse();
        ~NDN_COMM__GetCurrentVATRatesResponse();

    public:
        NDN_COMM__GetCurrentVATRatesResponse( const NDN_COMM__GetCurrentVATRatesResponse& );
        NDN_COMM__GetCurrentVATRatesResponse &operator=( const NDN_COMM__GetCurrentVATRatesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetManufacturers
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetManufacturers();
        ~NDN_COMM__GetManufacturers();

    public:
        NDN_COMM__GetManufacturers( const NDN_COMM__GetManufacturers& );
        NDN_COMM__GetManufacturers &operator=( const NDN_COMM__GetManufacturers& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetManufacturersResponse
    {
    public:
        void setGetManufacturersResult( const NSMasterData::NDN__ArrayOfManufacturer& arg_getManufacturersResult );
        NSMasterData::NDN__ArrayOfManufacturer getManufacturersResult() const;
        bool hasValueForGetManufacturersResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetManufacturersResponse();
        ~NDN_COMM__GetManufacturersResponse();

    public:
        NDN_COMM__GetManufacturersResponse( const NDN_COMM__GetManufacturersResponse& );
        NDN_COMM__GetManufacturersResponse &operator=( const NDN_COMM__GetManufacturersResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductGroups
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductGroups();
        ~NDN_COMM__GetProductGroups();

    public:
        NDN_COMM__GetProductGroups( const NDN_COMM__GetProductGroups& );
        NDN_COMM__GetProductGroups &operator=( const NDN_COMM__GetProductGroups& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductGroupsResponse
    {
    public:
        void setGetProductGroupsResult( const NSMasterData::NDN__ArrayOfProductGroup& arg_getProductGroupsResult );
        NSMasterData::NDN__ArrayOfProductGroup getProductGroupsResult() const;
        bool hasValueForGetProductGroupsResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductGroupsResponse();
        ~NDN_COMM__GetProductGroupsResponse();

    public:
        NDN_COMM__GetProductGroupsResponse( const NDN_COMM__GetProductGroupsResponse& );
        NDN_COMM__GetProductGroupsResponse &operator=( const NDN_COMM__GetProductGroupsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductPrices
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductPrices();
        ~NDN_COMM__GetProductPrices();

    public:
        NDN_COMM__GetProductPrices( const NDN_COMM__GetProductPrices& );
        NDN_COMM__GetProductPrices &operator=( const NDN_COMM__GetProductPrices& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductPricesOf
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        void setProductCode( const QString& arg_productCode );
        QString productCode() const;
        bool hasValueForProductCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductPricesOf();
        ~NDN_COMM__GetProductPricesOf();

    public:
        NDN_COMM__GetProductPricesOf( const NDN_COMM__GetProductPricesOf& );
        NDN_COMM__GetProductPricesOf &operator=( const NDN_COMM__GetProductPricesOf& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductPricesOfResponse
    {
    public:
        void setGetProductPricesOfResult( const NSMasterData::NDN__ArrayOfProductPrice& arg_getProductPricesOfResult );
        NSMasterData::NDN__ArrayOfProductPrice getProductPricesOfResult() const;
        bool hasValueForGetProductPricesOfResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductPricesOfResponse();
        ~NDN_COMM__GetProductPricesOfResponse();

    public:
        NDN_COMM__GetProductPricesOfResponse( const NDN_COMM__GetProductPricesOfResponse& );
        NDN_COMM__GetProductPricesOfResponse &operator=( const NDN_COMM__GetProductPricesOfResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductPricesResponse
    {
    public:
        void setGetProductPricesResult( const NSMasterData::NDN__ArrayOfProductPrice& arg_getProductPricesResult );
        NSMasterData::NDN__ArrayOfProductPrice getProductPricesResult() const;
        bool hasValueForGetProductPricesResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductPricesResponse();
        ~NDN_COMM__GetProductPricesResponse();

    public:
        NDN_COMM__GetProductPricesResponse( const NDN_COMM__GetProductPricesResponse& );
        NDN_COMM__GetProductPricesResponse &operator=( const NDN_COMM__GetProductPricesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProducts
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProducts();
        ~NDN_COMM__GetProducts();

    public:
        NDN_COMM__GetProducts( const NDN_COMM__GetProducts& );
        NDN_COMM__GetProducts &operator=( const NDN_COMM__GetProducts& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductsResponse
    {
    public:
        void setGetProductsResult( const NSMasterData::NDN__ArrayOfProduct& arg_getProductsResult );
        NSMasterData::NDN__ArrayOfProduct getProductsResult() const;
        bool hasValueForGetProductsResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductsResponse();
        ~NDN_COMM__GetProductsResponse();

    public:
        NDN_COMM__GetProductsResponse( const NDN_COMM__GetProductsResponse& );
        NDN_COMM__GetProductsResponse &operator=( const NDN_COMM__GetProductsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductsSince
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        void setModifiedSince( const KDDateTime& arg_modifiedSince );
        KDDateTime modifiedSince() const;
        bool hasValueForModifiedSince() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductsSince();
        ~NDN_COMM__GetProductsSince();

    public:
        NDN_COMM__GetProductsSince( const NDN_COMM__GetProductsSince& );
        NDN_COMM__GetProductsSince &operator=( const NDN_COMM__GetProductsSince& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetProductsSinceResponse
    {
    public:
        void setGetProductsSinceResult( const NSMasterData::NDN__ArrayOfProduct& arg_getProductsSinceResult );
        NSMasterData::NDN__ArrayOfProduct getProductsSinceResult() const;
        bool hasValueForGetProductsSinceResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetProductsSinceResponse();
        ~NDN_COMM__GetProductsSinceResponse();

    public:
        NDN_COMM__GetProductsSinceResponse( const NDN_COMM__GetProductsSinceResponse& );
        NDN_COMM__GetProductsSinceResponse &operator=( const NDN_COMM__GetProductsSinceResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetReasonCodes
    {
    public:
        void setShopId( const QString& arg_shopId );
        QString shopId() const;
        bool hasValueForShopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetReasonCodes();
        ~NDN_COMM__GetReasonCodes();

    public:
        NDN_COMM__GetReasonCodes( const NDN_COMM__GetReasonCodes& );
        NDN_COMM__GetReasonCodes &operator=( const NDN_COMM__GetReasonCodes& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN_COMM__GetReasonCodesResponse
    {
    public:
        void setGetReasonCodesResult( const NSMasterData::NDN__ArrayOfReasonCode& arg_getReasonCodesResult );
        NSMasterData::NDN__ArrayOfReasonCode getReasonCodesResult() const;
        bool hasValueForGetReasonCodesResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN_COMM__GetReasonCodesResponse();
        ~NDN_COMM__GetReasonCodesResponse();

    public:
        NDN_COMM__GetReasonCodesResponse( const NDN_COMM__GetReasonCodesResponse& );
        NDN_COMM__GetReasonCodesResponse &operator=( const NDN_COMM__GetReasonCodesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfManufacturer
    {
    public:
        void setManufacturer( const QList< NSMasterData::NDN__Manufacturer >& arg_manufacturer );
        QList< NSMasterData::NDN__Manufacturer > manufacturer() const;
        bool hasValueForManufacturer() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfManufacturer();
        ~NDN__ArrayOfManufacturer();

    public:
        NDN__ArrayOfManufacturer( const NDN__ArrayOfManufacturer& );
        NDN__ArrayOfManufacturer &operator=( const NDN__ArrayOfManufacturer& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfProduct
    {
    public:
        void setProduct( const QList< NSMasterData::NDN__Product >& arg_product );
        QList< NSMasterData::NDN__Product > product() const;
        bool hasValueForProduct() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfProduct();
        ~NDN__ArrayOfProduct();

    public:
        NDN__ArrayOfProduct( const NDN__ArrayOfProduct& );
        NDN__ArrayOfProduct &operator=( const NDN__ArrayOfProduct& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfProductGroup
    {
    public:
        void setProductGroup( const QList< NSMasterData::NDN__ProductGroup >& arg_productGroup );
        QList< NSMasterData::NDN__ProductGroup > productGroup() const;
        bool hasValueForProductGroup() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfProductGroup();
        ~NDN__ArrayOfProductGroup();

    public:
        NDN__ArrayOfProductGroup( const NDN__ArrayOfProductGroup& );
        NDN__ArrayOfProductGroup &operator=( const NDN__ArrayOfProductGroup& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfProductPackagingUnit
    {
    public:
        void setProductPackagingUnit( const QList< NSMasterData::NDN__ProductPackagingUnit >& arg_productPackagingUnit );
        QList< NSMasterData::NDN__ProductPackagingUnit > productPackagingUnit() const;
        bool hasValueForProductPackagingUnit() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfProductPackagingUnit();
        ~NDN__ArrayOfProductPackagingUnit();

    public:
        NDN__ArrayOfProductPackagingUnit( const NDN__ArrayOfProductPackagingUnit& );
        NDN__ArrayOfProductPackagingUnit &operator=( const NDN__ArrayOfProductPackagingUnit& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfProductPrice
    {
    public:
        void setProductPrice( const QList< NSMasterData::NDN__ProductPrice >& arg_productPrice );
        QList< NSMasterData::NDN__ProductPrice > productPrice() const;
        bool hasValueForProductPrice() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfProductPrice();
        ~NDN__ArrayOfProductPrice();

    public:
        NDN__ArrayOfProductPrice( const NDN__ArrayOfProductPrice& );
        NDN__ArrayOfProductPrice &operator=( const NDN__ArrayOfProductPrice& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfReasonCode
    {
    public:
        void setReasonCode( const QList< NSMasterData::NDN__ReasonCode >& arg_reasonCode );
        QList< NSMasterData::NDN__ReasonCode > reasonCode() const;
        bool hasValueForReasonCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfReasonCode();
        ~NDN__ArrayOfReasonCode();

    public:
        NDN__ArrayOfReasonCode( const NDN__ArrayOfReasonCode& );
        NDN__ArrayOfReasonCode &operator=( const NDN__ArrayOfReasonCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ArrayOfVATRate
    {
    public:
        void setVATRate( const QList< NSMasterData::NDN__VATRate >& arg_vATRate );
        QList< NSMasterData::NDN__VATRate > vATRate() const;
        bool hasValueForVATRate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ArrayOfVATRate();
        ~NDN__ArrayOfVATRate();

    public:
        NDN__ArrayOfVATRate( const NDN__ArrayOfVATRate& );
        NDN__ArrayOfVATRate &operator=( const NDN__ArrayOfVATRate& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__ExciseCategory you can
        also pass the enum directly.
        Example:
        someMethod(NDN__ExciseCategory::Tobacco).
     */
    class NDN__ExciseCategory
    {
    public:
        enum Type { Tobacco, Alcohol, Other };

    public:
        NDN__ExciseCategory( const Type &type );
        void setType( Type type );
        NSMasterData::NDN__ExciseCategory::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ExciseCategory();
        ~NDN__ExciseCategory();

    private:
        Type mType;
    };
} // namespace end

namespace NSMasterData {
    class NDN__Manufacturer
    {
    public:
        void setCode( int arg_code );
        int code() const;
        bool hasValueForCode() const;
        void setName( const QString& arg_name );
        QString name() const;
        bool hasValueForName() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__Manufacturer();
        ~NDN__Manufacturer();

    public:
        NDN__Manufacturer( const NDN__Manufacturer& );
        NDN__Manufacturer &operator=( const NDN__Manufacturer& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__MovementType you can
        also pass the enum directly.
        Example:
        someMethod(NDN__MovementType::AB).
     */
    class NDN__MovementType
    {
    public:
        enum Type { AB, ABS, BET, BETS, SVISZ, SVISZS, KIT, KITS, LELTT, LELTH, EGYT, EGYJ, ASZLA, ASZLAS, NY, NYS, KSZLA, KSZLAS, VVISZ };

    public:
        NDN__MovementType( const Type &type );
        void setType( Type type );
        NSMasterData::NDN__MovementType::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__MovementType();
        ~NDN__MovementType();

    private:
        Type mType;
    };
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__PriceLevelType you can
        also pass the enum directly.
        Example:
        someMethod(NDN__PriceLevelType::A).
     */
    class NDN__PriceLevelType
    {
    public:
        enum Type { A, Z, N };

    public:
        NDN__PriceLevelType( const Type &type );
        void setType( Type type );
        NSMasterData::NDN__PriceLevelType::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__PriceLevelType();
        ~NDN__PriceLevelType();

    private:
        Type mType;
    };
} // namespace end

namespace NSMasterData {
    class NDN__Product
    {
    public:
        void setBaseBarCode( const QString& arg_baseBarCode );
        QString baseBarCode() const;
        bool hasValueForBaseBarCode() const;
        void setBaseUnitOfMeasure( const QString& arg_baseUnitOfMeasure );
        QString baseUnitOfMeasure() const;
        bool hasValueForBaseUnitOfMeasure() const;
        void setCashRegisterVATCode( const NSMasterData::NDN__VATCode& arg_cashRegisterVATCode );
        NSMasterData::NDN__VATCode cashRegisterVATCode() const;
        bool hasValueForCashRegisterVATCode() const;
        void setCode( const QString& arg_code );
        QString code() const;
        bool hasValueForCode() const;
        void setCustCommCode( const QString& arg_custCommCode );
        QString custCommCode() const;
        bool hasValueForCustCommCode() const;
        void setExciseCategory( const NSMasterData::NDN__ExciseCategory& arg_exciseCategory );
        NSMasterData::NDN__ExciseCategory exciseCategory() const;
        bool hasValueForExciseCategory() const;
        void setLastModifiedOn( const KDDateTime& arg_lastModifiedOn );
        KDDateTime lastModifiedOn() const;
        bool hasValueForLastModifiedOn() const;
        void setManufacturerCode( int arg_manufacturerCode );
        int manufacturerCode() const;
        bool hasValueForManufacturerCode() const;
        void setName( const QString& arg_name );
        QString name() const;
        bool hasValueForName() const;
        void setPackagingQuantity( float arg_packagingQuantity );
        float packagingQuantity() const;
        bool hasValueForPackagingQuantity() const;
        void setPackagingUnitOfMeasure( const QString& arg_packagingUnitOfMeasure );
        QString packagingUnitOfMeasure() const;
        bool hasValueForPackagingUnitOfMeasure() const;
        void setPackagingUnits( const NSMasterData::NDN__ArrayOfProductPackagingUnit& arg_packagingUnits );
        NSMasterData::NDN__ArrayOfProductPackagingUnit packagingUnits() const;
        bool hasValueForPackagingUnits() const;
        void setPrices( const NSMasterData::NDN__ArrayOfProductPrice& arg_prices );
        NSMasterData::NDN__ArrayOfProductPrice prices() const;
        bool hasValueForPrices() const;
        void setProductGroup( int arg_productGroup );
        int productGroup() const;
        bool hasValueForProductGroup() const;
        void setShortName( const QString& arg_shortName );
        QString shortName() const;
        bool hasValueForShortName() const;
        void setValidTo( const KDDateTime& arg_validTo );
        KDDateTime validTo() const;
        bool hasValueForValidTo() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__Product();
        ~NDN__Product();

    public:
        NDN__Product( const NDN__Product& );
        NDN__Product &operator=( const NDN__Product& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ProductGroup
    {
    public:
        void setCode( int arg_code );
        int code() const;
        bool hasValueForCode() const;
        void setIsFixedPrice( bool arg_isFixedPrice );
        bool isFixedPrice() const;
        bool hasValueForIsFixedPrice() const;
        void setName( const QString& arg_name );
        QString name() const;
        bool hasValueForName() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ProductGroup();
        ~NDN__ProductGroup();

    public:
        NDN__ProductGroup( const NDN__ProductGroup& );
        NDN__ProductGroup &operator=( const NDN__ProductGroup& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ProductPackagingUnit
    {
    public:
        void setBarCode( const QString& arg_barCode );
        QString barCode() const;
        bool hasValueForBarCode() const;
        void setMultiplier( float arg_multiplier );
        float multiplier() const;
        bool hasValueForMultiplier() const;
        void setPackagingUnit( const QString& arg_packagingUnit );
        QString packagingUnit() const;
        bool hasValueForPackagingUnit() const;
        void setPackagingUnitCode( const QString& arg_packagingUnitCode );
        QString packagingUnitCode() const;
        bool hasValueForPackagingUnitCode() const;
        void setProductCode( const QString& arg_productCode );
        QString productCode() const;
        bool hasValueForProductCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ProductPackagingUnit();
        ~NDN__ProductPackagingUnit();

    public:
        NDN__ProductPackagingUnit( const NDN__ProductPackagingUnit& );
        NDN__ProductPackagingUnit &operator=( const NDN__ProductPackagingUnit& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ProductPrice
    {
    public:
        void setCurrency( const QString& arg_currency );
        QString currency() const;
        bool hasValueForCurrency() const;
        void setLineNo( int arg_lineNo );
        int lineNo() const;
        bool hasValueForLineNo() const;
        void setPrice( float arg_price );
        float price() const;
        bool hasValueForPrice() const;
        void setPriceLevelType( const NSMasterData::NDN__PriceLevelType& arg_priceLevelType );
        NSMasterData::NDN__PriceLevelType priceLevelType() const;
        bool hasValueForPriceLevelType() const;
        void setProductCode( const QString& arg_productCode );
        QString productCode() const;
        bool hasValueForProductCode() const;
        void setValidFrom( const KDDateTime& arg_validFrom );
        KDDateTime validFrom() const;
        bool hasValueForValidFrom() const;
        void setValidTo( const KDDateTime& arg_validTo );
        KDDateTime validTo() const;
        bool hasValueForValidTo() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ProductPrice();
        ~NDN__ProductPrice();

    public:
        NDN__ProductPrice( const NDN__ProductPrice& );
        NDN__ProductPrice &operator=( const NDN__ProductPrice& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    class NDN__ReasonCode
    {
    public:
        void setCode( const NSMasterData::NDN__ReasonCode_ReasonCodeEnum& arg_code );
        NSMasterData::NDN__ReasonCode_ReasonCodeEnum code() const;
        bool hasValueForCode() const;
        void setDescription( const QString& arg_description );
        QString description() const;
        bool hasValueForDescription() const;
        void setMovementType( const NSMasterData::NDN__MovementType& arg_movementType );
        NSMasterData::NDN__MovementType movementType() const;
        bool hasValueForMovementType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ReasonCode();
        ~NDN__ReasonCode();

    public:
        NDN__ReasonCode( const NDN__ReasonCode& );
        NDN__ReasonCode &operator=( const NDN__ReasonCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type
        NDN__ReasonCode_ReasonCodeEnum you can also pass the enum directly.
        Example:
        someMethod(NDN__ReasonCode_ReasonCodeEnum::Scrapping).
     */
    class NDN__ReasonCode_ReasonCodeEnum
    {
    public:
        enum Type { Scrapping, Usage, OtherLoss, InventoryCorrection, OtherGain };

    public:
        NDN__ReasonCode_ReasonCodeEnum( const Type &type );
        void setType( Type type );
        NSMasterData::NDN__ReasonCode_ReasonCodeEnum::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__ReasonCode_ReasonCodeEnum();
        ~NDN__ReasonCode_ReasonCodeEnum();

    private:
        Type mType;
    };
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__VATCode you can also
        pass the enum directly. Example:
        someMethod(NDN__VATCode::A).
     */
    class NDN__VATCode
    {
    public:
        enum Type { A, B, C, D, E, F, G, H, I, J, K };

    public:
        NDN__VATCode( const Type &type );
        void setType( Type type );
        NSMasterData::NDN__VATCode::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__VATCode();
        ~NDN__VATCode();

    private:
        Type mType;
    };
} // namespace end

namespace NSMasterData {
    class NDN__VATRate
    {
    public:
        void setActive( bool arg_active );
        bool active() const;
        bool hasValueForActive() const;
        void setCashRegisterVATCode( const NSMasterData::NDN__VATCode& arg_cashRegisterVATCode );
        NSMasterData::NDN__VATCode cashRegisterVATCode() const;
        bool hasValueForCashRegisterVATCode() const;
        void setCode( const QString& arg_code );
        QString code() const;
        bool hasValueForCode() const;
        void setName( const QString& arg_name );
        QString name() const;
        bool hasValueForName() const;
        void setPercentage( float arg_percentage );
        float percentage() const;
        bool hasValueForPercentage() const;
        void setType( const NSMasterData::NDN__VATType& arg_type );
        NSMasterData::NDN__VATType type() const;
        bool hasValueForType() const;
        void setValidFrom( const KDDateTime& arg_validFrom );
        KDDateTime validFrom() const;
        bool hasValueForValidFrom() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__VATRate();
        ~NDN__VATRate();

    public:
        NDN__VATRate( const NDN__VATRate& );
        NDN__VATRate &operator=( const NDN__VATRate& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
    };
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type NDN__VATType you can also
        pass the enum directly. Example:
        someMethod(NDN__VATType::SALES).
     */
    class NDN__VATType
    {
    public:
        enum Type { SALES, PURCHASE };

    public:
        NDN__VATType( const Type &type );
        void setType( Type type );
        NSMasterData::NDN__VATType::Type type() const;
        operator Type() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        NDN__VATType();
        ~NDN__VATType();

    private:
        Type mType;
    };
} // namespace end

namespace NSMasterData {
    class GetCurrentVATRatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCurrentVATRatesJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetCurrentVATRates& arg0 );
        NSMasterData::NDN_COMM__GetCurrentVATRates parameters() const;
        NSMasterData::NDN_COMM__GetCurrentVATRatesResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetCurrentVATRates mParameters;
        NSMasterData::NDN_COMM__GetCurrentVATRatesResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetManufacturersJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetManufacturersJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetManufacturers& arg0 );
        NSMasterData::NDN_COMM__GetManufacturers parameters() const;
        NSMasterData::NDN_COMM__GetManufacturersResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetManufacturers mParameters;
        NSMasterData::NDN_COMM__GetManufacturersResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetProductGroupsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductGroupsJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetProductGroups& arg0 );
        NSMasterData::NDN_COMM__GetProductGroups parameters() const;
        NSMasterData::NDN_COMM__GetProductGroupsResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetProductGroups mParameters;
        NSMasterData::NDN_COMM__GetProductGroupsResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetProductPricesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductPricesJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetProductPrices& arg0 );
        NSMasterData::NDN_COMM__GetProductPrices parameters() const;
        NSMasterData::NDN_COMM__GetProductPricesResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetProductPrices mParameters;
        NSMasterData::NDN_COMM__GetProductPricesResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetProductPricesOfJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductPricesOfJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetProductPricesOf& arg0 );
        NSMasterData::NDN_COMM__GetProductPricesOf parameters() const;
        NSMasterData::NDN_COMM__GetProductPricesOfResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetProductPricesOf mParameters;
        NSMasterData::NDN_COMM__GetProductPricesOfResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetProductsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductsJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetProducts& arg0 );
        NSMasterData::NDN_COMM__GetProducts parameters() const;
        NSMasterData::NDN_COMM__GetProductsResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetProducts mParameters;
        NSMasterData::NDN_COMM__GetProductsResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetProductsSinceJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductsSinceJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetProductsSince& arg0 );
        NSMasterData::NDN_COMM__GetProductsSince parameters() const;
        NSMasterData::NDN_COMM__GetProductsSinceResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetProductsSince mParameters;
        NSMasterData::NDN_COMM__GetProductsSinceResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class GetReasonCodesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetReasonCodesJob( NSMasterData::MasterData* service, QObject* _parent = nullptr );
        void setParameters( const NSMasterData::NDN_COMM__GetReasonCodes& arg0 );
        NSMasterData::NDN_COMM__GetReasonCodes parameters() const;
        NSMasterData::NDN_COMM__GetReasonCodesResponse resultParameters() const;

    protected:
        virtual void doStart() override;

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::NDN_COMM__GetReasonCodes mParameters;
        NSMasterData::NDN_COMM__GetReasonCodesResponse mResultParameters;
    };
} // namespace end

namespace NSMasterData {
    class MasterData : public QObject
    {
        Q_OBJECT

    public:
        MasterData( QObject* _parent = nullptr );
        ~MasterData();
        /**
            Asks Qt to ignore ssl errors in https requests. Use this for
            testing only!
         */
        void ignoreSslErrors();
        /**
            Overwrite the end point defined in the .wsdl file, with another
            http/https URL.
         */
        void setEndPoint( const QString& endPoint );
        /**
            Return the end point that will be used.
         */
        QString endPoint() const;
        /**
            Overwrite the soap version defined in the .wsdl file, with another
            version.
            version can be KDSoapClientInterface::SOAP1_1 or
            KDSoapClientInterface::SOAP1_2
         */
        void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
        /**
            Return the soap version used.n
         */
        KDSoapClientInterface::SoapVersion soapVersion() const;
        /**
            Return the fault code from the last blocking call.
            Empty if no error.
         */
        int lastErrorCode() const;
        /**
            Return the fault code from the last blocking call.
            Empty if no error.
         */
        QString lastFaultCode() const;
        /**
            Return the error from the last blocking call.
            Empty if no error.
         */
        QString lastError() const;
        /**
            Returns the underlying KDSoapClientInterface instance, which allows
            to access setCookieJar, lastResponseHeaders, etc.
         */
        const KDSoapClientInterface *clientInterface() const;
        KDSoapClientInterface *clientInterface();
        /**
            Blocking call to GetCurrentVATRates.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetCurrentVATRatesResponse getCurrentVATRates( const NSMasterData::NDN_COMM__GetCurrentVATRates& parameters );
        /**
            Asynchronous call to GetCurrentVATRates.
            Remember to connect to getCurrentVATRatesDone and
            getCurrentVATRatesError.
            Deprecated, use GetCurrentVATRatesJob instead.
         */
        void asyncGetCurrentVATRates( const NSMasterData::NDN_COMM__GetCurrentVATRates& parameters );
        /**
            Blocking call to GetManufacturers.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetManufacturersResponse getManufacturers( const NSMasterData::NDN_COMM__GetManufacturers& parameters );
        /**
            Asynchronous call to GetManufacturers.
            Remember to connect to getManufacturersDone and
            getManufacturersError.
            Deprecated, use GetManufacturersJob instead.
         */
        void asyncGetManufacturers( const NSMasterData::NDN_COMM__GetManufacturers& parameters );
        /**
            Blocking call to GetProductGroups.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetProductGroupsResponse getProductGroups( const NSMasterData::NDN_COMM__GetProductGroups& parameters );
        /**
            Asynchronous call to GetProductGroups.
            Remember to connect to getProductGroupsDone and
            getProductGroupsError.
            Deprecated, use GetProductGroupsJob instead.
         */
        void asyncGetProductGroups( const NSMasterData::NDN_COMM__GetProductGroups& parameters );
        /**
            Blocking call to GetProducts.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetProductsResponse getProducts( const NSMasterData::NDN_COMM__GetProducts& parameters );
        /**
            Asynchronous call to GetProducts.
            Remember to connect to getProductsDone and
            getProductsError.
            Deprecated, use GetProductsJob instead.
         */
        void asyncGetProducts( const NSMasterData::NDN_COMM__GetProducts& parameters );
        /**
            Blocking call to GetProductsSince.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetProductsSinceResponse getProductsSince( const NSMasterData::NDN_COMM__GetProductsSince& parameters );
        /**
            Asynchronous call to GetProductsSince.
            Remember to connect to getProductsSinceDone and
            getProductsSinceError.
            Deprecated, use GetProductsSinceJob instead.
         */
        void asyncGetProductsSince( const NSMasterData::NDN_COMM__GetProductsSince& parameters );
        /**
            Blocking call to GetProductPrices.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetProductPricesResponse getProductPrices( const NSMasterData::NDN_COMM__GetProductPrices& parameters );
        /**
            Asynchronous call to GetProductPrices.
            Remember to connect to getProductPricesDone and
            getProductPricesError.
            Deprecated, use GetProductPricesJob instead.
         */
        void asyncGetProductPrices( const NSMasterData::NDN_COMM__GetProductPrices& parameters );
        /**
            Blocking call to GetProductPricesOf.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetProductPricesOfResponse getProductPricesOf( const NSMasterData::NDN_COMM__GetProductPricesOf& parameters );
        /**
            Asynchronous call to GetProductPricesOf.
            Remember to connect to getProductPricesOfDone and
            getProductPricesOfError.
            Deprecated, use GetProductPricesOfJob instead.
         */
        void asyncGetProductPricesOf( const NSMasterData::NDN_COMM__GetProductPricesOf& parameters );
        /**
            Blocking call to GetReasonCodes.
            Not recommended in a GUI thread.
         */
        NSMasterData::NDN_COMM__GetReasonCodesResponse getReasonCodes( const NSMasterData::NDN_COMM__GetReasonCodes& parameters );
        /**
            Asynchronous call to GetReasonCodes.
            Remember to connect to getReasonCodesDone and
            getReasonCodesError.
            Deprecated, use GetReasonCodesJob instead.
         */
        void asyncGetReasonCodes( const NSMasterData::NDN_COMM__GetReasonCodes& parameters );

    Q_SIGNALS:
        /**
            This signal is emitted whenever a SOAP call failed, for a central
            processing of all SOAP errors.
            method is the name of the method (or operation) that returned the
            fault, for instance "addContact".
         */
        void soapError( const QString& method, const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetCurrentVATRates() has succeeded.
         */
        void getCurrentVATRatesDone( const NSMasterData::NDN_COMM__GetCurrentVATRatesResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetCurrentVATRates() has failed.
         */
        void getCurrentVATRatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetManufacturers() has succeeded.
         */
        void getManufacturersDone( const NSMasterData::NDN_COMM__GetManufacturersResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetManufacturers() has failed.
         */
        void getManufacturersError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductGroups() has succeeded.
         */
        void getProductGroupsDone( const NSMasterData::NDN_COMM__GetProductGroupsResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductGroups() has failed.
         */
        void getProductGroupsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProducts() has succeeded.
         */
        void getProductsDone( const NSMasterData::NDN_COMM__GetProductsResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProducts() has failed.
         */
        void getProductsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductsSince() has succeeded.
         */
        void getProductsSinceDone( const NSMasterData::NDN_COMM__GetProductsSinceResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductsSince() has failed.
         */
        void getProductsSinceError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductPrices() has succeeded.
         */
        void getProductPricesDone( const NSMasterData::NDN_COMM__GetProductPricesResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductPrices() has failed.
         */
        void getProductPricesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductPricesOf() has succeeded.
         */
        void getProductPricesOfDone( const NSMasterData::NDN_COMM__GetProductPricesOfResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetProductPricesOf() has failed.
         */
        void getProductPricesOfError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetReasonCodes() has succeeded.
         */
        void getReasonCodesDone( const NSMasterData::NDN_COMM__GetReasonCodesResponse& parameters );
        /**
            This signal is emitted whenever the asynchronous call
            asyncGetReasonCodes() has failed.
         */
        void getReasonCodesError( const KDSoapMessage& fault );

    private Q_SLOTS:
        void _kd_slotGetCurrentVATRatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetManufacturersFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductGroupsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductsSinceFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductPricesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductPricesOfFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetReasonCodesFinished( KDSoapPendingCallWatcher* watcher );

    private:
        class PrivateDPtr;
        PrivateDPtr *d_ptr;
    };
} // namespace end

#endif
