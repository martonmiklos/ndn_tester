// This file is generated by KDAB's kdwsdl2cpp from MasterData.svc.
// All changes you do to this file will be lost.
#ifndef WSDL_MASTERDATA_H
#define WSDL_MASTERDATA_H

#include <QtCore/QString>
#include <QtCore/QSharedData>
#include <QtCore/QList>
#include <KDSoapClient/KDDateTime.h>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
namespace NSMasterData {
    class MasterData;
    class __ArrayOfManufacturer;
    class __ArrayOfProduct;
    class __ArrayOfProductGroup;
    class __ArrayOfProductPackagingUnit;
    class __ArrayOfProductPrice;
    class __ArrayOfReasonCode;
    class __ArrayOfVATRate;
    class __ExciseCategory;
    class __Manufacturer;
    class __MovementType;
    class __Product;
    class __ProductGroup;
    class __ProductPackagingUnit;
    class __ProductPrice;
    class __ReasonCode;
    class __ReasonCode_ReasonCodeEnum;
    class __VATCode;
    class __VATRate;
    class __VATType;
}


namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __ReasonCode_ReasonCodeEnum
        you can also pass the enum directly.
        Example:
        someMethod(__ReasonCode_ReasonCodeEnum::Scrapping).
     */
    class __ReasonCode_ReasonCodeEnum
    {
    public:
        enum Type { Scrapping, Usage, OtherLoss, InventoryCorrection, OtherGain };

    public:
        __ReasonCode_ReasonCodeEnum( const Type &type );
        void setType( Type type );
        NSMasterData::__ReasonCode_ReasonCodeEnum::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __ReasonCode_ReasonCodeEnum();
        ~__ReasonCode_ReasonCodeEnum();

    private:
        Type mType;
};
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __VATCode you can also pass
        the enum directly. Example:
        someMethod(__VATCode::A).
     */
    class __VATCode
    {
    public:
        enum Type { A, B, C, D, E, F, G, H, I, J, K };

    public:
        __VATCode( const Type &type );
        void setType( Type type );
        NSMasterData::__VATCode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __VATCode();
        ~__VATCode();

    private:
        Type mType;
};
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __ExciseCategory you can
        also pass the enum directly.
        Example:
        someMethod(__ExciseCategory::Tobacco).
     */
    class __ExciseCategory
    {
    public:
        enum Type { Tobacco, Alcohol, Other };

    public:
        __ExciseCategory( const Type &type );
        void setType( Type type );
        NSMasterData::__ExciseCategory::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __ExciseCategory();
        ~__ExciseCategory();

    private:
        Type mType;
};
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __VATType you can also pass
        the enum directly. Example:
        someMethod(__VATType::SALES).
     */
    class __VATType
    {
    public:
        enum Type { SALES, PURCHASE };

    public:
        __VATType( const Type &type );
        void setType( Type type );
        NSMasterData::__VATType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __VATType();
        ~__VATType();

    private:
        Type mType;
};
} // namespace end

namespace NSMasterData {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __MovementType you can also
        pass the enum directly. Example:
        someMethod(__MovementType::AB).
     */
    class __MovementType
    {
    public:
        enum Type { AB, ABS, BET, BETS, SVISZ, SVISZS, KIT, KITS, LELTT, LELTH, EGYT, EGYJ, ASZLA, ASZLAS, NY, NYS, KSZLA, KSZLAS, VVISZ };

    public:
        __MovementType( const Type &type );
        void setType( Type type );
        NSMasterData::__MovementType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __MovementType();
        ~__MovementType();

    private:
        Type mType;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProducts
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProducts();
        ~TNS__GetProducts();

    public:
        TNS__GetProducts( const TNS__GetProducts& );
        TNS__GetProducts &operator=( const TNS__GetProducts& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductPricesOfResponse
    {
    public:
        void setGetProductPricesOfResult( const NSMasterData::__ArrayOfProductPrice& getProductPricesOfResult );
        NSMasterData::__ArrayOfProductPrice getProductPricesOfResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductPricesOfResponse();
        ~TNS__GetProductPricesOfResponse();

    public:
        TNS__GetProductPricesOfResponse( const TNS__GetProductPricesOfResponse& );
        TNS__GetProductPricesOfResponse &operator=( const TNS__GetProductPricesOfResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfReasonCode
    {
    public:
        void setReasonCode( const QList<NSMasterData::__ReasonCode>& reasonCode );
        QList<NSMasterData::__ReasonCode> reasonCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfReasonCode();
        ~__ArrayOfReasonCode();

    public:
        __ArrayOfReasonCode( const __ArrayOfReasonCode& );
        __ArrayOfReasonCode &operator=( const __ArrayOfReasonCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ProductGroup
    {
    public:
        void setCode( int code );
        int code() const;
        void setIsFixedPrice( bool isFixedPrice );
        bool isFixedPrice() const;
        void setName( const QString& name );
        QString name() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ProductGroup();
        ~__ProductGroup();

    public:
        __ProductGroup( const __ProductGroup& );
        __ProductGroup &operator=( const __ProductGroup& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ProductPackagingUnit
    {
    public:
        void setBarCode( const QString& barCode );
        QString barCode() const;
        void setMultiplier( float multiplier );
        float multiplier() const;
        void setPackagingUnit( const QString& packagingUnit );
        QString packagingUnit() const;
        void setPackagingUnitCode( const QString& packagingUnitCode );
        QString packagingUnitCode() const;
        void setProductCode( const QString& productCode );
        QString productCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ProductPackagingUnit();
        ~__ProductPackagingUnit();

    public:
        __ProductPackagingUnit( const __ProductPackagingUnit& );
        __ProductPackagingUnit &operator=( const __ProductPackagingUnit& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetCurrentVATRatesResponse
    {
    public:
        void setGetCurrentVATRatesResult( const NSMasterData::__ArrayOfVATRate& getCurrentVATRatesResult );
        NSMasterData::__ArrayOfVATRate getCurrentVATRatesResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetCurrentVATRatesResponse();
        ~TNS__GetCurrentVATRatesResponse();

    public:
        TNS__GetCurrentVATRatesResponse( const TNS__GetCurrentVATRatesResponse& );
        TNS__GetCurrentVATRatesResponse &operator=( const TNS__GetCurrentVATRatesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __Manufacturer
    {
    public:
        void setCode( int code );
        int code() const;
        void setName( const QString& name );
        QString name() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __Manufacturer();
        ~__Manufacturer();

    public:
        __Manufacturer( const __Manufacturer& );
        __Manufacturer &operator=( const __Manufacturer& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductsSinceResponse
    {
    public:
        void setGetProductsSinceResult( const NSMasterData::__ArrayOfProduct& getProductsSinceResult );
        NSMasterData::__ArrayOfProduct getProductsSinceResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductsSinceResponse();
        ~TNS__GetProductsSinceResponse();

    public:
        TNS__GetProductsSinceResponse( const TNS__GetProductsSinceResponse& );
        TNS__GetProductsSinceResponse &operator=( const TNS__GetProductsSinceResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductGroups
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductGroups();
        ~TNS__GetProductGroups();

    public:
        TNS__GetProductGroups( const TNS__GetProductGroups& );
        TNS__GetProductGroups &operator=( const TNS__GetProductGroups& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductsSince
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setModifiedSince( const KDDateTime& modifiedSince );
        KDDateTime modifiedSince() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductsSince();
        ~TNS__GetProductsSince();

    public:
        TNS__GetProductsSince( const TNS__GetProductsSince& );
        TNS__GetProductsSince &operator=( const TNS__GetProductsSince& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetReasonCodesResponse
    {
    public:
        void setGetReasonCodesResult( const NSMasterData::__ArrayOfReasonCode& getReasonCodesResult );
        NSMasterData::__ArrayOfReasonCode getReasonCodesResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetReasonCodesResponse();
        ~TNS__GetReasonCodesResponse();

    public:
        TNS__GetReasonCodesResponse( const TNS__GetReasonCodesResponse& );
        TNS__GetReasonCodesResponse &operator=( const TNS__GetReasonCodesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfProduct
    {
    public:
        void setProduct( const QList<NSMasterData::__Product>& product );
        QList<NSMasterData::__Product> product() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfProduct();
        ~__ArrayOfProduct();

    public:
        __ArrayOfProduct( const __ArrayOfProduct& );
        __ArrayOfProduct &operator=( const __ArrayOfProduct& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __Product
    {
    public:
        void setBaseBarCode( const QString& baseBarCode );
        QString baseBarCode() const;
        void setBaseUnitOfMeasure( const QString& baseUnitOfMeasure );
        QString baseUnitOfMeasure() const;
        void setCashRegisterVATCode( const NSMasterData::__VATCode& cashRegisterVATCode );
        NSMasterData::__VATCode cashRegisterVATCode() const;
        void setCode( const QString& code );
        QString code() const;
        void setCustCommCode( const QString& custCommCode );
        QString custCommCode() const;
        void setExciseCategory( const NSMasterData::__ExciseCategory& exciseCategory );
        NSMasterData::__ExciseCategory exciseCategory() const;
        void setLastModifiedOn( const KDDateTime& lastModifiedOn );
        KDDateTime lastModifiedOn() const;
        void setManufacturerCode( int manufacturerCode );
        int manufacturerCode() const;
        void setName( const QString& name );
        QString name() const;
        void setPackagingQuantity( float packagingQuantity );
        float packagingQuantity() const;
        void setPackagingUnitOfMeasure( const QString& packagingUnitOfMeasure );
        QString packagingUnitOfMeasure() const;
        void setPackagingUnits( const NSMasterData::__ArrayOfProductPackagingUnit& packagingUnits );
        NSMasterData::__ArrayOfProductPackagingUnit packagingUnits() const;
        void setPrices( const NSMasterData::__ArrayOfProductPrice& prices );
        NSMasterData::__ArrayOfProductPrice prices() const;
        void setProductGroup( int productGroup );
        int productGroup() const;
        void setShortName( const QString& shortName );
        QString shortName() const;
        void setValidTo( const KDDateTime& validTo );
        KDDateTime validTo() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __Product();
        ~__Product();

    public:
        __Product( const __Product& );
        __Product &operator=( const __Product& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductPrices
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductPrices();
        ~TNS__GetProductPrices();

    public:
        TNS__GetProductPrices( const TNS__GetProductPrices& );
        TNS__GetProductPrices &operator=( const TNS__GetProductPrices& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductPricesResponse
    {
    public:
        void setGetProductPricesResult( const NSMasterData::__ArrayOfProductPrice& getProductPricesResult );
        NSMasterData::__ArrayOfProductPrice getProductPricesResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductPricesResponse();
        ~TNS__GetProductPricesResponse();

    public:
        TNS__GetProductPricesResponse( const TNS__GetProductPricesResponse& );
        TNS__GetProductPricesResponse &operator=( const TNS__GetProductPricesResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfProductPrice
    {
    public:
        void setProductPrice( const QList<NSMasterData::__ProductPrice>& productPrice );
        QList<NSMasterData::__ProductPrice> productPrice() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfProductPrice();
        ~__ArrayOfProductPrice();

    public:
        __ArrayOfProductPrice( const __ArrayOfProductPrice& );
        __ArrayOfProductPrice &operator=( const __ArrayOfProductPrice& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetCurrentVATRates
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetCurrentVATRates();
        ~TNS__GetCurrentVATRates();

    public:
        TNS__GetCurrentVATRates( const TNS__GetCurrentVATRates& );
        TNS__GetCurrentVATRates &operator=( const TNS__GetCurrentVATRates& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfVATRate
    {
    public:
        void setVATRate( const QList<NSMasterData::__VATRate>& vATRate );
        QList<NSMasterData::__VATRate> vATRate() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfVATRate();
        ~__ArrayOfVATRate();

    public:
        __ArrayOfVATRate( const __ArrayOfVATRate& );
        __ArrayOfVATRate &operator=( const __ArrayOfVATRate& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductGroupsResponse
    {
    public:
        void setGetProductGroupsResult( const NSMasterData::__ArrayOfProductGroup& getProductGroupsResult );
        NSMasterData::__ArrayOfProductGroup getProductGroupsResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductGroupsResponse();
        ~TNS__GetProductGroupsResponse();

    public:
        TNS__GetProductGroupsResponse( const TNS__GetProductGroupsResponse& );
        TNS__GetProductGroupsResponse &operator=( const TNS__GetProductGroupsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __VATRate
    {
    public:
        void setActive( bool active );
        bool active() const;
        void setCashRegisterVATCode( const NSMasterData::__VATCode& cashRegisterVATCode );
        NSMasterData::__VATCode cashRegisterVATCode() const;
        void setCode( const QString& code );
        QString code() const;
        void setName( const QString& name );
        QString name() const;
        void setPercentage( float percentage );
        float percentage() const;
        void setType( const NSMasterData::__VATType& type );
        NSMasterData::__VATType type() const;
        void setValidFrom( const KDDateTime& validFrom );
        KDDateTime validFrom() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __VATRate();
        ~__VATRate();

    public:
        __VATRate( const __VATRate& );
        __VATRate &operator=( const __VATRate& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfProductGroup
    {
    public:
        void setProductGroup( const QList<NSMasterData::__ProductGroup>& productGroup );
        QList<NSMasterData::__ProductGroup> productGroup() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfProductGroup();
        ~__ArrayOfProductGroup();

    public:
        __ArrayOfProductGroup( const __ArrayOfProductGroup& );
        __ArrayOfProductGroup &operator=( const __ArrayOfProductGroup& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfManufacturer
    {
    public:
        void setManufacturer( const QList<NSMasterData::__Manufacturer>& manufacturer );
        QList<NSMasterData::__Manufacturer> manufacturer() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfManufacturer();
        ~__ArrayOfManufacturer();

    public:
        __ArrayOfManufacturer( const __ArrayOfManufacturer& );
        __ArrayOfManufacturer &operator=( const __ArrayOfManufacturer& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductPricesOf
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setProductCode( const QString& productCode );
        QString productCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductPricesOf();
        ~TNS__GetProductPricesOf();

    public:
        TNS__GetProductPricesOf( const TNS__GetProductPricesOf& );
        TNS__GetProductPricesOf &operator=( const TNS__GetProductPricesOf& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ArrayOfProductPackagingUnit
    {
    public:
        void setProductPackagingUnit( const QList<NSMasterData::__ProductPackagingUnit>& productPackagingUnit );
        QList<NSMasterData::__ProductPackagingUnit> productPackagingUnit() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfProductPackagingUnit();
        ~__ArrayOfProductPackagingUnit();

    public:
        __ArrayOfProductPackagingUnit( const __ArrayOfProductPackagingUnit& );
        __ArrayOfProductPackagingUnit &operator=( const __ArrayOfProductPackagingUnit& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetManufacturersResponse
    {
    public:
        void setGetManufacturersResult( const NSMasterData::__ArrayOfManufacturer& getManufacturersResult );
        NSMasterData::__ArrayOfManufacturer getManufacturersResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetManufacturersResponse();
        ~TNS__GetManufacturersResponse();

    public:
        TNS__GetManufacturersResponse( const TNS__GetManufacturersResponse& );
        TNS__GetManufacturersResponse &operator=( const TNS__GetManufacturersResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ProductPrice
    {
    public:
        void setCurrency( const QString& currency );
        QString currency() const;
        void setLineNo( int lineNo );
        int lineNo() const;
        void setPrice( float price );
        float price() const;
        void setProductCode( const QString& productCode );
        QString productCode() const;
        void setValidFrom( const KDDateTime& validFrom );
        KDDateTime validFrom() const;
        void setValidTo( const KDDateTime& validTo );
        KDDateTime validTo() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ProductPrice();
        ~__ProductPrice();

    public:
        __ProductPrice( const __ProductPrice& );
        __ProductPrice &operator=( const __ProductPrice& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetProductsResponse
    {
    public:
        void setGetProductsResult( const NSMasterData::__ArrayOfProduct& getProductsResult );
        NSMasterData::__ArrayOfProduct getProductsResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetProductsResponse();
        ~TNS__GetProductsResponse();

    public:
        TNS__GetProductsResponse( const TNS__GetProductsResponse& );
        TNS__GetProductsResponse &operator=( const TNS__GetProductsResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetManufacturers
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetManufacturers();
        ~TNS__GetManufacturers();

    public:
        TNS__GetManufacturers( const TNS__GetManufacturers& );
        TNS__GetManufacturers &operator=( const TNS__GetManufacturers& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class TNS__GetReasonCodes
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__GetReasonCodes();
        ~TNS__GetReasonCodes();

    public:
        TNS__GetReasonCodes( const TNS__GetReasonCodes& );
        TNS__GetReasonCodes &operator=( const TNS__GetReasonCodes& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class __ReasonCode
    {
    public:
        void setCode( const NSMasterData::__ReasonCode_ReasonCodeEnum& code );
        NSMasterData::__ReasonCode_ReasonCodeEnum code() const;
        void setDescription( const QString& description );
        QString description() const;
        void setMovementType( const NSMasterData::__MovementType& movementType );
        NSMasterData::__MovementType movementType() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ReasonCode();
        ~__ReasonCode();

    public:
        __ReasonCode( const __ReasonCode& );
        __ReasonCode &operator=( const __ReasonCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSMasterData {
    class GetCurrentVATRatesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetCurrentVATRatesJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetCurrentVATRates& arg0 );
        NSMasterData::TNS__GetCurrentVATRates parameters() const;
        NSMasterData::TNS__GetCurrentVATRatesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetCurrentVATRates mParameters;
        NSMasterData::TNS__GetCurrentVATRatesResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetManufacturersJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetManufacturersJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetManufacturers& arg0 );
        NSMasterData::TNS__GetManufacturers parameters() const;
        NSMasterData::TNS__GetManufacturersResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetManufacturers mParameters;
        NSMasterData::TNS__GetManufacturersResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetProductGroupsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductGroupsJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetProductGroups& arg0 );
        NSMasterData::TNS__GetProductGroups parameters() const;
        NSMasterData::TNS__GetProductGroupsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetProductGroups mParameters;
        NSMasterData::TNS__GetProductGroupsResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetProductsJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductsJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetProducts& arg0 );
        NSMasterData::TNS__GetProducts parameters() const;
        NSMasterData::TNS__GetProductsResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetProducts mParameters;
        NSMasterData::TNS__GetProductsResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetProductsSinceJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductsSinceJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetProductsSince& arg0 );
        NSMasterData::TNS__GetProductsSince parameters() const;
        NSMasterData::TNS__GetProductsSinceResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetProductsSince mParameters;
        NSMasterData::TNS__GetProductsSinceResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetProductPricesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductPricesJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetProductPrices& arg0 );
        NSMasterData::TNS__GetProductPrices parameters() const;
        NSMasterData::TNS__GetProductPricesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetProductPrices mParameters;
        NSMasterData::TNS__GetProductPricesResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetProductPricesOfJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetProductPricesOfJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetProductPricesOf& arg0 );
        NSMasterData::TNS__GetProductPricesOf parameters() const;
        NSMasterData::TNS__GetProductPricesOfResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetProductPricesOf mParameters;
        NSMasterData::TNS__GetProductPricesOfResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class GetReasonCodesJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        GetReasonCodesJob( NSMasterData::MasterData* service, QObject* parent = 0 );
        void setParameters( const NSMasterData::TNS__GetReasonCodes& arg0 );
        NSMasterData::TNS__GetReasonCodes parameters() const;
        NSMasterData::TNS__GetReasonCodesResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSMasterData::MasterData *mService;
        NSMasterData::TNS__GetReasonCodes mParameters;
        NSMasterData::TNS__GetReasonCodesResponse mResultParameters;
};
} // namespace end

namespace NSMasterData {
    class MasterData : public QObject
    {
        Q_OBJECT

    public:
        MasterData( QObject* parent = 0 );
        ~MasterData();
        /**
            Asks Qt to ignore ssl errors in https requests. Use this for
            testing only!
         */
        void ignoreSslErrors();
        /**
            Overwrite the end point defined in the .wsdl file, with another
            http/https URL.
         */
        void setEndPoint( const QString& endPoint );
        /**
            Overwrite the soap version defined in the .wsdl file, with another
            version.
            version can be KDSoapClientInterface::SOAP1_1 or
            KDSoapClientInterface::SOAP1_2
         */
        void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
        /**
            Return the error from the last blocking call.
            Empty if no error.
         */
        QString lastError() const;
        /**
            Returns the underlying KDSoapClientInterface instance, which allows
            to access setCookieJar, lastResponseHeaders, etc.
         */
        const KDSoapClientInterface *clientInterface() const;
        KDSoapClientInterface *clientInterface();
        /**
            Blocking call to GetCurrentVATRates.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetCurrentVATRatesResponse getCurrentVATRates( const NSMasterData::TNS__GetCurrentVATRates& parameters );
        /**
            Asynchronous call to GetCurrentVATRates.
            Remember to connect to getCurrentVATRatesDone and
            getCurrentVATRatesError.
         */
        void asyncGetCurrentVATRates( const NSMasterData::TNS__GetCurrentVATRates& parameters );
        /**
            Blocking call to GetManufacturers.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetManufacturersResponse getManufacturers( const NSMasterData::TNS__GetManufacturers& parameters );
        /**
            Asynchronous call to GetManufacturers.
            Remember to connect to getManufacturersDone and
            getManufacturersError.
         */
        void asyncGetManufacturers( const NSMasterData::TNS__GetManufacturers& parameters );
        /**
            Blocking call to GetProductGroups.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetProductGroupsResponse getProductGroups( const NSMasterData::TNS__GetProductGroups& parameters );
        /**
            Asynchronous call to GetProductGroups.
            Remember to connect to getProductGroupsDone and
            getProductGroupsError.
         */
        void asyncGetProductGroups( const NSMasterData::TNS__GetProductGroups& parameters );
        /**
            Blocking call to GetProducts.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetProductsResponse getProducts( const NSMasterData::TNS__GetProducts& parameters );
        /**
            Asynchronous call to GetProducts.
            Remember to connect to getProductsDone and getProductsError.
         */
        void asyncGetProducts( const NSMasterData::TNS__GetProducts& parameters );
        /**
            Blocking call to GetProductsSince.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetProductsSinceResponse getProductsSince( const NSMasterData::TNS__GetProductsSince& parameters );
        /**
            Asynchronous call to GetProductsSince.
            Remember to connect to getProductsSinceDone and
            getProductsSinceError.
         */
        void asyncGetProductsSince( const NSMasterData::TNS__GetProductsSince& parameters );
        /**
            Blocking call to GetProductPrices.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetProductPricesResponse getProductPrices( const NSMasterData::TNS__GetProductPrices& parameters );
        /**
            Asynchronous call to GetProductPrices.
            Remember to connect to getProductPricesDone and
            getProductPricesError.
         */
        void asyncGetProductPrices( const NSMasterData::TNS__GetProductPrices& parameters );
        /**
            Blocking call to GetProductPricesOf.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetProductPricesOfResponse getProductPricesOf( const NSMasterData::TNS__GetProductPricesOf& parameters );
        /**
            Asynchronous call to GetProductPricesOf.
            Remember to connect to getProductPricesOfDone and
            getProductPricesOfError.
         */
        void asyncGetProductPricesOf( const NSMasterData::TNS__GetProductPricesOf& parameters );
        /**
            Blocking call to GetReasonCodes.
            Not recommended in a GUI thread.
         */
        NSMasterData::TNS__GetReasonCodesResponse getReasonCodes( const NSMasterData::TNS__GetReasonCodes& parameters );
        /**
            Asynchronous call to GetReasonCodes.
            Remember to connect to getReasonCodesDone and getReasonCodesError.
         */
        void asyncGetReasonCodes( const NSMasterData::TNS__GetReasonCodes& parameters );

    Q_SIGNALS:
        /**
            This signal is emitted whenever a SOAP call failed, for a central
            processing of all SOAP errors.
            method is the name of the method (or operation) that returned the
            fault, for instance "addContact".
         */
        void soapError( const QString& method, const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getCurrentVATRates()
            succeeded.
         */
        void getCurrentVATRatesDone( const NSMasterData::TNS__GetCurrentVATRatesResponse& parameters );
        /**
            This signal is emitted whenever the call to getCurrentVATRates()
            failed.
         */
        void getCurrentVATRatesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getManufacturers()
            succeeded.
         */
        void getManufacturersDone( const NSMasterData::TNS__GetManufacturersResponse& parameters );
        /**
            This signal is emitted whenever the call to getManufacturers()
            failed.
         */
        void getManufacturersError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getProductGroups()
            succeeded.
         */
        void getProductGroupsDone( const NSMasterData::TNS__GetProductGroupsResponse& parameters );
        /**
            This signal is emitted whenever the call to getProductGroups()
            failed.
         */
        void getProductGroupsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getProducts()
            succeeded.
         */
        void getProductsDone( const NSMasterData::TNS__GetProductsResponse& parameters );
        /**
            This signal is emitted whenever the call to getProducts() failed.
         */
        void getProductsError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getProductsSince()
            succeeded.
         */
        void getProductsSinceDone( const NSMasterData::TNS__GetProductsSinceResponse& parameters );
        /**
            This signal is emitted whenever the call to getProductsSince()
            failed.
         */
        void getProductsSinceError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getProductPrices()
            succeeded.
         */
        void getProductPricesDone( const NSMasterData::TNS__GetProductPricesResponse& parameters );
        /**
            This signal is emitted whenever the call to getProductPrices()
            failed.
         */
        void getProductPricesError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getProductPricesOf()
            succeeded.
         */
        void getProductPricesOfDone( const NSMasterData::TNS__GetProductPricesOfResponse& parameters );
        /**
            This signal is emitted whenever the call to getProductPricesOf()
            failed.
         */
        void getProductPricesOfError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to getReasonCodes()
            succeeded.
         */
        void getReasonCodesDone( const NSMasterData::TNS__GetReasonCodesResponse& parameters );
        /**
            This signal is emitted whenever the call to getReasonCodes()
            failed.
         */
        void getReasonCodesError( const KDSoapMessage& fault );

    private Q_SLOTS:
        void _kd_slotGetCurrentVATRatesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetManufacturersFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductGroupsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductsFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductsSinceFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductPricesFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetProductPricesOfFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotGetReasonCodesFinished( KDSoapPendingCallWatcher* watcher );

    private:
        class PrivateDPtr;
        PrivateDPtr *d_ptr;
};
} // namespace end

#endif
