// This file is generated by KDAB's kdwsdl2cpp from Transactions.svc.
// All changes you do to this file will be lost.
#ifndef WSDL_TRANSACTIONS_H
#define WSDL_TRANSACTIONS_H

#include <QtCore/QString>
#include <KDSoapClient/KDDateTime.h>
#include <QtCore/QSharedData>
#include <QtCore/QList>
#include <KDSoapClient/KDSoapJob.h>
#include <QtCore/QObject>
#include <KDSoapClient/KDSoapClientInterface.h>

class KDSoapMessage;
class KDSoapPendingCallWatcher;
class KDSoapValue;
namespace NSTransactions {
    class Transactions;
    class __ArrayOfDocumentVatBreakDown;
    class __ArrayOfOpeningStockLine;
    class __ArrayOfResponseCode;
    class __ArrayOfSalesDocument;
    class __ArrayOfSalesDocumentLine;
    class __ArrayOfStockDocument;
    class __ArrayOfStockDocumentLine;
    class __DocumentVatBreakDown;
    class __ExciseCategory;
    class __MovementType;
    class __OpeningStock;
    class __OpeningStockLine;
    class __Partner;
    class __ReasonCode_ReasonCodeEnum;
    class __ResponseCode;
    class __SalesDocument;
    class __SalesDocumentLine;
    class __StockDocument;
    class __StockDocumentLine;
    class __TransactionCallConfig;
    class __TransactionResponse;
    class __VATCode;
}


namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __MovementType you can also
        pass the enum directly. Example:
        someMethod(__MovementType::AB).
     */
    class __MovementType
    {
    public:
        enum Type { AB, ABS, BET, BETS, SVISZ, SVISZS, KIT, KITS, LELTT, LELTH, EGYT, EGYJ, ASZLA, ASZLAS, NY, NYS, KSZLA, KSZLAS, VVISZ };

    public:
        __MovementType( const Type &type );
        void setType( Type type );
        NSTransactions::__MovementType::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __MovementType();
        ~__MovementType();

    private:
        Type mType;
};
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __ReasonCode_ReasonCodeEnum
        you can also pass the enum directly.
        Example:
        someMethod(__ReasonCode_ReasonCodeEnum::Scrapping).
     */
    class __ReasonCode_ReasonCodeEnum
    {
    public:
        enum Type { Scrapping, Usage, OtherLoss, InventoryCorrection, OtherGain };

    public:
        __ReasonCode_ReasonCodeEnum( const Type &type );
        void setType( Type type );
        NSTransactions::__ReasonCode_ReasonCodeEnum::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __ReasonCode_ReasonCodeEnum();
        ~__ReasonCode_ReasonCodeEnum();

    private:
        Type mType;
};
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __VATCode you can also pass
        the enum directly. Example:
        someMethod(__VATCode::A).
     */
    class __VATCode
    {
    public:
        enum Type { A, B, C, D, E, F, G, H, I, J, K };

    public:
        __VATCode( const Type &type );
        void setType( Type type );
        NSTransactions::__VATCode::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __VATCode();
        ~__VATCode();

    private:
        Type mType;
};
} // namespace end

namespace NSTransactions {
    /**
        This class is a wrapper for an enumeration.
        Whenever you have to pass an object of type __ExciseCategory you can
        also pass the enum directly.
        Example:
        someMethod(__ExciseCategory::Tobacco).
     */
    class __ExciseCategory
    {
    public:
        enum Type { Tobacco, Alcohol, Other };

    public:
        __ExciseCategory( const Type &type );
        void setType( Type type );
        NSTransactions::__ExciseCategory::Type type() const;
        operator Type() const;
        QVariant serialize() const;
        void deserialize( const QVariant& value );
        __ExciseCategory();
        ~__ExciseCategory();

    private:
        Type mType;
};
} // namespace end

namespace NSTransactions {
    class __StockDocument
    {
    public:
        void setComment( const QString& comment );
        QString comment() const;
        void setCreatedAt( const KDDateTime& createdAt );
        KDDateTime createdAt() const;
        void setDocumentDate( const KDDateTime& documentDate );
        KDDateTime documentDate() const;
        void setGross( float gross );
        float gross() const;
        void setIssuedOnDate( const KDDateTime& issuedOnDate );
        KDDateTime issuedOnDate() const;
        void setLines( const NSTransactions::__ArrayOfStockDocumentLine& lines );
        NSTransactions::__ArrayOfStockDocumentLine lines() const;
        void setLocalDocumentId( const QString& localDocumentId );
        QString localDocumentId() const;
        void setMovementType( const NSTransactions::__MovementType& movementType );
        NSTransactions::__MovementType movementType() const;
        void setPartner( const NSTransactions::__Partner& partner );
        NSTransactions::__Partner partner() const;
        void setReason( const QString& reason );
        QString reason() const;
        void setReasonCode( const NSTransactions::__ReasonCode_ReasonCodeEnum& reasonCode );
        NSTransactions::__ReasonCode_ReasonCodeEnum reasonCode() const;
        void setReference( const QString& reference );
        QString reference() const;
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setStornoReference( const QString& stornoReference );
        QString stornoReference() const;
        void setVAT( float vAT );
        float vAT() const;
        void setVATBreakDown( const NSTransactions::__ArrayOfDocumentVatBreakDown& vATBreakDown );
        NSTransactions::__ArrayOfDocumentVatBreakDown vATBreakDown() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __StockDocument();
        ~__StockDocument();

    public:
        __StockDocument( const __StockDocument& );
        __StockDocument &operator=( const __StockDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfSalesDocument
    {
    public:
        void setSalesDocument( const QList<NSTransactions::__SalesDocument>& salesDocument );
        QList<NSTransactions::__SalesDocument> salesDocument() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfSalesDocument();
        ~__ArrayOfSalesDocument();

    public:
        __ArrayOfSalesDocument( const __ArrayOfSalesDocument& );
        __ArrayOfSalesDocument &operator=( const __ArrayOfSalesDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __SalesDocument
    {
    public:
        void setCashRegId( const QString& cashRegId );
        QString cashRegId() const;
        void setComment( const QString& comment );
        QString comment() const;
        void setCreatedAt( const KDDateTime& createdAt );
        KDDateTime createdAt() const;
        void setDocumentDate( const KDDateTime& documentDate );
        KDDateTime documentDate() const;
        void setDueDate( const KDDateTime& dueDate );
        KDDateTime dueDate() const;
        void setGross( float gross );
        float gross() const;
        void setIssuedOnDate( const KDDateTime& issuedOnDate );
        KDDateTime issuedOnDate() const;
        void setLines( const NSTransactions::__ArrayOfSalesDocumentLine& lines );
        NSTransactions::__ArrayOfSalesDocumentLine lines() const;
        void setLocalDocumentId( const QString& localDocumentId );
        QString localDocumentId() const;
        void setMovementType( const NSTransactions::__MovementType& movementType );
        NSTransactions::__MovementType movementType() const;
        void setPartner( const NSTransactions::__Partner& partner );
        NSTransactions::__Partner partner() const;
        void setReference( const QString& reference );
        QString reference() const;
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setStornoReference( const QString& stornoReference );
        QString stornoReference() const;
        void setVAT( float vAT );
        float vAT() const;
        void setVATBreakDown( const NSTransactions::__ArrayOfDocumentVatBreakDown& vATBreakDown );
        NSTransactions::__ArrayOfDocumentVatBreakDown vATBreakDown() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __SalesDocument();
        ~__SalesDocument();

    public:
        __SalesDocument( const __SalesDocument& );
        __SalesDocument &operator=( const __SalesDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __Partner
    {
    public:
        void setCity( const QString& city );
        QString city() const;
        void setLocalPartnerCode( const QString& localPartnerCode );
        QString localPartnerCode() const;
        void setName( const QString& name );
        QString name() const;
        void setPostCode( const QString& postCode );
        QString postCode() const;
        void setStreet( const QString& street );
        QString street() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __Partner();
        ~__Partner();

    public:
        __Partner( const __Partner& );
        __Partner &operator=( const __Partner& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class TNS__CreateStockTransactionResponse
    {
    public:
        void setCreateStockTransactionResult( const NSTransactions::__TransactionResponse& createStockTransactionResult );
        NSTransactions::__TransactionResponse createStockTransactionResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__CreateStockTransactionResponse();
        ~TNS__CreateStockTransactionResponse();

    public:
        TNS__CreateStockTransactionResponse( const TNS__CreateStockTransactionResponse& );
        TNS__CreateStockTransactionResponse &operator=( const TNS__CreateStockTransactionResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __TransactionResponse
    {
    public:
        void setCurrentConfig( const NSTransactions::__TransactionCallConfig& currentConfig );
        NSTransactions::__TransactionCallConfig currentConfig() const;
        void setResponseCodes( const NSTransactions::__ArrayOfResponseCode& responseCodes );
        NSTransactions::__ArrayOfResponseCode responseCodes() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __TransactionResponse();
        ~__TransactionResponse();

    public:
        __TransactionResponse( const __TransactionResponse& );
        __TransactionResponse &operator=( const __TransactionResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfResponseCode
    {
    public:
        void setResponseCode( const QList<NSTransactions::__ResponseCode>& responseCode );
        QList<NSTransactions::__ResponseCode> responseCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfResponseCode();
        ~__ArrayOfResponseCode();

    public:
        __ArrayOfResponseCode( const __ArrayOfResponseCode& );
        __ArrayOfResponseCode &operator=( const __ArrayOfResponseCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class TNS__CreateSalesTransactionResponse
    {
    public:
        void setCreateSalesTransactionResult( const NSTransactions::__TransactionResponse& createSalesTransactionResult );
        NSTransactions::__TransactionResponse createSalesTransactionResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__CreateSalesTransactionResponse();
        ~TNS__CreateSalesTransactionResponse();

    public:
        TNS__CreateSalesTransactionResponse( const TNS__CreateSalesTransactionResponse& );
        TNS__CreateSalesTransactionResponse &operator=( const TNS__CreateSalesTransactionResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __TransactionCallConfig
    {
    public:
        void setBatchSize( int batchSize );
        int batchSize() const;
        void setFrequency( int frequency );
        int frequency() const;
        void setOffset( int offset );
        int offset() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __TransactionCallConfig();
        ~__TransactionCallConfig();

    public:
        __TransactionCallConfig( const __TransactionCallConfig& );
        __TransactionCallConfig &operator=( const __TransactionCallConfig& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __OpeningStockLine
    {
    public:
        void setLineNo( int lineNo );
        int lineNo() const;
        void setLocalProductCode( const QString& localProductCode );
        QString localProductCode() const;
        void setProductCode( const QString& productCode );
        QString productCode() const;
        void setProductGroup( int productGroup );
        int productGroup() const;
        void setProductName( const QString& productName );
        QString productName() const;
        void setQuantity( float quantity );
        float quantity() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __OpeningStockLine();
        ~__OpeningStockLine();

    public:
        __OpeningStockLine( const __OpeningStockLine& );
        __OpeningStockLine &operator=( const __OpeningStockLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __DocumentVatBreakDown
    {
    public:
        void setNetAmount( float netAmount );
        float netAmount() const;
        void setVATAmount( float vATAmount );
        float vATAmount() const;
        void setVATCode( const NSTransactions::__VATCode& vATCode );
        NSTransactions::__VATCode vATCode() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __DocumentVatBreakDown();
        ~__DocumentVatBreakDown();

    public:
        __DocumentVatBreakDown( const __DocumentVatBreakDown& );
        __DocumentVatBreakDown &operator=( const __DocumentVatBreakDown& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfDocumentVatBreakDown
    {
    public:
        void setDocumentVatBreakDown( const QList<NSTransactions::__DocumentVatBreakDown>& documentVatBreakDown );
        QList<NSTransactions::__DocumentVatBreakDown> documentVatBreakDown() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfDocumentVatBreakDown();
        ~__ArrayOfDocumentVatBreakDown();

    public:
        __ArrayOfDocumentVatBreakDown( const __ArrayOfDocumentVatBreakDown& );
        __ArrayOfDocumentVatBreakDown &operator=( const __ArrayOfDocumentVatBreakDown& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfStockDocumentLine
    {
    public:
        void setStockDocumentLine( const QList<NSTransactions::__StockDocumentLine>& stockDocumentLine );
        QList<NSTransactions::__StockDocumentLine> stockDocumentLine() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfStockDocumentLine();
        ~__ArrayOfStockDocumentLine();

    public:
        __ArrayOfStockDocumentLine( const __ArrayOfStockDocumentLine& );
        __ArrayOfStockDocumentLine &operator=( const __ArrayOfStockDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class TNS__CreateOpeningStockResponse
    {
    public:
        void setCreateOpeningStockResult( const NSTransactions::__TransactionResponse& createOpeningStockResult );
        NSTransactions::__TransactionResponse createOpeningStockResult() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__CreateOpeningStockResponse();
        ~TNS__CreateOpeningStockResponse();

    public:
        TNS__CreateOpeningStockResponse( const TNS__CreateOpeningStockResponse& );
        TNS__CreateOpeningStockResponse &operator=( const TNS__CreateOpeningStockResponse& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __StockDocumentLine
    {
    public:
        void setDiscountValue( float discountValue );
        float discountValue() const;
        void setExciseCategory( const NSTransactions::__ExciseCategory& exciseCategory );
        NSTransactions::__ExciseCategory exciseCategory() const;
        void setGrossConsumerPrice( float grossConsumerPrice );
        float grossConsumerPrice() const;
        void setGrossLineTotal( float grossLineTotal );
        float grossLineTotal() const;
        void setGrossUnitPrice( float grossUnitPrice );
        float grossUnitPrice() const;
        void setLineNo( int lineNo );
        int lineNo() const;
        void setLocalProductCode( const QString& localProductCode );
        QString localProductCode() const;
        void setNetListPrice( float netListPrice );
        float netListPrice() const;
        void setNetUnitPrice( float netUnitPrice );
        float netUnitPrice() const;
        void setPackagingQuantity( float packagingQuantity );
        float packagingQuantity() const;
        void setPackagingUnitOfMeasure( const QString& packagingUnitOfMeasure );
        QString packagingUnitOfMeasure() const;
        void setProductBarCode( const QString& productBarCode );
        QString productBarCode() const;
        void setProductCode( const QString& productCode );
        QString productCode() const;
        void setProductGroup( int productGroup );
        int productGroup() const;
        void setProductName( const QString& productName );
        QString productName() const;
        void setProductStockPrice( float productStockPrice );
        float productStockPrice() const;
        void setQuantity( float quantity );
        float quantity() const;
        void setUnitOfMeasure( const QString& unitOfMeasure );
        QString unitOfMeasure() const;
        void setVATCode( const NSTransactions::__VATCode& vATCode );
        NSTransactions::__VATCode vATCode() const;
        void setVATLineTotal( float vATLineTotal );
        float vATLineTotal() const;
        void setVATPercent( float vATPercent );
        float vATPercent() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __StockDocumentLine();
        ~__StockDocumentLine();

    public:
        __StockDocumentLine( const __StockDocumentLine& );
        __StockDocumentLine &operator=( const __StockDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfSalesDocumentLine
    {
    public:
        void setSalesDocumentLine( const QList<NSTransactions::__SalesDocumentLine>& salesDocumentLine );
        QList<NSTransactions::__SalesDocumentLine> salesDocumentLine() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfSalesDocumentLine();
        ~__ArrayOfSalesDocumentLine();

    public:
        __ArrayOfSalesDocumentLine( const __ArrayOfSalesDocumentLine& );
        __ArrayOfSalesDocumentLine &operator=( const __ArrayOfSalesDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class TNS__CreateSalesTransaction
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setDocuments( const NSTransactions::__ArrayOfSalesDocument& documents );
        NSTransactions::__ArrayOfSalesDocument documents() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__CreateSalesTransaction();
        ~TNS__CreateSalesTransaction();

    public:
        TNS__CreateSalesTransaction( const TNS__CreateSalesTransaction& );
        TNS__CreateSalesTransaction &operator=( const TNS__CreateSalesTransaction& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class TNS__CreateStockTransaction
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setDocuments( const NSTransactions::__ArrayOfStockDocument& documents );
        NSTransactions::__ArrayOfStockDocument documents() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__CreateStockTransaction();
        ~TNS__CreateStockTransaction();

    public:
        TNS__CreateStockTransaction( const TNS__CreateStockTransaction& );
        TNS__CreateStockTransaction &operator=( const TNS__CreateStockTransaction& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __OpeningStock
    {
    public:
        void setCreatedAt( const KDDateTime& createdAt );
        KDDateTime createdAt() const;
        void setLines( const NSTransactions::__ArrayOfOpeningStockLine& lines );
        NSTransactions::__ArrayOfOpeningStockLine lines() const;
        void setShopId( const QString& shopId );
        QString shopId() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __OpeningStock();
        ~__OpeningStock();

    public:
        __OpeningStock( const __OpeningStock& );
        __OpeningStock &operator=( const __OpeningStock& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __SalesDocumentLine
    {
    public:
        void setDiscountValue( float discountValue );
        float discountValue() const;
        void setExciseCategory( const NSTransactions::__ExciseCategory& exciseCategory );
        NSTransactions::__ExciseCategory exciseCategory() const;
        void setGrossConsumerPrice( float grossConsumerPrice );
        float grossConsumerPrice() const;
        void setGrossLineTotal( float grossLineTotal );
        float grossLineTotal() const;
        void setGrossUnitPrice( float grossUnitPrice );
        float grossUnitPrice() const;
        void setLineNo( int lineNo );
        int lineNo() const;
        void setLocalProductCode( const QString& localProductCode );
        QString localProductCode() const;
        void setNetListPrice( float netListPrice );
        float netListPrice() const;
        void setNetUnitPrice( float netUnitPrice );
        float netUnitPrice() const;
        void setPackagingQuantity( float packagingQuantity );
        float packagingQuantity() const;
        void setPackagingUnitOfMeasure( const QString& packagingUnitOfMeasure );
        QString packagingUnitOfMeasure() const;
        void setProductBarCode( const QString& productBarCode );
        QString productBarCode() const;
        void setProductCode( const QString& productCode );
        QString productCode() const;
        void setProductGroup( int productGroup );
        int productGroup() const;
        void setProductName( const QString& productName );
        QString productName() const;
        void setProductStockPrice( float productStockPrice );
        float productStockPrice() const;
        void setQuantity( float quantity );
        float quantity() const;
        void setUnitOfMeasure( const QString& unitOfMeasure );
        QString unitOfMeasure() const;
        void setVATCode( const NSTransactions::__VATCode& vATCode );
        NSTransactions::__VATCode vATCode() const;
        void setVATLineTotal( float vATLineTotal );
        float vATLineTotal() const;
        void setVATPercent( float vATPercent );
        float vATPercent() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __SalesDocumentLine();
        ~__SalesDocumentLine();

    public:
        __SalesDocumentLine( const __SalesDocumentLine& );
        __SalesDocumentLine &operator=( const __SalesDocumentLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfStockDocument
    {
    public:
        void setStockDocument( const QList<NSTransactions::__StockDocument>& stockDocument );
        QList<NSTransactions::__StockDocument> stockDocument() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfStockDocument();
        ~__ArrayOfStockDocument();

    public:
        __ArrayOfStockDocument( const __ArrayOfStockDocument& );
        __ArrayOfStockDocument &operator=( const __ArrayOfStockDocument& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ResponseCode
    {
    public:
        void setCode( const QString& code );
        QString code() const;
        void setKey( const QString& key );
        QString key() const;
        void setLocalId( const QString& localId );
        QString localId() const;
        void setMessage( const QString& message );
        QString message() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ResponseCode();
        ~__ResponseCode();

    public:
        __ResponseCode( const __ResponseCode& );
        __ResponseCode &operator=( const __ResponseCode& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class __ArrayOfOpeningStockLine
    {
    public:
        void setOpeningStockLine( const QList<NSTransactions::__OpeningStockLine>& openingStockLine );
        QList<NSTransactions::__OpeningStockLine> openingStockLine() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        __ArrayOfOpeningStockLine();
        ~__ArrayOfOpeningStockLine();

    public:
        __ArrayOfOpeningStockLine( const __ArrayOfOpeningStockLine& );
        __ArrayOfOpeningStockLine &operator=( const __ArrayOfOpeningStockLine& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class TNS__CreateOpeningStock
    {
    public:
        void setShopId( const QString& shopId );
        QString shopId() const;
        void setDocument( const NSTransactions::__OpeningStock& document );
        NSTransactions::__OpeningStock document() const;
        KDSoapValue serialize( const QString& valueName ) const;
        void deserialize( const KDSoapValue& mainValue );
        TNS__CreateOpeningStock();
        ~TNS__CreateOpeningStock();

    public:
        TNS__CreateOpeningStock( const TNS__CreateOpeningStock& );
        TNS__CreateOpeningStock &operator=( const TNS__CreateOpeningStock& );

    private:
        class PrivateDPtr;
        QSharedDataPointer<PrivateDPtr> d_ptr;
};
} // namespace end

namespace NSTransactions {
    class CreateSalesTransactionJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateSalesTransactionJob( NSTransactions::Transactions* service, QObject* parent = 0 );
        void setParameters( const NSTransactions::TNS__CreateSalesTransaction& arg0 );
        NSTransactions::TNS__CreateSalesTransaction parameters() const;
        NSTransactions::TNS__CreateSalesTransactionResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSTransactions::Transactions *mService;
        NSTransactions::TNS__CreateSalesTransaction mParameters;
        NSTransactions::TNS__CreateSalesTransactionResponse mResultParameters;
};
} // namespace end

namespace NSTransactions {
    class CreateStockTransactionJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateStockTransactionJob( NSTransactions::Transactions* service, QObject* parent = 0 );
        void setParameters( const NSTransactions::TNS__CreateStockTransaction& arg0 );
        NSTransactions::TNS__CreateStockTransaction parameters() const;
        NSTransactions::TNS__CreateStockTransactionResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSTransactions::Transactions *mService;
        NSTransactions::TNS__CreateStockTransaction mParameters;
        NSTransactions::TNS__CreateStockTransactionResponse mResultParameters;
};
} // namespace end

namespace NSTransactions {
    class CreateOpeningStockJob : public KDSoapJob
    {
        Q_OBJECT

    public:
        CreateOpeningStockJob( NSTransactions::Transactions* service, QObject* parent = 0 );
        void setParameters( const NSTransactions::TNS__CreateOpeningStock& arg0 );
        NSTransactions::TNS__CreateOpeningStock parameters() const;
        NSTransactions::TNS__CreateOpeningStockResponse resultParameters() const;

    protected:
        void doStart();

    private Q_SLOTS:
        void slotFinished( KDSoapPendingCallWatcher* watcher );

    private:
        NSTransactions::Transactions *mService;
        NSTransactions::TNS__CreateOpeningStock mParameters;
        NSTransactions::TNS__CreateOpeningStockResponse mResultParameters;
};
} // namespace end

namespace NSTransactions {
    class Transactions : public QObject
    {
        Q_OBJECT

    public:
        Transactions( QObject* parent = 0 );
        ~Transactions();
        /**
            Asks Qt to ignore ssl errors in https requests. Use this for
            testing only!
         */
        void ignoreSslErrors();
        /**
            Overwrite the end point defined in the .wsdl file, with another
            http/https URL.
         */
        void setEndPoint( const QString& endPoint );
        /**
            Overwrite the soap version defined in the .wsdl file, with another
            version.
            version can be KDSoapClientInterface::SOAP1_1 or
            KDSoapClientInterface::SOAP1_2
         */
        void setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion );
        /**
            Return the error from the last blocking call.
            Empty if no error.
         */
        QString lastError() const;
        /**
            Returns the underlying KDSoapClientInterface instance, which allows
            to access setCookieJar, lastResponseHeaders, etc.
         */
        const KDSoapClientInterface *clientInterface() const;
        KDSoapClientInterface *clientInterface();
        /**
            Blocking call to CreateSalesTransaction.
            Not recommended in a GUI thread.
         */
        NSTransactions::TNS__CreateSalesTransactionResponse createSalesTransaction( const NSTransactions::TNS__CreateSalesTransaction& parameters );
        /**
            Asynchronous call to CreateSalesTransaction.
            Remember to connect to createSalesTransactionDone and
            createSalesTransactionError.
         */
        void asyncCreateSalesTransaction( const NSTransactions::TNS__CreateSalesTransaction& parameters );
        /**
            Blocking call to CreateStockTransaction.
            Not recommended in a GUI thread.
         */
        NSTransactions::TNS__CreateStockTransactionResponse createStockTransaction( const NSTransactions::TNS__CreateStockTransaction& parameters );
        /**
            Asynchronous call to CreateStockTransaction.
            Remember to connect to createStockTransactionDone and
            createStockTransactionError.
         */
        void asyncCreateStockTransaction( const NSTransactions::TNS__CreateStockTransaction& parameters );
        /**
            Blocking call to CreateOpeningStock.
            Not recommended in a GUI thread.
         */
        NSTransactions::TNS__CreateOpeningStockResponse createOpeningStock( const NSTransactions::TNS__CreateOpeningStock& parameters );
        /**
            Asynchronous call to CreateOpeningStock.
            Remember to connect to createOpeningStockDone and
            createOpeningStockError.
         */
        void asyncCreateOpeningStock( const NSTransactions::TNS__CreateOpeningStock& parameters );

    Q_SIGNALS:
        /**
            This signal is emitted whenever a SOAP call failed, for a central
            processing of all SOAP errors.
            method is the name of the method (or operation) that returned the
            fault, for instance "addContact".
         */
        void soapError( const QString& method, const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            createSalesTransaction() succeeded.
         */
        void createSalesTransactionDone( const NSTransactions::TNS__CreateSalesTransactionResponse& parameters );
        /**
            This signal is emitted whenever the call to
            createSalesTransaction() failed.
         */
        void createSalesTransactionError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to
            createStockTransaction() succeeded.
         */
        void createStockTransactionDone( const NSTransactions::TNS__CreateStockTransactionResponse& parameters );
        /**
            This signal is emitted whenever the call to
            createStockTransaction() failed.
         */
        void createStockTransactionError( const KDSoapMessage& fault );
        /**
            This signal is emitted whenever the call to createOpeningStock()
            succeeded.
         */
        void createOpeningStockDone( const NSTransactions::TNS__CreateOpeningStockResponse& parameters );
        /**
            This signal is emitted whenever the call to createOpeningStock()
            failed.
         */
        void createOpeningStockError( const KDSoapMessage& fault );

    private Q_SLOTS:
        void _kd_slotCreateSalesTransactionFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateStockTransactionFinished( KDSoapPendingCallWatcher* watcher );
        void _kd_slotCreateOpeningStockFinished( KDSoapPendingCallWatcher* watcher );

    private:
        class PrivateDPtr;
        PrivateDPtr *d_ptr;
};
} // namespace end

#endif
