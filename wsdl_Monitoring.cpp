// This file is generated by KDAB's kdwsdl2cpp from Monitoring.svc.
// All changes you do to this file will be lost.

#include "wsdl_Monitoring.h"

#include <KDSoapClient/KDSoapNamespaceManager.h>
#include <KDSoapClient/KDSoapMessage.h>
#include <KDSoapClient/KDSoapValue.h>
#include <KDSoapClient/KDSoapPendingCallWatcher.h>

NSMonitoring::__MovementType::__MovementType( const Type &type )
{
    mType = type;
}

void NSMonitoring::__MovementType::setType( Type type )
{
    mType = type;
}

NSMonitoring::__MovementType::Type NSMonitoring::__MovementType::type() const
{
    return mType;
}

NSMonitoring::__MovementType::operator Type() const
{
    return mType;
}

QVariant NSMonitoring::__MovementType::serialize() const
{
    switch ( mType ) {
        case NSMonitoring::__MovementType::AB:
            return QString::fromLatin1("AB");
        case NSMonitoring::__MovementType::ABS:
            return QString::fromLatin1("ABS");
        case NSMonitoring::__MovementType::BET:
            return QString::fromLatin1("BET");
        case NSMonitoring::__MovementType::BETS:
            return QString::fromLatin1("BETS");
        case NSMonitoring::__MovementType::SVISZ:
            return QString::fromLatin1("SVISZ");
        case NSMonitoring::__MovementType::SVISZS:
            return QString::fromLatin1("SVISZS");
        case NSMonitoring::__MovementType::KIT:
            return QString::fromLatin1("KIT");
        case NSMonitoring::__MovementType::KITS:
            return QString::fromLatin1("KITS");
        case NSMonitoring::__MovementType::LELTT:
            return QString::fromLatin1("LELTT");
        case NSMonitoring::__MovementType::LELTH:
            return QString::fromLatin1("LELTH");
        case NSMonitoring::__MovementType::EGYT:
            return QString::fromLatin1("EGYT");
        case NSMonitoring::__MovementType::EGYJ:
            return QString::fromLatin1("EGYJ");
        case NSMonitoring::__MovementType::ASZLA:
            return QString::fromLatin1("ASZLA");
        case NSMonitoring::__MovementType::ASZLAS:
            return QString::fromLatin1("ASZLAS");
        case NSMonitoring::__MovementType::NY:
            return QString::fromLatin1("NY");
        case NSMonitoring::__MovementType::NYS:
            return QString::fromLatin1("NYS");
        case NSMonitoring::__MovementType::KSZLA:
            return QString::fromLatin1("KSZLA");
        case NSMonitoring::__MovementType::KSZLAS:
            return QString::fromLatin1("KSZLAS");
        case NSMonitoring::__MovementType::VVISZ:
            return QString::fromLatin1("VVISZ");
        default:
            qDebug("Unknown enum %d passed.", mType);
            break;
    }

    return QVariant();
}

void NSMonitoring::__MovementType::deserialize( const QVariant& value )
{
    static const struct { const char* name; Type value; } s_values[19] = {
    { "AB", NSMonitoring::__MovementType::AB },
    { "ABS", NSMonitoring::__MovementType::ABS },
    { "BET", NSMonitoring::__MovementType::BET },
    { "BETS", NSMonitoring::__MovementType::BETS },
    { "SVISZ", NSMonitoring::__MovementType::SVISZ },
    { "SVISZS", NSMonitoring::__MovementType::SVISZS },
    { "KIT", NSMonitoring::__MovementType::KIT },
    { "KITS", NSMonitoring::__MovementType::KITS },
    { "LELTT", NSMonitoring::__MovementType::LELTT },
    { "LELTH", NSMonitoring::__MovementType::LELTH },
    { "EGYT", NSMonitoring::__MovementType::EGYT },
    { "EGYJ", NSMonitoring::__MovementType::EGYJ },
    { "ASZLA", NSMonitoring::__MovementType::ASZLA },
    { "ASZLAS", NSMonitoring::__MovementType::ASZLAS },
    { "NY", NSMonitoring::__MovementType::NY },
    { "NYS", NSMonitoring::__MovementType::NYS },
    { "KSZLA", NSMonitoring::__MovementType::KSZLA },
    { "KSZLAS", NSMonitoring::__MovementType::KSZLAS },
    { "VVISZ", NSMonitoring::__MovementType::VVISZ }
    };
    const QString str = value.toString();
    for ( int i = 0; i < 19; ++i ) {
        if (str == QLatin1String(s_values[i].name)) {
            mType = s_values[i].value;
            return;
        }
    }
    qDebug("Unknown enum value '%s' passed to '__MovementType'.", qPrintable(str) );
}

NSMonitoring::__MovementType::__MovementType()
    : mType(Type(0))
{
}

NSMonitoring::__MovementType::~__MovementType()
{
}


class NSMonitoring::TNS__Wait::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    int mSec;
    bool mSec_nil;
};

NSMonitoring::TNS__Wait::PrivateDPtr::PrivateDPtr()
    : mSec(0), mSec_nil(true)
{
}


void NSMonitoring::TNS__Wait::setSec( int sec )
{
    d_ptr->mSec_nil = false;
    d_ptr->mSec = sec;
}

int NSMonitoring::TNS__Wait::sec() const
{
    return d_ptr->mSec;
}

KDSoapValue NSMonitoring::TNS__Wait::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("Wait"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mSec_nil) {
        KDSoapValue _valueSec(QString::fromLatin1("sec"), QVariant::fromValue(d_ptr->mSec), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("int"));// converter_complextype.cpp:239
        _valueSec.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueSec.setQualified(true);
        if (!_valueSec.isNil())
        args.append(_valueSec);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::TNS__Wait::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("sec")) {// converter_complextype.cpp:271
            d_ptr->mSec = val.value().value<int>();// converter_complextype.cpp:284
        }
    }
}

NSMonitoring::TNS__Wait::TNS__Wait()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::TNS__Wait::~TNS__Wait()
{
}

NSMonitoring::TNS__Wait::TNS__Wait( const NSMonitoring::TNS__Wait& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::TNS__Wait&  NSMonitoring::TNS__Wait::operator=( const NSMonitoring::TNS__Wait& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


KDSoapValue NSMonitoring::TNS__WaitResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("WaitResponse"));// converter_complextype.cpp:359
    return mainValue;
}

void NSMonitoring::TNS__WaitResponse::deserialize( const KDSoapValue& mainValue )
{
    Q_UNUSED(mainValue);// converter_complextype.cpp:389
}

NSMonitoring::TNS__WaitResponse::TNS__WaitResponse()
{
}

NSMonitoring::TNS__WaitResponse::~TNS__WaitResponse()
{
}


class NSMonitoring::__Entity::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::__ArrayOfTableContent mTables;
    bool mTables_nil;
};

NSMonitoring::__Entity::PrivateDPtr::PrivateDPtr()
    : mTables_nil(true)
{
}


void NSMonitoring::__Entity::setTables( const NSMonitoring::__ArrayOfTableContent& tables )
{
    d_ptr->mTables_nil = false;
    d_ptr->mTables = tables;
}

NSMonitoring::__ArrayOfTableContent NSMonitoring::__Entity::tables() const
{
    return d_ptr->mTables;
}

KDSoapValue NSMonitoring::__Entity::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Entity"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mTables_nil) {
        KDSoapValue _valueTables(d_ptr->mTables.serialize(QString::fromLatin1("Tables")));// converter_complextype.cpp:233
        _valueTables.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTables.setQualified(true);
        _valueTables.setNillable(true);
        if (!_valueTables.isNil())
        args.append(_valueTables);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::__Entity::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Tables")) {// converter_complextype.cpp:271
            d_ptr->mTables.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMonitoring::__Entity::__Entity()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__Entity::~__Entity()
{
}

NSMonitoring::__Entity::__Entity( const NSMonitoring::__Entity& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__Entity&  NSMonitoring::__Entity::operator=( const NSMonitoring::__Entity& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::TNS__GetDocument::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    QString mLocalDocumentId;
    bool mLocalDocumentId_nil;
    NSMonitoring::__MovementType mMovementType;
    bool mMovementType_nil;
};

NSMonitoring::TNS__GetDocument::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mLocalDocumentId_nil(true), mMovementType_nil(true)
{
}


void NSMonitoring::TNS__GetDocument::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMonitoring::TNS__GetDocument::shopId() const
{
    return d_ptr->mShopId;
}

void NSMonitoring::TNS__GetDocument::setLocalDocumentId( const QString& localDocumentId )
{
    d_ptr->mLocalDocumentId_nil = false;
    d_ptr->mLocalDocumentId = localDocumentId;
}

QString NSMonitoring::TNS__GetDocument::localDocumentId() const
{
    return d_ptr->mLocalDocumentId;
}

void NSMonitoring::TNS__GetDocument::setMovementType( const NSMonitoring::__MovementType& movementType )
{
    d_ptr->mMovementType_nil = false;
    d_ptr->mMovementType = movementType;
}

NSMonitoring::__MovementType NSMonitoring::TNS__GetDocument::movementType() const
{
    return d_ptr->mMovementType;
}

KDSoapValue NSMonitoring::TNS__GetDocument::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetDocument"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mLocalDocumentId_nil) {
        KDSoapValue _valueLocalDocumentId(QString::fromLatin1("localDocumentId"), QVariant::fromValue(d_ptr->mLocalDocumentId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueLocalDocumentId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueLocalDocumentId.setQualified(true);
        _valueLocalDocumentId.setNillable(true);
        if (!_valueLocalDocumentId.isNil())
        args.append(_valueLocalDocumentId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mMovementType_nil) {
        KDSoapValue _valueMovementType(QString::fromLatin1("movementType"), d_ptr->mMovementType.serialize(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("MovementType"));// converter_complextype.cpp:241
        _valueMovementType.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueMovementType.setQualified(true);
        if (!_valueMovementType.isNil())
        args.append(_valueMovementType);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::TNS__GetDocument::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("localDocumentId")) {// converter_complextype.cpp:271
            d_ptr->mLocalDocumentId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("movementType")) {// converter_complextype.cpp:271
            d_ptr->mMovementType.deserialize(val.value());// converter_complextype.cpp:288
        }
    }
}

NSMonitoring::TNS__GetDocument::TNS__GetDocument()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::TNS__GetDocument::~TNS__GetDocument()
{
}

NSMonitoring::TNS__GetDocument::TNS__GetDocument( const NSMonitoring::TNS__GetDocument& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::TNS__GetDocument&  NSMonitoring::TNS__GetDocument::operator=( const NSMonitoring::TNS__GetDocument& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::TNS__GetOpeningStock::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mShopId;
    bool mShopId_nil;
    KDDateTime mCreationDate;
    bool mCreationDate_nil;
};

NSMonitoring::TNS__GetOpeningStock::PrivateDPtr::PrivateDPtr()
    : mShopId_nil(true), mCreationDate_nil(true)
{
}


void NSMonitoring::TNS__GetOpeningStock::setShopId( const QString& shopId )
{
    d_ptr->mShopId_nil = false;
    d_ptr->mShopId = shopId;
}

QString NSMonitoring::TNS__GetOpeningStock::shopId() const
{
    return d_ptr->mShopId;
}

void NSMonitoring::TNS__GetOpeningStock::setCreationDate( const KDDateTime& creationDate )
{
    d_ptr->mCreationDate_nil = false;
    d_ptr->mCreationDate = creationDate;
}

KDDateTime NSMonitoring::TNS__GetOpeningStock::creationDate() const
{
    return d_ptr->mCreationDate;
}

KDSoapValue NSMonitoring::TNS__GetOpeningStock::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetOpeningStock"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mShopId_nil) {
        KDSoapValue _valueShopId(QString::fromLatin1("shopId"), QVariant::fromValue(d_ptr->mShopId), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueShopId.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueShopId.setQualified(true);
        _valueShopId.setNillable(true);
        if (!_valueShopId.isNil())
        args.append(_valueShopId);// converter_complextype.cpp:253
    }
    if (!d_ptr->mCreationDate_nil) {
        KDSoapValue _valueCreationDate(QString::fromLatin1("creationDate"), d_ptr->mCreationDate.toDateString(), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("dateTime"));// converter_complextype.cpp:239
        _valueCreationDate.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueCreationDate.setQualified(true);
        if (!_valueCreationDate.isNil())
        args.append(_valueCreationDate);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::TNS__GetOpeningStock::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("shopId")) {// converter_complextype.cpp:271
            d_ptr->mShopId = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("creationDate")) {// converter_complextype.cpp:271
            d_ptr->mCreationDate = KDDateTime::fromDateString(val.value().toString());// converter_complextype.cpp:284
        }
    }
}

NSMonitoring::TNS__GetOpeningStock::TNS__GetOpeningStock()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::TNS__GetOpeningStock::~TNS__GetOpeningStock()
{
}

NSMonitoring::TNS__GetOpeningStock::TNS__GetOpeningStock( const NSMonitoring::TNS__GetOpeningStock& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::TNS__GetOpeningStock&  NSMonitoring::TNS__GetOpeningStock::operator=( const NSMonitoring::TNS__GetOpeningStock& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::__ArrayOfTableContent::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMonitoring::__TableContent> mTableContent;
    bool mTableContent_nil;
};

NSMonitoring::__ArrayOfTableContent::PrivateDPtr::PrivateDPtr()
    : mTableContent_nil(true)
{
}


void NSMonitoring::__ArrayOfTableContent::setTableContent( const QList<NSMonitoring::__TableContent>& tableContent )
{
    d_ptr->mTableContent_nil = false;
    d_ptr->mTableContent = tableContent;
}

QList<NSMonitoring::__TableContent> NSMonitoring::__ArrayOfTableContent::tableContent() const
{
    return d_ptr->mTableContent;
}

KDSoapValue NSMonitoring::__ArrayOfTableContent::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfTableContent"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mTableContent.count(); ++i) {
        KDSoapValue _valueTableContent(d_ptr->mTableContent.at(i).serialize(QString::fromLatin1("TableContent")));// converter_complextype.cpp:233
        _valueTableContent.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTableContent.setQualified(true);
        _valueTableContent.setNillable(true);
        args.append(_valueTableContent);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::__ArrayOfTableContent::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("TableContent")) {// converter_complextype.cpp:271
            NSMonitoring::__TableContent mTableContentTemp;
            mTableContentTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mTableContent.append(mTableContentTemp);
        }
    }
}

NSMonitoring::__ArrayOfTableContent::__ArrayOfTableContent()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__ArrayOfTableContent::~__ArrayOfTableContent()
{
}

NSMonitoring::__ArrayOfTableContent::__ArrayOfTableContent( const NSMonitoring::__ArrayOfTableContent& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__ArrayOfTableContent&  NSMonitoring::__ArrayOfTableContent::operator=( const NSMonitoring::__ArrayOfTableContent& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::TNS__GetOpeningStockResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::__Entity mGetOpeningStockResult;
    bool mGetOpeningStockResult_nil;
};

NSMonitoring::TNS__GetOpeningStockResponse::PrivateDPtr::PrivateDPtr()
    : mGetOpeningStockResult_nil(true)
{
}


void NSMonitoring::TNS__GetOpeningStockResponse::setGetOpeningStockResult( const NSMonitoring::__Entity& getOpeningStockResult )
{
    d_ptr->mGetOpeningStockResult_nil = false;
    d_ptr->mGetOpeningStockResult = getOpeningStockResult;
}

NSMonitoring::__Entity NSMonitoring::TNS__GetOpeningStockResponse::getOpeningStockResult() const
{
    return d_ptr->mGetOpeningStockResult;
}

KDSoapValue NSMonitoring::TNS__GetOpeningStockResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetOpeningStockResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetOpeningStockResult_nil) {
        KDSoapValue _valueGetOpeningStockResult(d_ptr->mGetOpeningStockResult.serialize(QString::fromLatin1("GetOpeningStockResult")));// converter_complextype.cpp:233
        _valueGetOpeningStockResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetOpeningStockResult.setQualified(true);
        _valueGetOpeningStockResult.setNillable(true);
        if (!_valueGetOpeningStockResult.isNil())
        args.append(_valueGetOpeningStockResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::TNS__GetOpeningStockResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetOpeningStockResult")) {// converter_complextype.cpp:271
            d_ptr->mGetOpeningStockResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMonitoring::TNS__GetOpeningStockResponse::TNS__GetOpeningStockResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::TNS__GetOpeningStockResponse::~TNS__GetOpeningStockResponse()
{
}

NSMonitoring::TNS__GetOpeningStockResponse::TNS__GetOpeningStockResponse( const NSMonitoring::TNS__GetOpeningStockResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::TNS__GetOpeningStockResponse&  NSMonitoring::TNS__GetOpeningStockResponse::operator=( const NSMonitoring::TNS__GetOpeningStockResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::__Record::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::__ArrayOfColumn mColumns;
    bool mColumns_nil;
};

NSMonitoring::__Record::PrivateDPtr::PrivateDPtr()
    : mColumns_nil(true)
{
}


void NSMonitoring::__Record::setColumns( const NSMonitoring::__ArrayOfColumn& columns )
{
    d_ptr->mColumns_nil = false;
    d_ptr->mColumns = columns;
}

NSMonitoring::__ArrayOfColumn NSMonitoring::__Record::columns() const
{
    return d_ptr->mColumns;
}

KDSoapValue NSMonitoring::__Record::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Record"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mColumns_nil) {
        KDSoapValue _valueColumns(d_ptr->mColumns.serialize(QString::fromLatin1("Columns")));// converter_complextype.cpp:233
        _valueColumns.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueColumns.setQualified(true);
        _valueColumns.setNillable(true);
        if (!_valueColumns.isNil())
        args.append(_valueColumns);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::__Record::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Columns")) {// converter_complextype.cpp:271
            d_ptr->mColumns.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMonitoring::__Record::__Record()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__Record::~__Record()
{
}

NSMonitoring::__Record::__Record( const NSMonitoring::__Record& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__Record&  NSMonitoring::__Record::operator=( const NSMonitoring::__Record& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::__ArrayOfColumn::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMonitoring::__Column> mColumn;
    bool mColumn_nil;
};

NSMonitoring::__ArrayOfColumn::PrivateDPtr::PrivateDPtr()
    : mColumn_nil(true)
{
}


void NSMonitoring::__ArrayOfColumn::setColumn( const QList<NSMonitoring::__Column>& column )
{
    d_ptr->mColumn_nil = false;
    d_ptr->mColumn = column;
}

QList<NSMonitoring::__Column> NSMonitoring::__ArrayOfColumn::column() const
{
    return d_ptr->mColumn;
}

KDSoapValue NSMonitoring::__ArrayOfColumn::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfColumn"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mColumn.count(); ++i) {
        KDSoapValue _valueColumn(d_ptr->mColumn.at(i).serialize(QString::fromLatin1("Column")));// converter_complextype.cpp:233
        _valueColumn.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueColumn.setQualified(true);
        _valueColumn.setNillable(true);
        args.append(_valueColumn);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::__ArrayOfColumn::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Column")) {// converter_complextype.cpp:271
            NSMonitoring::__Column mColumnTemp;
            mColumnTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mColumn.append(mColumnTemp);
        }
    }
}

NSMonitoring::__ArrayOfColumn::__ArrayOfColumn()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__ArrayOfColumn::~__ArrayOfColumn()
{
}

NSMonitoring::__ArrayOfColumn::__ArrayOfColumn( const NSMonitoring::__ArrayOfColumn& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__ArrayOfColumn&  NSMonitoring::__ArrayOfColumn::operator=( const NSMonitoring::__ArrayOfColumn& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::TNS__GetDocumentResponse::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::__Entity mGetDocumentResult;
    bool mGetDocumentResult_nil;
};

NSMonitoring::TNS__GetDocumentResponse::PrivateDPtr::PrivateDPtr()
    : mGetDocumentResult_nil(true)
{
}


void NSMonitoring::TNS__GetDocumentResponse::setGetDocumentResult( const NSMonitoring::__Entity& getDocumentResult )
{
    d_ptr->mGetDocumentResult_nil = false;
    d_ptr->mGetDocumentResult = getDocumentResult;
}

NSMonitoring::__Entity NSMonitoring::TNS__GetDocumentResponse::getDocumentResult() const
{
    return d_ptr->mGetDocumentResult;
}

KDSoapValue NSMonitoring::TNS__GetDocumentResponse::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://localhost/nd/communication/"), QString::fromLatin1("GetDocumentResponse"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mGetDocumentResult_nil) {
        KDSoapValue _valueGetDocumentResult(d_ptr->mGetDocumentResult.serialize(QString::fromLatin1("GetDocumentResult")));// converter_complextype.cpp:233
        _valueGetDocumentResult.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
        _valueGetDocumentResult.setQualified(true);
        _valueGetDocumentResult.setNillable(true);
        if (!_valueGetDocumentResult.isNil())
        args.append(_valueGetDocumentResult);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::TNS__GetDocumentResponse::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("GetDocumentResult")) {// converter_complextype.cpp:271
            d_ptr->mGetDocumentResult.deserialize(val);// converter_complextype.cpp:286
        }
    }
}

NSMonitoring::TNS__GetDocumentResponse::TNS__GetDocumentResponse()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::TNS__GetDocumentResponse::~TNS__GetDocumentResponse()
{
}

NSMonitoring::TNS__GetDocumentResponse::TNS__GetDocumentResponse( const NSMonitoring::TNS__GetDocumentResponse& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::TNS__GetDocumentResponse&  NSMonitoring::TNS__GetDocumentResponse::operator=( const NSMonitoring::TNS__GetDocumentResponse& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::__TableContent::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    NSMonitoring::__ArrayOfRecord mRecords;
    bool mRecords_nil;
    QString mTableName;
    bool mTableName_nil;
};

NSMonitoring::__TableContent::PrivateDPtr::PrivateDPtr()
    : mRecords_nil(true), mTableName_nil(true)
{
}


void NSMonitoring::__TableContent::setRecords( const NSMonitoring::__ArrayOfRecord& records )
{
    d_ptr->mRecords_nil = false;
    d_ptr->mRecords = records;
}

NSMonitoring::__ArrayOfRecord NSMonitoring::__TableContent::records() const
{
    return d_ptr->mRecords;
}

void NSMonitoring::__TableContent::setTableName( const QString& tableName )
{
    d_ptr->mTableName_nil = false;
    d_ptr->mTableName = tableName;
}

QString NSMonitoring::__TableContent::tableName() const
{
    return d_ptr->mTableName;
}

KDSoapValue NSMonitoring::__TableContent::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("TableContent"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mRecords_nil) {
        KDSoapValue _valueRecords(d_ptr->mRecords.serialize(QString::fromLatin1("Records")));// converter_complextype.cpp:233
        _valueRecords.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueRecords.setQualified(true);
        _valueRecords.setNillable(true);
        if (!_valueRecords.isNil())
        args.append(_valueRecords);// converter_complextype.cpp:253
    }
    if (!d_ptr->mTableName_nil) {
        KDSoapValue _valueTableName(QString::fromLatin1("TableName"), QVariant::fromValue(d_ptr->mTableName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueTableName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTableName.setQualified(true);
        _valueTableName.setNillable(true);
        if (!_valueTableName.isNil())
        args.append(_valueTableName);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::__TableContent::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Records")) {// converter_complextype.cpp:271
            d_ptr->mRecords.deserialize(val);// converter_complextype.cpp:286
        }
        else if (name == QLatin1String("TableName")) {// converter_complextype.cpp:271
            d_ptr->mTableName = val.value().value<QString>();// converter_complextype.cpp:284
        }
    }
}

NSMonitoring::__TableContent::__TableContent()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__TableContent::~__TableContent()
{
}

NSMonitoring::__TableContent::__TableContent( const NSMonitoring::__TableContent& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__TableContent&  NSMonitoring::__TableContent::operator=( const NSMonitoring::__TableContent& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::__ArrayOfRecord::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QList<NSMonitoring::__Record> mRecord;
    bool mRecord_nil;
};

NSMonitoring::__ArrayOfRecord::PrivateDPtr::PrivateDPtr()
    : mRecord_nil(true)
{
}


void NSMonitoring::__ArrayOfRecord::setRecord( const QList<NSMonitoring::__Record>& record )
{
    d_ptr->mRecord_nil = false;
    d_ptr->mRecord = record;
}

QList<NSMonitoring::__Record> NSMonitoring::__ArrayOfRecord::record() const
{
    return d_ptr->mRecord;
}

KDSoapValue NSMonitoring::__ArrayOfRecord::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("ArrayOfRecord"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    for (int i = 0; i < d_ptr->mRecord.count(); ++i) {
        KDSoapValue _valueRecord(d_ptr->mRecord.at(i).serialize(QString::fromLatin1("Record")));// converter_complextype.cpp:233
        _valueRecord.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueRecord.setQualified(true);
        _valueRecord.setNillable(true);
        args.append(_valueRecord);// converter_complextype.cpp:253
    }
    return mainValue;
}

void NSMonitoring::__ArrayOfRecord::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Record")) {// converter_complextype.cpp:271
            NSMonitoring::__Record mRecordTemp;
            mRecordTemp.deserialize(val);// converter_complextype.cpp:286
            d_ptr->mRecord.append(mRecordTemp);
        }
    }
}

NSMonitoring::__ArrayOfRecord::__ArrayOfRecord()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__ArrayOfRecord::~__ArrayOfRecord()
{
}

NSMonitoring::__ArrayOfRecord::__ArrayOfRecord( const NSMonitoring::__ArrayOfRecord& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__ArrayOfRecord&  NSMonitoring::__ArrayOfRecord::operator=( const NSMonitoring::__ArrayOfRecord& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


class NSMonitoring::__Column::PrivateDPtr : public QSharedData
{
public:
    PrivateDPtr();

public:
    QString mName;
    bool mName_nil;
    QString mTypeName;
    bool mTypeName_nil;
    KDSoapValue mValue;
    bool mValue_nil;
};

NSMonitoring::__Column::PrivateDPtr::PrivateDPtr()
    : mName_nil(true), mTypeName_nil(true), mValue_nil(true)
{
}


void NSMonitoring::__Column::setName( const QString& name )
{
    d_ptr->mName_nil = false;
    d_ptr->mName = name;
}

QString NSMonitoring::__Column::name() const
{
    return d_ptr->mName;
}

void NSMonitoring::__Column::setTypeName( const QString& typeName )
{
    d_ptr->mTypeName_nil = false;
    d_ptr->mTypeName = typeName;
}

QString NSMonitoring::__Column::typeName() const
{
    return d_ptr->mTypeName;
}

void NSMonitoring::__Column::setValue( const KDSoapValue& value )
{
    d_ptr->mValue_nil = false;
    d_ptr->mValue = value;
}

KDSoapValue NSMonitoring::__Column::value() const
{
    return d_ptr->mValue;
}

KDSoapValue NSMonitoring::__Column::serialize( const QString& valueName ) const
{
    KDSoapValue mainValue(valueName, QVariant(), QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"), QString::fromLatin1("Column"));// converter_complextype.cpp:359
    KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:379
    mainValue.setQualified(true);// converter_complextype.cpp:381
    if (!d_ptr->mName_nil) {
        KDSoapValue _valueName(QString::fromLatin1("Name"), QVariant::fromValue(d_ptr->mName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueName.setQualified(true);
        _valueName.setNillable(true);
        if (!_valueName.isNil())
        args.append(_valueName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mTypeName_nil) {
        KDSoapValue _valueTypeName(QString::fromLatin1("TypeName"), QVariant::fromValue(d_ptr->mTypeName), KDSoapNamespaceManager::xmlSchema2001(), QString::fromLatin1("string"));// converter_complextype.cpp:239
        _valueTypeName.setNamespaceUri(QString::fromLatin1("http://schemas.datacontract.org/2004/07/ND.Common.Interface"));
        _valueTypeName.setQualified(true);
        _valueTypeName.setNillable(true);
        if (!_valueTypeName.isNil())
        args.append(_valueTypeName);// converter_complextype.cpp:253
    }
    if (!d_ptr->mValue.isNull()) {
        args.append(d_ptr->mValue);// converter_complextype.cpp:217
    }
    return mainValue;
}

void NSMonitoring::__Column::deserialize( const KDSoapValue& mainValue )
{
    const KDSoapValueList& args = mainValue.childValues();// converter_complextype.cpp:375
    for (int argNr = 0; argNr < args.count(); ++argNr) {
        const KDSoapValue& val = args.at(argNr);
        const QString name = val.name();
        if (name == QLatin1String("Name")) {// converter_complextype.cpp:271
            d_ptr->mName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("TypeName")) {// converter_complextype.cpp:271
            d_ptr->mTypeName = val.value().value<QString>();// converter_complextype.cpp:284
        }
        else if (name == QLatin1String("Value")) {// converter_complextype.cpp:271
            d_ptr->mValue = val;// converter_complextype.cpp:282
        }
    }
}

NSMonitoring::__Column::__Column()
    : d_ptr(new PrivateDPtr)
{
}

NSMonitoring::__Column::~__Column()
{
}

NSMonitoring::__Column::__Column( const NSMonitoring::__Column& other )
    : d_ptr( other.d_ptr )
{
}

NSMonitoring::__Column&  NSMonitoring::__Column::operator=( const NSMonitoring::__Column& other )
{
    if ( this == &other )
        return *this;

    d_ptr = other.d_ptr;

    return *this;
}


NSMonitoring::GetDocumentJob::GetDocumentJob( NSMonitoring::Monitoring* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMonitoring::GetDocumentJob::setParameters( const NSMonitoring::TNS__GetDocument& arg0 )
{
    mParameters = arg0;
}

NSMonitoring::TNS__GetDocument NSMonitoring::GetDocumentJob::parameters() const
{
    return mParameters;
}

void NSMonitoring::GetDocumentJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetDocument");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDocument(mParameters.serialize(QString::fromLatin1("GetDocument")));// converter_complextype.cpp:233
    _valueGetDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetDocument.setQualified(true);
    message = _valueGetDocument;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetDocument"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMonitoring::TNS__GetDocumentResponse NSMonitoring::GetDocumentJob::resultParameters() const
{
    return mResultParameters;
}

void NSMonitoring::GetDocumentJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMonitoring::GetOpeningStockJob::GetOpeningStockJob( NSMonitoring::Monitoring* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMonitoring::GetOpeningStockJob::setParameters( const NSMonitoring::TNS__GetOpeningStock& arg0 )
{
    mParameters = arg0;
}

NSMonitoring::TNS__GetOpeningStock NSMonitoring::GetOpeningStockJob::parameters() const
{
    return mParameters;
}

void NSMonitoring::GetOpeningStockJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetOpeningStock(mParameters.serialize(QString::fromLatin1("GetOpeningStock")));// converter_complextype.cpp:233
    _valueGetOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetOpeningStock.setQualified(true);
    message = _valueGetOpeningStock;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("GetOpeningStock"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMonitoring::TNS__GetOpeningStockResponse NSMonitoring::GetOpeningStockJob::resultParameters() const
{
    return mResultParameters;
}

void NSMonitoring::GetOpeningStockJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


NSMonitoring::WaitJob::WaitJob( NSMonitoring::Monitoring* service, QObject* parent )
    : KDSoapJob(parent), mService(service), mParameters(), mResultParameters()
{
}

void NSMonitoring::WaitJob::setParameters( const NSMonitoring::TNS__Wait& arg0 )
{
    mParameters = arg0;
}

NSMonitoring::TNS__Wait NSMonitoring::WaitJob::parameters() const
{
    return mParameters;
}

void NSMonitoring::WaitJob::doStart()
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/Wait");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueWait(mParameters.serialize(QString::fromLatin1("Wait")));// converter_complextype.cpp:233
    _valueWait.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueWait.setQualified(true);
    message = _valueWait;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = mService->clientInterface()->asyncCall(QLatin1String("Wait"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(slotFinished(KDSoapPendingCallWatcher*)));
}

NSMonitoring::TNS__WaitResponse NSMonitoring::WaitJob::resultParameters() const
{
    return mResultParameters;
}

void NSMonitoring::WaitJob::slotFinished( KDSoapPendingCallWatcher* watcher )
{
    watcher->deleteLater();
    const KDSoapMessage reply = watcher->returnMessage();
    if (!reply.isFault()) {// converter_clientstub.cpp:378
        mResultParameters.deserialize(reply);// converter_clientstub.cpp:533
    }
    emitFinished(reply, watcher->returnHeaders());
}


class NSMonitoring::Monitoring::PrivateDPtr
{
public:
    PrivateDPtr();

public:
    KDSoapClientInterface *m_clientInterface;
    KDSoapMessage m_lastReply;
    QString m_endPoint;
};

NSMonitoring::Monitoring::PrivateDPtr::PrivateDPtr()
    : m_clientInterface(NULL)
{
}


NSMonitoring::Monitoring::Monitoring( QObject* parent )
    : QObject(parent), d_ptr(new PrivateDPtr)
{
}

NSMonitoring::Monitoring::~Monitoring()
{
    delete d_ptr->m_clientInterface;

    delete d_ptr;
    d_ptr = 0;
}

void NSMonitoring::Monitoring::ignoreSslErrors()
{
    clientInterface()->ignoreSslErrors();
}

void NSMonitoring::Monitoring::setEndPoint( const QString& endPoint )
{
    d_ptr->m_endPoint = endPoint;
    if (d_ptr->m_clientInterface)
        d_ptr->m_clientInterface->setEndPoint( endPoint );
}

void NSMonitoring::Monitoring::setSoapVersion( KDSoapClientInterface::SoapVersion soapVersion )
{
    clientInterface()->setSoapVersion(soapVersion);
}

QString NSMonitoring::Monitoring::lastError() const
{
    if (d_ptr->m_lastReply.isFault())
        return d_ptr->m_lastReply.faultAsString();
    return QString();
}

const KDSoapClientInterface *NSMonitoring::Monitoring::clientInterface() const
{
    if (!d_ptr->m_clientInterface) {
        const QString endPoint = !d_ptr->m_endPoint.isEmpty() ? d_ptr->m_endPoint : QString::fromLatin1("https://adatkuldes-teszt.nemzetidohany.gov.hu:8444/nd/Monitoring.svc");
        const QString messageNamespace = QString::fromLatin1("http://localhost/nd/communication/");
        d_ptr->m_clientInterface = new KDSoapClientInterface(endPoint, messageNamespace);
        d_ptr->m_clientInterface->setStyle( KDSoapClientInterface::DocumentStyle );
        d_ptr->m_clientInterface->setSoapVersion( KDSoapClientInterface::SOAP1_2 );
    }
    return d_ptr->m_clientInterface;
}

KDSoapClientInterface *NSMonitoring::Monitoring::clientInterface()
{
    return const_cast<KDSoapClientInterface*>( const_cast< const Monitoring*>( this )->clientInterface() );
}

NSMonitoring::TNS__GetDocumentResponse NSMonitoring::Monitoring::getDocument( const NSMonitoring::TNS__GetDocument& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetDocument");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDocument(parameters.serialize(QString::fromLatin1("GetDocument")));// converter_complextype.cpp:233
    _valueGetDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetDocument.setQualified(true);
    message = _valueGetDocument;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetDocument"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMonitoring::TNS__GetDocumentResponse();
    NSMonitoring::TNS__GetDocumentResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMonitoring::Monitoring::asyncGetDocument( const NSMonitoring::TNS__GetDocument& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetDocument");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetDocument(parameters.serialize(QString::fromLatin1("GetDocument")));// converter_complextype.cpp:233
    _valueGetDocument.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetDocument.setQualified(true);
    message = _valueGetDocument;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetDocument"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetDocumentFinished(KDSoapPendingCallWatcher*)));
}

void NSMonitoring::Monitoring::_kd_slotGetDocumentFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getDocumentError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getDocument"), reply);
    } else {
        NSMonitoring::TNS__GetDocumentResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getDocumentDone( ret );
    }
    watcher->deleteLater();
}

NSMonitoring::TNS__GetOpeningStockResponse NSMonitoring::Monitoring::getOpeningStock( const NSMonitoring::TNS__GetOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetOpeningStock(parameters.serialize(QString::fromLatin1("GetOpeningStock")));// converter_complextype.cpp:233
    _valueGetOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetOpeningStock.setQualified(true);
    message = _valueGetOpeningStock;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("GetOpeningStock"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMonitoring::TNS__GetOpeningStockResponse();
    NSMonitoring::TNS__GetOpeningStockResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMonitoring::Monitoring::asyncGetOpeningStock( const NSMonitoring::TNS__GetOpeningStock& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/GetOpeningStock");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueGetOpeningStock(parameters.serialize(QString::fromLatin1("GetOpeningStock")));// converter_complextype.cpp:233
    _valueGetOpeningStock.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueGetOpeningStock.setQualified(true);
    message = _valueGetOpeningStock;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("GetOpeningStock"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotGetOpeningStockFinished(KDSoapPendingCallWatcher*)));
}

void NSMonitoring::Monitoring::_kd_slotGetOpeningStockFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT getOpeningStockError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("getOpeningStock"), reply);
    } else {
        NSMonitoring::TNS__GetOpeningStockResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT getOpeningStockDone( ret );
    }
    watcher->deleteLater();
}

NSMonitoring::TNS__WaitResponse NSMonitoring::Monitoring::wait( const NSMonitoring::TNS__Wait& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/Wait");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueWait(parameters.serialize(QString::fromLatin1("Wait")));// converter_complextype.cpp:233
    _valueWait.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueWait.setQualified(true);
    message = _valueWait;// converter_complextype.cpp:253
    d_ptr->m_lastReply = clientInterface()->call(QLatin1String("Wait"), message, action);
    if (d_ptr->m_lastReply.isFault())
        return NSMonitoring::TNS__WaitResponse();
    NSMonitoring::TNS__WaitResponse ret;
    ret.deserialize(d_ptr->m_lastReply);// converter_clientstub.cpp:533
    return ret;// converter_clientstub.cpp:587
}

void NSMonitoring::Monitoring::asyncWait( const NSMonitoring::TNS__Wait& parameters )
{
    const QString action = QString::fromLatin1("http://localhost/nd/communication/IMonitoring/Wait");
    KDSoapMessage message;
    message.setUse(KDSoapMessage::LiteralUse);
    KDSoapValue _valueWait(parameters.serialize(QString::fromLatin1("Wait")));// converter_complextype.cpp:233
    _valueWait.setNamespaceUri(QString::fromLatin1("http://localhost/nd/communication/"));
    _valueWait.setQualified(true);
    message = _valueWait;// converter_complextype.cpp:253
    KDSoapPendingCall pendingCall = clientInterface()->asyncCall(QLatin1String("Wait"), message, action);
    KDSoapPendingCallWatcher *watcher = new KDSoapPendingCallWatcher(pendingCall, this);
    QObject::connect(watcher, SIGNAL(finished(KDSoapPendingCallWatcher*)),
                     this, SLOT(_kd_slotWaitFinished(KDSoapPendingCallWatcher*)));
}

void NSMonitoring::Monitoring::_kd_slotWaitFinished( KDSoapPendingCallWatcher* watcher )
{
    const KDSoapMessage reply = watcher->returnMessage();
    if (reply.isFault()) {
        Q_EMIT waitError(reply);// converter_clientstub.cpp:697
        Q_EMIT soapError(QLatin1String("wait"), reply);
    } else {
        NSMonitoring::TNS__WaitResponse ret;
        ret.deserialize(reply);// converter_clientstub.cpp:533
        Q_EMIT waitDone( ret );
    }
    watcher->deleteLater();
}


